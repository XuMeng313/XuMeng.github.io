<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白日梦想录</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-06T12:19:48.440Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>续梦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>考研算法实现.md</title>
    <link href="http://example.com/2023/01/07/%E7%AE%97%E6%B3%95-%E7%8E%8B%E9%81%93%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/01/07/%E7%AE%97%E6%B3%95-%E7%8E%8B%E9%81%93%E7%AE%97%E6%B3%95/</id>
    <published>2023-01-07T09:34:13.000Z</published>
    <updated>2023-03-06T12:19:48.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="王道数据结构算法实现"><a href="#王道数据结构算法实现" class="headerlink" title="王道数据结构算法实现"></a>王道数据结构算法实现</h1><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> max_size = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Sqlist</span>&#123;</span><br><span class="line">    <span class="type">int</span> data[max_size];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">    <span class="type">int</span> max_size;</span><br><span class="line">&#125;Sqlist;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initList</span><span class="params">(Sqlist &amp;L)</span> </span>&#123;</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构建</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getElem</span><span class="params">(Sqlist L, <span class="type">int</span> p, <span class="type">int</span> &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; <span class="number">0</span> || p &gt;= L.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = L.data[p];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insertElem</span><span class="params">(Sqlist &amp;L, <span class="type">int</span> p, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; <span class="number">0</span> || p &gt; L.length || L.length == max_size) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = L.length<span class="number">-1</span>; i &gt;= p; i--) &#123;</span><br><span class="line">        L.data[i+<span class="number">1</span>] = L.data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    L.data[p] = e;</span><br><span class="line">    ++(L.length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按元素查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findElem</span><span class="params">(Sqlist L, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] == e) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">deleteElem</span><span class="params">(Sqlist &amp;L, <span class="type">int</span> p, <span class="type">int</span> &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; <span class="number">0</span> || p &gt;= L.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = L.data[p];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt; L.length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        L.data[i] = L.data[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    --(L.length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//题目实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exercises</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">first</span><span class="params">(Sqlist &amp;a)</span><span class="comment">//第一题</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.length==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = a.data[<span class="number">0</span>], pos = <span class="number">0</span>;<span class="comment">//pos是记录删除下标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a.data[i]&lt;res)</span><br><span class="line">            &#123;</span><br><span class="line">                res = a.data[i];</span><br><span class="line">                pos =i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a.data[pos] =a.data[a.length<span class="number">-1</span>];</span><br><span class="line">        a.length--;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;over&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">second</span><span class="params">(Sqlist &amp;a)</span><span class="comment">//2</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> tmp;<span class="comment">//原理和交换一样就是不停的借助辅助变量实现前后交换</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;a.length/<span class="number">2</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = a.data[i];</span><br><span class="line">            a.data[i] = a.data[a.length-i<span class="number">-1</span>];<span class="comment">//第一个和最后一个匹配，第二个和倒数第二个匹配.....</span></span><br><span class="line">            a.data[a.length-i<span class="number">-1</span>] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">third_1</span><span class="params">(Sqlist &amp;a,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> k =<span class="number">0</span>;<span class="comment">//记录下标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a.data[i]!=k)</span><br><span class="line">            &#123;</span><br><span class="line">                a.data[k] = a.data[i];</span><br><span class="line">                k++;<span class="comment">//思路就是遇到不等于的就将值赋给当前k下标的，遇到等于目标值的时候k不动，下一个不等于目标值的自然就给目标值覆盖了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a.length = k;<span class="comment">//更新长度</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.1,原理是每次往前移动k个，k是出现x的个数，表明前面有k个空位，直接往前移就行(其他都移动好了，可以看作把空位往后移动了)</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">third_2</span><span class="params">(Sqlist &amp;a,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> k =<span class="number">0</span>,i =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;a.length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a.data[i]==x) k++;</span><br><span class="line">            <span class="keyword">else</span> a.data[i-k] = a.data[i];</span><br><span class="line"></span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        a.length = a.length-k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">four</span><span class="params">(Sqlist &amp;a,<span class="type">int</span> s,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(s&gt;=t||a.length==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;error&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i =<span class="number">0</span>,j =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i =<span class="number">0</span>;i&lt;a.length&amp;&amp;a.data[i]&lt;s;i++); <span class="comment">//寻找第一个大于或等于s的元素</span></span><br><span class="line">        <span class="keyword">if</span>(i&gt;=a.length)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;error&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =i;j&lt;a.length&amp;&amp;a.data[j]&lt;=t;j++);<span class="comment">//寻找大于t的第一个元素</span></span><br><span class="line">        <span class="keyword">for</span>(;j&lt;a.length;i++,j++)</span><br><span class="line">            a.data[i] = a.data[j];<span class="comment">//覆盖元素，类似双指针</span></span><br><span class="line">        a.length = i;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5,原理和第三题差不多</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">five</span><span class="params">(Sqlist&amp; a,<span class="type">int</span> s,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.length ==<span class="number">0</span>||s&gt;=t)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;error&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i,k =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a.data[i]&gt;=s&amp;&amp;a.data[i]&lt;=t)</span><br><span class="line">                k++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            a.data[i-k] = a.data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        a.length -=k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6 原理就是碰到当i，j元素相等时j往下移，不相等时i+1的元素存放j位元素(保证了i上元素放的是之前的相同元素)</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">six</span><span class="params">(Sqlist&amp; a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.length==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>,j =<span class="number">1</span>;j&lt;a.length;j++)</span><br><span class="line">            <span class="keyword">if</span>(a.data[i]!=a.data[j])</span><br><span class="line">                a.data[++i] = a.data[j];</span><br><span class="line">        a.length =i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7,合并，直接双指针比大小谁符合条件谁往前移动</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">seven</span><span class="params">(Sqlist a,Sqlist b,Sqlist&amp;c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.length+b.length&gt;c.max_size) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> i =<span class="number">0</span>,j  =<span class="number">0</span> ,k =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;a.length&amp;&amp;j&lt;b.length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a.data[i]&lt;=b.data[j])</span><br><span class="line">                c.data[k++] = a.data[i++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                c.data[k++] = b.data[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;a.length)</span><br><span class="line">            c.data[k++] = a.data[i++];</span><br><span class="line">        <span class="keyword">while</span>(j&lt;b.length)</span><br><span class="line">            c.data[k++] = b.data[j++];</span><br><span class="line">        c.length=k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8方法和上面第二题一样，先反转所有元素，再分别把属于b和a的反转过来即可</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eight</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> arr_size)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;=r||r&gt;arr_size) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;mid;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> tmp = a[l+i];</span><br><span class="line">            a[l+i] = a[r-i];</span><br><span class="line">            a[r-i]  = tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反转实现</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eight_reverse</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> m,<span class="type">int</span> n,<span class="type">int</span> arr_size)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">eight</span>(a,<span class="number">0</span>,m+n<span class="number">-1</span>,arr_size);</span><br><span class="line">        <span class="built_in">eight</span>(a,<span class="number">0</span>,n<span class="number">-1</span>,arr_size);</span><br><span class="line">        <span class="built_in">eight</span>(a,n,m+n<span class="number">-1</span>,arr_size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//9,原理参考二分法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">nine</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> n;<span class="comment">//n表示共有n个元素</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>,r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid] == x) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[mid]&lt;x) l = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r =mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[mid] ==x&amp;&amp;mid!=n<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = a[mid];</span><br><span class="line">            a[mid] = a[mid+<span class="number">1</span>];</span><br><span class="line">            a[mid+<span class="number">1</span>] = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i =n<span class="number">-1</span>;i&gt;r;i--) </span><br><span class="line">            &#123;</span><br><span class="line">                a[i+<span class="number">1</span>] =a[i];</span><br><span class="line">                a[i+<span class="number">1</span>] =x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//真题部分看书即可，思路不固定，只要能解答出来都能拿个较高分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//3.2题解不懂可以看看</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_x</span><span class="params">(<span class="type">int</span> data[<span class="number">8</span>],<span class="type">int</span> x,<span class="type">int</span> length)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> k =<span class="number">0</span>,i =<span class="number">0</span>,cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i]==x) </span><br><span class="line">            &#123;</span><br><span class="line">                k++;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;cnt&lt;&lt;<span class="string">&quot;:&quot;</span>;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;k=&quot;</span>&lt;&lt;k;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;i=&quot;</span>&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;当前数组：&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;length;i++) cout&lt;&lt;data[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                cout&lt;&lt;endl;</span><br><span class="line">                data[i-k] = data[i];</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">            i++;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        length = length-k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;length;i++) cout&lt;&lt;data[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;length&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>单链表可以想象成铁链，一环扣一环,下面是代码实现<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">listnode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    listnode *next;</span><br><span class="line">&#125;lnode,*linklist;<span class="comment">//lnode 表示结点，linklist表示链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//头插法创建链表</span></span><br><span class="line"><span class="function">linklist <span class="title">list_head_insert</span><span class="params">(linklist&amp; head)</span> <span class="comment">//常规头插法构建链表顺序与输入顺序相反</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;使用头插法构建数组&quot;</span>&lt;&lt;endl;</span><br><span class="line">    lnode* s;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">    head = <span class="keyword">new</span> lnode;</span><br><span class="line">    head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入链表的第&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;个值：&quot;</span>;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        n++;</span><br><span class="line"></span><br><span class="line">        s =<span class="keyword">new</span> lnode;</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        s-&gt;next = head-&gt;next; <span class="comment">//新节点下一个指向原本的开端使其成为新的开端</span></span><br><span class="line">        head-&gt;next = s; <span class="comment">//头节点再指向新节点完成添加</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入链表的第&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;个值：&quot;</span>;</span><br><span class="line">        cin&gt;&gt;x;   <span class="comment">//保持循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插法构建链表</span></span><br><span class="line"><span class="function">linklist <span class="title">list_tail_insert</span><span class="params">(linklist &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;使用尾插法构建数组&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> x,n =<span class="number">1</span>;</span><br><span class="line">    a = <span class="keyword">new</span> lnode;</span><br><span class="line">    lnode *s,*r = a;<span class="comment">//r是尾指针方便插入</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入链表的第&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;个值：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        n++;</span><br><span class="line">        s = <span class="keyword">new</span> lnode;</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        r-&gt;next =s;</span><br><span class="line">        r = s;<span class="comment">//r指向新表尾节点</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;请输入链表的第&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;个值：&quot;</span>;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_list</span><span class="params">(linklist cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!cur-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;链表为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;当前链表为:&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur-&gt;next) </span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;cur-&gt;next-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按序号查找节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getelem_byid</span><span class="params">(linklist a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入要查找的序号:&quot;</span>;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;错误&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> j =<span class="number">1</span>;</span><br><span class="line">    lnode *p = a-&gt;next;</span><br><span class="line">    cout&lt;&lt;j&lt;&lt;<span class="string">&quot;号元素:&quot;</span>&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;j&lt;x)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;找到了&quot;</span>&lt;&lt;j&lt;&lt;<span class="string">&quot;号元素:&quot;</span>&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按值查找元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getelem_byval</span><span class="params">(linklist l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入要查找的值:&quot;</span>;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="type">int</span> cnt =<span class="number">0</span>;</span><br><span class="line">    lnode *p=l-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data==x)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;第&quot;</span>&lt;&lt;cnt&lt;&lt;<span class="string">&quot;号元素&quot;</span>&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(linklist &amp;l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入插入位置:&quot;</span>;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">1</span>)<span class="comment">//查询值的操作可以封装但是为了方便有很多输出的语句，避免太乱就再写一次</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;error&quot;</span>; </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lnode* p = l-&gt;next;</span><br><span class="line">    <span class="type">int</span> cnt =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;x) <span class="comment">//查找插入位置，由于是往后插入所以插在第i个位置要找到第i-1个节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    lnode* s= <span class="keyword">new</span> lnode;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;插入的值：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;s-&gt;data;</span><br><span class="line">    s-&gt;next = p-&gt;next;<span class="comment">//插入的关键，画图好理解，不能先让p下一个指向s否则会让原本p后的数据丢失</span></span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="built_in">print_list</span>(l);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_node</span><span class="params">(linklist &amp;l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入删除位置:&quot;</span>;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;error&quot;</span>; </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lnode* p = l-&gt;next;</span><br><span class="line">    <span class="type">int</span> cnt =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;x) </span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    lnode* q = p-&gt;next; <span class="comment">//找到要删除的节点q</span></span><br><span class="line">    p-&gt;next = q-&gt;next;  <span class="comment">//让q的前驱节点直接指向q的下一个节点完成删除</span></span><br><span class="line">    <span class="built_in">delete</span>(q);<span class="comment">//别忘了释放q</span></span><br><span class="line">    <span class="built_in">print_list</span>(l);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求表长</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">list_len</span><span class="params">(linklist l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        l = l-&gt;next;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;表长：&quot;</span>&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linklist a;</span><br><span class="line">    a =<span class="built_in">list_head_insert</span>(a);</span><br><span class="line">    <span class="built_in">print_list</span>(a);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;a-&gt;data&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//getelem_byval(a);</span></span><br><span class="line">    <span class="comment">//insert(a);</span></span><br><span class="line">    <span class="comment">//delete_node(a);</span></span><br><span class="line">    <span class="built_in">list_len</span>(a);</span><br><span class="line">    <span class="built_in">delete</span>(a);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><p>这里就直接用csdn上一位大神的了，具体和单链表比较就只有插入和删除需要注意。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Author : panxiaolan</span></span><br><span class="line"><span class="comment">  Time : 2021-10-12</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  双链表的基本操作(带头节点): 每个节点由三部分组成,只需处理好当前节点与邻接节点的关系即可。</span></span><br><span class="line"><span class="comment">  (1)、双链表的定义</span></span><br><span class="line"><span class="comment">  (2)、双链表的初始化</span></span><br><span class="line"><span class="comment">  (3)、双链表的建立:</span></span><br><span class="line"><span class="comment">    a、头插法建立</span></span><br><span class="line"><span class="comment">    b、尾插法建立 </span></span><br><span class="line"><span class="comment">  (4)、双链表的插入:</span></span><br><span class="line"><span class="comment">    a、后插</span></span><br><span class="line"><span class="comment">    b、前插</span></span><br><span class="line"><span class="comment">    c、指定位置插入 </span></span><br><span class="line"><span class="comment">  (5)、双链表删除:</span></span><br><span class="line"><span class="comment">    a、按位序删</span></span><br><span class="line"><span class="comment">    b、前删</span></span><br><span class="line"><span class="comment">    c、后删 </span></span><br><span class="line"><span class="comment">  (6)、双链表查找:</span></span><br><span class="line"><span class="comment">    a、按位查找</span></span><br><span class="line"><span class="comment">    b、按值查找 </span></span><br><span class="line"><span class="comment">  (7)、双链表长度 </span></span><br><span class="line"><span class="comment">  (8)、双链表输出 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DNode</span> &#123;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">DNode</span> *prior,*next;</span><br><span class="line">&#125; DNode,*DListLink;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双链表的初始化(带头节点)</span></span><br><span class="line"><span class="function">DListLink <span class="title">initDListLink</span><span class="params">(DListLink &amp;L)</span> </span>&#123;</span><br><span class="line">  L = (DNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  L-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断双链表是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(DListLink &amp;L)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位查找 : 返回第 i 个节点</span></span><br><span class="line"><span class="function">DNode* <span class="title">getElem</span><span class="params">(DListLink &amp;L,<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">  DNode *p;</span><br><span class="line">  p = L;</span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span> &amp;&amp; j &lt; i) &#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j ++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按值查找 : 返回数据域是 e 的节点</span></span><br><span class="line"><span class="function">DNode* <span class="title">locateElem</span><span class="params">(DListLink &amp;L,<span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">  DNode *p;</span><br><span class="line">  p = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(p &amp;&amp; p-&gt;data != e) &#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后插 : 在 p 节点后插入节点 s</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insertNextNode</span><span class="params">(DNode *p,DNode *s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!p || !s) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next-&gt;prior = s;</span><br><span class="line">  s-&gt;prior = p;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后插 : 在 p 节点后插入值是 e 的节点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insertNextNodeE</span><span class="params">(DNode *p,<span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">  DNode *s;</span><br><span class="line">  s = (DNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  s-&gt;prior = p;</span><br><span class="line">  <span class="comment">//p-&gt;next-&gt;prior = s;</span></span><br><span class="line">  p-&gt;next = s;</span><br><span class="line"><span class="comment">//   insertNextNode(p,s);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前插 : 在 p 节点前插入节点 s</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insertPriorNode</span><span class="params">(DNode *p,DNode *s)</span> </span>&#123;</span><br><span class="line">  DNode *q = p-&gt;prior;</span><br><span class="line">  <span class="built_in">insertNextNode</span>(q,s);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位插入 : 在第 i 个位置插入值 e 的节点(位序)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insertDListLink</span><span class="params">(DListLink &amp;L,<span class="type">int</span> i,<span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">  DNode *p;</span><br><span class="line">  p = <span class="built_in">getElem</span>(L,i - <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">insertNextNodeE</span>(p,e);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 : 删除 p 节点的后继节点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deleteNextNode</span><span class="params">(DNode *p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  DNode *q = p-&gt;next;</span><br><span class="line"></span><br><span class="line">  q-&gt;next-&gt;prior = p;</span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 : 指定节点 s</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deleteNode</span><span class="params">(DNode *s)</span> </span>&#123;</span><br><span class="line">  DNode *p;</span><br><span class="line">  p = s-&gt;prior;</span><br><span class="line">  p-&gt;next = s-&gt;next;</span><br><span class="line">  s-&gt;next-&gt;prior = p;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 : 删除位序 i 的节点, e 是 i 节点的值</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deletePositionNode</span><span class="params">(DListLink &amp;L,<span class="type">int</span> i,<span class="type">int</span> &amp;e )</span> </span>&#123;</span><br><span class="line">  DNode *p = <span class="built_in">getElem</span>(L,i);</span><br><span class="line">  e = p-&gt;data;</span><br><span class="line">  <span class="built_in">deleteNode</span>(p);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁双链表</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">destroyDListLink</span><span class="params">(DListLink &amp;L)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(L-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">deleteNextNode</span>(L);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(L);</span><br><span class="line">  L= <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾插法建立双链表:</span></span><br><span class="line"><span class="function">DListLink <span class="title">tailCreateDListLink</span><span class="params">(DListLink &amp;L)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">initDListLink</span>(L);</span><br><span class="line">  DNode *s,*r = L;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x) != EOF) &#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    s = (DNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">    <span class="built_in">insertNextNodeE</span>(r,x);</span><br><span class="line">    r = r-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头插法建立双链表</span></span><br><span class="line"><span class="function">DListLink <span class="title">headCreateDListLink</span><span class="params">(DListLink &amp;L)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">initDListLink</span>(L);</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x) != EOF) &#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">insertNextNodeE</span>(L,x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双链表的长度:</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">(DListLink &amp;L)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">  DNode *p = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(p) &#123;</span><br><span class="line">    len ++;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双链表的输出:</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(DListLink &amp;L)</span> </span>&#123;</span><br><span class="line">  DNode *p = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(p) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  DListLink L;</span><br><span class="line">  <span class="comment">// 头插法建立双链表</span></span><br><span class="line"><span class="comment">//  headCreateDListLink(L);</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------尾插法建立单链表---------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">tailCreateDListLink</span>(L);</span><br><span class="line">  <span class="built_in">print</span>(L);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------判断双链表是否为空---------------\n&quot;</span>);</span><br><span class="line">  <span class="type">int</span> Empty = <span class="built_in">isEmpty</span>(L);</span><br><span class="line">  <span class="keyword">if</span>(Empty) <span class="built_in">printf</span>(<span class="string">&quot;链表是空!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;链表非空!\n&quot;</span>) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------按位查找 : 返回第 3 个节点---------------\n&quot;</span>);</span><br><span class="line">  DNode *p = <span class="built_in">getElem</span>(L,<span class="number">3</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;第 i 个节点值是 %d \n&quot;</span>,p-&gt;data);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------按值查找 : 返回数据域是 5 的节点---------------\n&quot;</span>);</span><br><span class="line">  DNode *q = <span class="built_in">locateElem</span>(L,<span class="number">5</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,q-&gt;data);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------后插 : 在 3 节点后插入节点 s---------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(L);</span><br><span class="line">  DNode *s;</span><br><span class="line">  s = (DNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">  s-&gt;data = <span class="number">999999</span>;</span><br><span class="line">  <span class="comment">// p 是第 3 个节点 </span></span><br><span class="line">  <span class="built_in">insertNextNode</span>(p,s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------后插 : 在 p 节点后插入节点 s 双链表:---------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(L);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------后插 : 在 p 节点后插入值是 e 的节点---------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(L);</span><br><span class="line">  <span class="built_in">insertNextNodeE</span>(p,<span class="number">111111111</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------后插 : 在 p 节点后插入值是 e 的节点 双链表:---------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(L);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------前插 : 在 p 节点前插入节点 s---------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(L);</span><br><span class="line">  DNode *before;</span><br><span class="line">  before = (DNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">  before-&gt;data = <span class="number">2222222</span>;</span><br><span class="line">  <span class="built_in">insertPriorNode</span>(p,before);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------前插 : 在 p 节点前插入节点 s 双链表:---------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(L);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------按位插入 : 在第 i 个位置插入值 e 的节点(位序)---------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(L);</span><br><span class="line">  <span class="built_in">insertDListLink</span>(L,<span class="number">3</span>,<span class="number">333333</span>) ;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------按位插入 : 在第 i 个位置插入值 e 的节点(位序) 双链表:---------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(L);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------删除 : 删除 p 节点的后继节点---------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(L);</span><br><span class="line">  <span class="built_in">deleteNextNode</span>(p) ;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------删除 : 删除 p 节点的后继节点 双链表:---------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(L);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------删除 : 指定节点 s---------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(L);</span><br><span class="line">  DNode *d = <span class="built_in">getElem</span>(L,<span class="number">5</span>);</span><br><span class="line">  <span class="built_in">deleteNode</span>(d);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------删除 : 指定节点 s 双链表:---------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(L);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------删除 : 删除位序 i 的节点, e 是 i 节点的值--------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(L);</span><br><span class="line">  <span class="type">int</span> e;</span><br><span class="line">  <span class="built_in">deletePositionNode</span>(L,<span class="number">4</span>,e) ;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;删除节点的值是 %d\n&quot;</span>,e);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------删除 : 删除位序 i 的节点, e 是 i 节点的值 双链表:--------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(L);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;------------销毁双链表---------------\n&quot;</span>);</span><br><span class="line">  <span class="built_in">destroyDListLink</span>(L);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>链表习题实现<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">exercises</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//1，简单递归</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">one</span><span class="params">(linklist &amp;l,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lnode* p;</span><br><span class="line">        <span class="keyword">if</span>(l==<span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(l-&gt;data==x)</span><br><span class="line">        &#123;</span><br><span class="line">            p =l;</span><br><span class="line">            l=l-&gt;next;</span><br><span class="line">            <span class="built_in">delete</span>(p);</span><br><span class="line">            <span class="built_in">one</span>(l,x);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="built_in">one</span>(l-&gt;next,x);<span class="comment">//l-》data不是x的情况</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2循环删除值直至末尾</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">two</span><span class="params">(linklist&amp; l,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lnode* p,*pre = l,*q;<span class="comment">//pre是p的前驱节点</span></span><br><span class="line">        p=l-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data==x)</span><br><span class="line">            &#123;</span><br><span class="line">                q = p;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">                pre-&gt;next =p;<span class="comment">//此时前驱节点是q的前驱节点，直接指向p删除来q</span></span><br><span class="line">                <span class="keyword">delete</span> q;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pre = p;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3，方法很多，遍历链表用容器如栈等储存在输出即可，也可以反转链表再来输出，王道上使用了递归</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">three</span><span class="params">(linklist l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l-&gt;next)</span><br><span class="line">        <span class="built_in">three</span>(l-&gt;next);<span class="comment">//递归会先执行这里，直至不符合条件再从内向外输出，就像无限套娃一样直到最后一层再一次返回输出每一层结果</span></span><br><span class="line">        <span class="keyword">if</span>(l)</span><br><span class="line">        cout&lt;&lt;l-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">three_ignore_head</span><span class="params">(linklist l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l-&gt;next) <span class="built_in">three</span>(l-&gt;next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4，用节点记录最小值的前驱节点，遍历链表找到后删除</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">four</span><span class="params">(linklist &amp;l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lnode *pre=l,*p =pre-&gt;next;</span><br><span class="line">        lnode *min_pre =pre,*minp = p;<span class="comment">//存储最小前驱和节点</span></span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data&lt;minp-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                minp = p;</span><br><span class="line">                min_pre = pre;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = p;<span class="comment">//不断更新</span></span><br><span class="line">            p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        min_pre-&gt;next = minp-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> minp;<span class="comment">//完成节点删除</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5法一是将头节点摘下再将原本的节点依次尾插头节点后</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">five_1</span><span class="params">(linklist&amp; l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lnode *p,*r;</span><br><span class="line">        p = l-&gt;next;</span><br><span class="line">        l-&gt;next = <span class="literal">nullptr</span>;<span class="comment">//摘下头节点</span></span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            r = p-&gt;next;<span class="comment">//取到插入节点</span></span><br><span class="line">            p-&gt;next = l-&gt;next;<span class="comment">//将节点插入头节点后</span></span><br><span class="line">            l-&gt;next = p;<span class="comment">//完成插入连接</span></span><br><span class="line">            p =r;<span class="comment">//更新下一个节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//法2，记录前驱节点，让p指向前驱节点同时让r = p-&gt;next 记录下一个处理的节点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">five_2</span><span class="params">(linklist&amp; l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lnode* pre,*p = l-&gt;next,*r = p-&gt;next;</span><br><span class="line">        p = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(r)</span><br><span class="line">        &#123;</span><br><span class="line">            pre = p;</span><br><span class="line">            p  =r;</span><br><span class="line">            r  =r-&gt;next;</span><br><span class="line">            p-&gt;next = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        l-&gt;next = p;<span class="comment">//处理最后一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6 贪心，对每次节点选择插入位置</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">six</span><span class="params">(linklist &amp;l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lnode *p = l-&gt;next,*pre;</span><br><span class="line">        lnode *r = p-&gt;next; <span class="comment">//保证不断链</span></span><br><span class="line">        p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        p = r;</span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            r = p-&gt;next;</span><br><span class="line">            pre = l;</span><br><span class="line">            <span class="keyword">while</span>(pre-&gt;next&amp;&amp;pre-&gt;next-&gt;data&lt;p-&gt;data)</span><br><span class="line">                pre = pre-&gt;next;<span class="comment">//遍历查找需要插入*p的前驱节点</span></span><br><span class="line">            p-&gt;next = pre-&gt;next;</span><br><span class="line">            pre-&gt;next = p;</span><br><span class="line">            p =r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7 类似删除特定接节点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">seven</span><span class="params">(linklist&amp; l,<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lnode *p = l,*r = l-&gt;next; <span class="comment">//p是前驱节点，r是处理节点</span></span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(r-&gt;data&gt;=a&amp;&amp;r-&gt;data&lt;=b)</span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;next = r-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> r;</span><br><span class="line">                r = p-&gt;next;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                p = r;</span><br><span class="line">                r = r-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8可以暴力，王道上用数学思想，计算两条链表长度只差，再让较长的一段链表遍历先走长度之差次，然后一起遍历如果末尾相同则表明有共同域。</span></span><br><span class="line">    <span class="comment">//共同域是指只要某一节点相同则后所有节点都相同。</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">(linklist&amp;a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(a)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            a = a-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">eight</span><span class="params">(linklist&amp;a,linklist&amp;b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> dist;</span><br><span class="line">        <span class="type">int</span> len1 = <span class="built_in">length</span>(a),len2 =<span class="built_in">length</span>(b);<span class="comment">//计算长度</span></span><br><span class="line">        linklist long_list,short_list;</span><br><span class="line">        <span class="keyword">if</span>(len1&gt;len2)</span><br><span class="line">        &#123;</span><br><span class="line">            long_list = a-&gt;next,short_list = b-&gt;next;</span><br><span class="line">            dist = len1-len2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            long_list = b-&gt;next,short_list = a-&gt;next;</span><br><span class="line">            dist = len2-len1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(dist--)</span><br><span class="line">        &#123;</span><br><span class="line">            long_list = long_list-&gt;next;<span class="comment">//让长的遍历到剩余结点和短的一样</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(long_list)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(long_list==short_list)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    long_list = long_list-&gt;next;</span><br><span class="line">                    short_list = short_list-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//9，直接暴力</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">nine</span><span class="params">(linklist&amp;l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            lnode *pre = l;</span><br><span class="line">            lnode *p = pre-&gt;next;</span><br><span class="line">            lnode *u;<span class="comment">//记录要删除的节点</span></span><br><span class="line">            <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;next-&gt;data&lt;pre-&gt;next-&gt;data)</span><br><span class="line">                    pre = p;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;pre-&gt;next-&gt;data;</span><br><span class="line">            u = pre-&gt;next;</span><br><span class="line">            pre-&gt;next = u-&gt;next; <span class="comment">//删除节点</span></span><br><span class="line">            <span class="keyword">delete</span> u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> l;<span class="comment">//释放头节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//10，以前力扣上好像做过原题，双指针</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ten</span><span class="params">(linklist &amp;a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> i =<span class="number">0</span>;</span><br><span class="line">        linklist b = <span class="keyword">new</span> lnode;</span><br><span class="line">        b-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        lnode* ra = a,*rb = b ,*p;<span class="comment">//p是工作指针</span></span><br><span class="line">        p = a-&gt;next;</span><br><span class="line">        a-&gt;next = <span class="literal">nullptr</span>; <span class="comment">//清空a表</span></span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                rb-&gt;next = p;</span><br><span class="line">                rb = p;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ra-&gt;next = p;</span><br><span class="line">                ra = p;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ra-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        rb-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//11，可以用10题的思想，区别就是对b用头插法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eleven</span><span class="params">(linklist&amp; a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        linklist b =<span class="keyword">new</span> lnode;</span><br><span class="line">        b-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        lnode *p = a-&gt;next,*q;</span><br><span class="line">        lnode* ra = a;</span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            ra-&gt;next = p;</span><br><span class="line">            ra = p;</span><br><span class="line">            <span class="keyword">if</span>(p)</span><br><span class="line">            &#123;</span><br><span class="line">                q = p-&gt;next;<span class="comment">//头插法会使p断链，因此使用q记录</span></span><br><span class="line">                p-&gt;next = b-&gt;next;</span><br><span class="line">                b-&gt;next = p;</span><br><span class="line">                p = q;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ra-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//12,有序表去重，思路就是下一个节点的值和当前节点相同就删除</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">twelve</span><span class="params">(linklist &amp;l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lnode *p =l-&gt;next,*q;</span><br><span class="line">        <span class="keyword">if</span>(!p) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            q = p-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data==q-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;next = q-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//13 将两条递增链表递减归并，用头插法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num13</span><span class="params">(linklist&amp;la,linklist&amp;lb)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lnode *r,*pa = la-&gt;next,*pb = lb-&gt;next;</span><br><span class="line">        la-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(pa&amp;&amp;pb)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pa-&gt;data&lt;=pb-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                r = pa-&gt;next; <span class="comment">//暂存插入的节点的后续，头插法会导致断链</span></span><br><span class="line">                pa-&gt;next = la-&gt;next;</span><br><span class="line">                la-&gt;next = pa;</span><br><span class="line">                pa =r;<span class="comment">//恢复</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                r = pb-&gt;next;</span><br><span class="line">                pb-&gt;next = la-&gt;next;</span><br><span class="line">                la-&gt;next = pb;</span><br><span class="line">                pb =r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pa)</span><br><span class="line">        pb = pa;<span class="comment">//剩下只有一条时，直接插入即可</span></span><br><span class="line">        <span class="keyword">while</span>(pb)</span><br><span class="line">        &#123;</span><br><span class="line">            r = pb-&gt;next;</span><br><span class="line">            pb-&gt;next = la-&gt;next;</span><br><span class="line">            la-&gt;next = pb;</span><br><span class="line">            pb =r;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> lb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//14还是类似双指针,较小指针往前移动</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num14</span><span class="params">(linklist&amp; a,linklist&amp;b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lnode *p=a-&gt;next,*q = b-&gt;next,*r,*s;</span><br><span class="line">        linklist c =<span class="keyword">new</span> lnode;</span><br><span class="line">        r = c;</span><br><span class="line">        <span class="keyword">while</span>(p&amp;&amp;q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data&lt;q-&gt;data)</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;data&gt;q-&gt;data)</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//等于的情况</span></span><br><span class="line">            &#123;</span><br><span class="line">                s = <span class="keyword">new</span> lnode;</span><br><span class="line">                s-&gt;data = p-&gt;data;</span><br><span class="line">                r-&gt;next = s;</span><br><span class="line">                r = s;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        r-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//15,思路类似上题，归并双指针</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num15</span><span class="params">(linklist &amp;la,linklist&amp;lb)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lnode* pa =la-&gt;next,*pb = lb-&gt;next;</span><br><span class="line">        lnode* u ,*pc = la;</span><br><span class="line">        <span class="keyword">while</span>(pa&amp;&amp;pb)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pa-&gt;data==pb-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                pc-&gt;next = pa;</span><br><span class="line">                pc = pa; <span class="comment">// 往后移动pc指向</span></span><br><span class="line">                pa = pa-&gt;next;</span><br><span class="line">                u = pb;</span><br><span class="line">                pb = pb-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> u;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(pa-&gt;data&lt;pb-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                u = pa;</span><br><span class="line">                pa = pa-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> u;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                u = pb;</span><br><span class="line">                pb = pb-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> pb;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(pa)</span><br><span class="line">            &#123;</span><br><span class="line">                u = pa;</span><br><span class="line">                pa = pa-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> u;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(pb)</span><br><span class="line">            &#123;</span><br><span class="line">                u = pb;</span><br><span class="line">                pb = pb-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> u;</span><br><span class="line">            &#125;</span><br><span class="line">            pc-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">delete</span> lb;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//16 找到 a中等于b1的元素开始判断，如果直至b末尾都相同则是子链</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">num16</span><span class="params">(linklist a,linklist b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lnode *p = a;</span><br><span class="line">        lnode *pre = p,*q = b;</span><br><span class="line">        <span class="keyword">while</span>(p&amp;&amp;q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data==q-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pre = pre-&gt;next;</span><br><span class="line">                p = pre; <span class="comment">//p是记录a中即将匹配的新节点</span></span><br><span class="line">                q = b; <span class="comment">//q从头开始</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!q)</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//17,双链表一个往前遍历一个往后遍历</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">num17</span><span class="params">(dlinklist l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dnode *p = l-&gt;next,*q = l-&gt;prior;</span><br><span class="line">        <span class="keyword">while</span>(p!=q&amp;&amp;q-&gt;next!=p)<span class="comment">//切记不能写成p-&gt;next !=q，这会导致匹配最后一个时出错</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data==q-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//18画图理解方便，先让第一个链表尾指针指与第二个链表头节点项链再使其循环</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num18</span><span class="params">(linklist &amp;h1,linklist &amp;h2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lnode *p,*q;</span><br><span class="line">        p = h1;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next!=h1)</span><br><span class="line">            p= p-&gt;next;<span class="comment">//找到尾节点</span></span><br><span class="line">        q = h2;</span><br><span class="line">        <span class="keyword">while</span>(q-&gt;next!=h2)</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">        p-&gt;next = h2;  <span class="comment">//第一个链表的尾巴连接到第二个头结点上</span></span><br><span class="line">        q-&gt;next = h1;   <span class="comment">//第二个链表尾巴连到第一个头上</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//19，暴力</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num19</span><span class="params">(linklist &amp;l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lnode *p,*pre,*minp,*minpre;</span><br><span class="line">        <span class="keyword">while</span>(l-&gt;next!=l)</span><br><span class="line">        &#123;</span><br><span class="line">            p = l-&gt;next;pre = l;</span><br><span class="line">            minp = p;minpre = pre;</span><br><span class="line">            <span class="keyword">while</span>(p!=l)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;data&lt;minp-&gt;data)</span><br><span class="line">                &#123;</span><br><span class="line">                    minp = p;</span><br><span class="line">                    minpre = pre;</span><br><span class="line">                &#125;</span><br><span class="line">                pre = p;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;minp-&gt;data;</span><br><span class="line">            minpre-&gt;next = minp-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> minp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> l;<span class="comment">//结束删除头节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//20 多加了个频度元素不好写，就不写了</span></span><br><span class="line">    <span class="comment">//21 力扣上好像写过，快慢指针,一个每次前进两步，一个每次前进一步。如果不含有环，跑得快的那个指针最终会遇到 null，说明链表不含环；如果含有环，快指针最终会超慢指针一圈，和慢指针相遇，说明链表含有环。</span></span><br><span class="line">    <span class="function">lnode* <span class="title">num21</span><span class="params">(linklist &amp;head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lnode *fast = head,*slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast&amp;&amp;fast-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;<span class="comment">//快的走两步</span></span><br><span class="line">            <span class="keyword">if</span>(slow==fast) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!fast||!fast-&gt;next) <span class="comment">//没有环的情况</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lnode *p1 =head,*p2 = slow;</span><br><span class="line">        <span class="keyword">while</span>(p1!=p2)</span><br><span class="line">        &#123;</span><br><span class="line">            p1 =p1-&gt;next;</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure></p><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="普通栈的简单实现"><a href="#普通栈的简单实现" class="headerlink" title="普通栈的简单实现"></a>普通栈的简单实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_size 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">stack</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data[max_size] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> top;<span class="comment">//顶部指针</span></span><br><span class="line">&#125;sqstack;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(sqstack &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s.top  =<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">output</span><span class="params">(sqstack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;当前栈为：&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(s.top&gt;=<span class="number">0</span>)</span><br><span class="line">    cout&lt;&lt;s.data[s.top--]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(sqstack &amp;s,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.top==max_size<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈满了&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s.data[++s.top]  =x; <span class="comment">//先加栈顶在加元素</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(sqstack &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.top==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈空，无元素输出&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;出栈:&quot;</span>&lt;&lt;s.data[s.top--]&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">output</span>(s);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断栈空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">empty</span><span class="params">(sqstack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.top==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈空&quot;</span>&lt;&lt;endl;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;非空&quot;</span>&lt;&lt;endl;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读取栈顶元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_top</span><span class="params">(sqstack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(s.top==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;栈空&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;栈顶元素&quot;</span>&lt;&lt;s.data[s.top];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_stack</span><span class="params">(sqstack &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s.top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//搭建栈</span></span><br><span class="line">    sqstack s;</span><br><span class="line">    <span class="built_in">init</span>(s);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;开始搭建栈,输入插入数量&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// int x;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;&quot;输入插入元素:&quot;;</span></span><br><span class="line">        <span class="comment">// cin&gt;&gt;x;</span></span><br><span class="line">        <span class="built_in">push</span>(s,cnt);</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">output</span>(s);</span><br><span class="line">    <span class="built_in">pop</span>(s);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">empty</span>(s);</span><br><span class="line">    <span class="built_in">get_top</span>(s);</span><br><span class="line">    <span class="built_in">delete_stack</span>(s);</span><br><span class="line">    <span class="built_in">output</span>(s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h3><p>和头插法的单链表差不多<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链栈的结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">linkstack</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">linkstack</span>* next;</span><br><span class="line">&#125;stacknode, * lstack;</span><br><span class="line"><span class="comment">//链栈功能实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">link_stack</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">output</span><span class="params">(lstack l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        stacknode* p = l;</span><br><span class="line">        <span class="keyword">if</span> (!p)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;链栈为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;  </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;链栈从顶往下为：&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(lstack  &amp;l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        l=<span class="literal">NULL</span>;<span class="comment">//不能为l = nullptr</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//链栈的入栈</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(lstack&amp; l)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">//在栈顶插入元素e,链栈不需要判断栈满</span></span><br><span class="line">        stacknode* p = <span class="keyword">new</span> stacknode; </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入要插入的值:&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x; </span><br><span class="line">        p-&gt;data = x;    </span><br><span class="line">        p-&gt;next = l;    </span><br><span class="line">        l = p;                </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构建链栈</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">create</span><span class="params">(lstack &amp;l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>(l);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入创建长度:&quot;</span>;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="built_in">push</span>(l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">output</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出栈元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">drop_top</span><span class="params">(lstack &amp;l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!l)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//直接删除就好了</span></span><br><span class="line">        stacknode *p;</span><br><span class="line">        p = l;</span><br><span class="line">        l = l-&gt;next;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;出栈，删除栈顶元素:&quot;</span>&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        <span class="built_in">output</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询栈顶元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">get_top</span><span class="params">(lstack l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!l)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前栈顶元素:&quot;</span>&lt;&lt;l-&gt;data&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exercises</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//1,不是算法题，画个图推一下就好了</span></span><br><span class="line">    <span class="comment">//2，也是模拟一下就可以了，第一个可以，第二个不行</span></span><br><span class="line">    <span class="comment">//3,写一个栈，如果出现栈空且还有操作数或无后续操作但栈不空就报错</span></span><br><span class="line">    <span class="comment">//官方答案上是直接判断数组，若出栈数大于入栈数则报错，结束后在判断入栈和出栈的次数是否相同</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">num3</span><span class="params">(<span class="type">char</span> op[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> i =<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>,k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(op[i]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (op[i])</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span> : j++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;O&#x27;</span> : k++;</span><br><span class="line">                <span class="keyword">if</span>(k&gt;j)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;非法&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j!=k)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;非法&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;合法&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">           </span><br><span class="line">    &#125;</span><br><span class="line">         <span class="comment">//4,判断对称用双指针也可以，用栈,数组也可以，就是从前一半进栈，再出栈看是否和后一半一样</span></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">num4</span><span class="params">(lstack l,<span class="type">int</span> n)</span><span class="comment">//n是长度</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">int</span> i;</span><br><span class="line">            <span class="type">char</span> s[n/<span class="number">2</span>];</span><br><span class="line">            stacknode *p = l-&gt;next;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                s[i] = p-&gt;data;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">                p=p-&gt;next;</span><br><span class="line">            <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;s[i]=p-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                i--;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5</span></span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">struct</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> stack[max_size];</span><br><span class="line">            <span class="type">int</span> top[<span class="number">2</span>];<span class="comment">//两个栈顶指针</span></span><br><span class="line">        &#125;stk;</span><br><span class="line">        stk s;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> x)</span><span class="comment">//i是左右栈标志，0是左边，1是右边</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;输入错误&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s.top[<span class="number">1</span>]-s.top[<span class="number">0</span>]==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;栈满&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//书上用的是switch，麻烦了</span></span><br><span class="line">            <span class="keyword">if</span>(i)</span><br><span class="line">            &#123;</span><br><span class="line">                s.stack[--s.top[<span class="number">1</span>]] =x;</span><br><span class="line">                </span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                s.stack[++s.top[<span class="number">0</span>]] = x;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;插入成功&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//退栈操作</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;输入错误&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s.top[<span class="number">0</span>]==<span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;栈空，退无可退&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    s.stack[s.top[<span class="number">0</span>]--];</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;退栈成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s.top[<span class="number">0</span>]==max_size)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;栈空，退无可退&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    s.stack[s.top[<span class="number">1</span>]++];</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;退栈成功&quot;</span>&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>循环队列<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//队列结构</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> max_size = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> data[max_size];</span><br><span class="line">    <span class="type">int</span> front,rear;<span class="comment">//头指针和尾指针</span></span><br><span class="line">    <span class="type">int</span> length;<span class="comment">//长度，不一定会用</span></span><br><span class="line">&#125;queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(queue &amp;q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q.front = <span class="number">0</span>,q.rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断队空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> (q.front==q.rear);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印队列</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_queue</span><span class="params">(queue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">empty</span>(q))</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队列为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;队列元素：&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.rear-q.front&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;      </span><br><span class="line">        cout&lt;&lt;q.data[q.front]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        q.front++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(queue &amp;q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((q.rear+<span class="number">1</span>)%max_size == q.front)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队满&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入要插入的元素：&quot;</span>;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    q.data[q.rear] = x;</span><br><span class="line">    q.rear = (q.rear+<span class="number">1</span>)%max_size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(queue &amp;q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">empty</span>(q))</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;队列为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;删除队头元素:&quot;</span>&lt;&lt;q.data[q.front]&lt;&lt;endl;</span><br><span class="line">    q.front = (q.front+<span class="number">1</span>)%max_size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    queue q;</span><br><span class="line">    <span class="built_in">init</span>(q);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入要创建的数量&quot;</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">push</span>(q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print_queue</span>(q);</span><br><span class="line">    <span class="built_in">pop</span>(q);</span><br><span class="line">    <span class="built_in">print_queue</span>(q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>链队实现<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链队</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">linkqueue</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">linkqueue</span> *next;</span><br><span class="line">&#125;qnode;</span><br><span class="line"><span class="comment">//存放指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    linkqueue *front,*rear;</span><br><span class="line">&#125;*lqueue;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lq</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(lqueue &amp;a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a-&gt;front = a-&gt;rear = <span class="keyword">new</span> linkqueue;</span><br><span class="line">        a-&gt;front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断空</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">(lqueue a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a-&gt;front==<span class="literal">NULL</span>&amp;&amp;a-&gt;rear==<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印节点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print_queue</span><span class="params">(lqueue a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">empty</span>(a))</span><br><span class="line">        &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;链队为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        qnode *p = a-&gt;front-&gt;next;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;链队为:&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(lqueue &amp;a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        qnode *p = <span class="keyword">new</span> linkqueue;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入入队的值:&quot;</span>;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        p-&gt;data = x;</span><br><span class="line">        p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        a-&gt;rear-&gt;next = p;</span><br><span class="line">        a-&gt;rear = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(lqueue &amp;a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">empty</span>(a))</span><br><span class="line">        &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;链队为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        qnode *p = a-&gt;front-&gt;next;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;删除队头：&quot;</span>&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">        a-&gt;front-&gt;next = p-&gt;next;<span class="comment">//像链表一样删除</span></span><br><span class="line">        <span class="comment">//注意删除是尾节点的时候</span></span><br><span class="line">        <span class="keyword">if</span>(a-&gt;rear == p)</span><br><span class="line">            a-&gt;rear = a-&gt;front;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空队列释放空间</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">delete_q</span><span class="params">(lqueue &amp;a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(a-&gt;front)</span><br><span class="line">        &#123;</span><br><span class="line">            a-&gt;rear = a-&gt;front;</span><br><span class="line">            <span class="keyword">delete</span> a-&gt;front;</span><br><span class="line">            a-&gt;front = a-&gt;rear;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="队列课后习题"><a href="#队列课后习题" class="headerlink" title="队列课后习题"></a>队列课后习题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">exercise</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_1</span><span class="params">(queue &amp;a,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.front==a.rear&amp;&amp;a.tag==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//队满的情况</span></span><br><span class="line">        a.data[a.rear] = x;</span><br><span class="line">        a.rear = (a.rear+<span class="number">1</span>)%max_size;</span><br><span class="line">        a.tag  =<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop_1</span><span class="params">(queue &amp;q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(q.front==q.rear&amp;&amp;q.tag==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//两个条件都满足时为队空的情况</span></span><br><span class="line">        <span class="type">int</span> x = q.data[q.front];</span><br><span class="line">        q.front = (q.front+<span class="number">1</span>)%max_size;</span><br><span class="line">        q.tag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 挺简单的，出队入栈，出栈入队</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3用栈两个模拟队列，参考力扣https://leetcode.cn/problems/implement-queue-using-stacks/</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h2><p>中缀转后缀计算机运算思想:</p><p>从左到右开始扫描中缀表达式<br>遇到数字， 直接输出<br>遇到运算符<br>a.若为“(” 直接入栈<br>b.若为“)” 将符号栈中的元素依次出栈并输出, 直到 “(“, “(“只出栈, 不输出<br>c.若为其他符号, 将符号栈中的元素依次出栈并输出, 直到遇到比当前符号优先级更低的符号或者”(“。 将当前符号入栈。<br>扫描完后, 将栈中剩余符号依次输出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//中缀表达式转后缀</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prio</span><span class="params">(<span class="type">char</span> op)</span>                   <span class="comment">//给运算符优先级排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> priority;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="string">&#x27;*&#x27;</span> || op == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        priority = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="string">&#x27;+&#x27;</span> || op == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        priority = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        priority = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> priority;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Trans</span><span class="params">(string &amp;str,string &amp;str1)</span>     <span class="comment">//引用传递</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; s;                   <span class="comment">//定义一个char类型的栈s</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;str.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;9&#x27;</span>||str[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;z&#x27;</span>)      <span class="comment">//如果是数字，直接入栈</span></span><br><span class="line">        &#123;</span><br><span class="line">            str1+=str[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>                          <span class="comment">//否则不是数字</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">empty</span>())            <span class="comment">//栈空则入站</span></span><br><span class="line">                s.<span class="built_in">push</span>(str[i]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;(&#x27;</span>)   <span class="comment">//左括号入栈</span></span><br><span class="line">                s.<span class="built_in">push</span>(str[i]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;)&#x27;</span>)    <span class="comment">//如果是右括号，只要栈顶不是左括号，就弹出并输出</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (s.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    str1+= s.<span class="built_in">top</span>();</span><br><span class="line">                    s.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                s.<span class="built_in">pop</span>();                 <span class="comment">//弹出左括号，但不输出</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="built_in">prio</span>(str[i]) &lt;= <span class="built_in">prio</span>(s.<span class="built_in">top</span>()))   <span class="comment">//栈顶优先级大于等于当前运算符，则输出</span></span><br><span class="line">                &#123;</span><br><span class="line">                    str1+= s.<span class="built_in">top</span>();</span><br><span class="line">                    s.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="keyword">if</span> (s.<span class="built_in">empty</span>())      <span class="comment">//栈为空，停止</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                s.<span class="built_in">push</span>(str[i]);   <span class="comment">//把当前运算符入栈</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>())        <span class="comment">//最后，如果栈不空，则弹出所有元素并输出</span></span><br><span class="line">    &#123;</span><br><span class="line">        str1+= s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>                  <span class="comment">//主程序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string infix;</span><br><span class="line">    string postfix;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入中缀表达式：&quot;</span> &lt;&lt; infix &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; infix;</span><br><span class="line">    <span class="built_in">Trans</span>(infix,postfix);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;后缀表达式为：&quot;</span> &lt;&lt; postfix &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>中缀转后缀的运算就和Acwing基础课的栈里差不多了.</p><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h2 id="串"><a href="#串" class="headerlink" title="串"></a>串</h2><p>串的具体实现不在考纲里，实现代码就抄其他大神的了<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定长字符串</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">staticString</span> &#123;</span><br><span class="line">    <span class="type">char</span> str[MAXSIZE + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//考研常考变长字符串</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">variableString</span> &#123;</span><br><span class="line">    <span class="type">char</span> *str;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//串赋值</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">variableStringAssign</span><span class="params">(variableString &amp;variableStr, <span class="type">char</span> *ch)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取串长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getLength</span><span class="params">(variableString variableString)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//串比较</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">stringCompare</span><span class="params">(variableString variableString1, variableString variableString2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//串拼接</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">concat</span><span class="params">(variableString &amp;result, variableString variableString1, variableString variableString2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取子串</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">subString</span><span class="params">(variableString &amp;result, variableString variableString1, <span class="type">int</span> from, <span class="type">int</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空串</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">clean</span><span class="params">(variableString &amp;variableString1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    variableString string1&#123;&#125;;</span><br><span class="line">    <span class="comment">//串赋值</span></span><br><span class="line">    <span class="type">char</span> ch[MAXSIZE] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">variableStringAssign</span>(string1, ch);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; string1.length; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; string1.str[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//串比较</span></span><br><span class="line">    variableString string2&#123;&#125;;</span><br><span class="line">    string2.str = ch;</span><br><span class="line">    string2.length = string1.length;</span><br><span class="line">    <span class="comment">//向string1中添加字符进行测试</span></span><br><span class="line"><span class="comment">//    string1.str[string1.length] = &#x27;a&#x27;;</span></span><br><span class="line"><span class="comment">//    string1.str[++string1.length] = &#x27;\0&#x27;;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stringCompare</span>(string1, string2) == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;string1 equals string2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">stringCompare</span>(string1, string2) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;string1 is bigger than string2&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;string1 is smaller than string2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//串拼接</span></span><br><span class="line">    variableString result1&#123;&#125;;</span><br><span class="line">    <span class="built_in">concat</span>(result1, string1, string2);</span><br><span class="line">    <span class="keyword">while</span> (*result1.str != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        cout &lt;&lt; *result1.str++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取子串</span></span><br><span class="line">    variableString result2&#123;&#125;;</span><br><span class="line">    <span class="built_in">subString</span>(result2, string1, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">while</span> (*result2.str != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        cout &lt;&lt; *result2.str++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">clean</span>(string1)) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;string1 have been emptied!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">variableStringAssign</span><span class="params">(variableString &amp;variableStr, <span class="type">char</span> *ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> variableStr.str;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *c = ch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*c != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        length++;</span><br><span class="line">        c++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">        variableStr.str = <span class="literal">nullptr</span>;</span><br><span class="line">        variableStr.length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        variableStr.str = <span class="keyword">new</span> <span class="type">char</span>[length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (variableStr.str == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c = ch;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= length; ++i, ++c) &#123;</span><br><span class="line">                variableStr.str[i] = *c;</span><br><span class="line">            &#125;</span><br><span class="line">            variableStr.length = length;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getLength</span><span class="params">(variableString variableString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> variableString.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">stringCompare</span><span class="params">(variableString variableString1, variableString variableString2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; variableString1.length &amp;&amp; i &lt; variableString2.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (variableString1.str[i] != variableString2.str[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> variableString1.str[i] - variableString2.str[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前边都一样，比较字符串的长度</span></span><br><span class="line">    <span class="keyword">return</span> variableString1.length - variableString2.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">concat</span><span class="params">(variableString &amp;result, variableString variableString1, variableString variableString2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> result.str;</span><br><span class="line">    result.str = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    result.str = <span class="keyword">new</span> <span class="type">char</span>[variableString1.length + variableString2.length + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (result.str == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;Your memory is not enough&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; variableString1.length) &#123;</span><br><span class="line">        result.str[i] = variableString1.str[i];</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= variableString2.length) &#123;</span><br><span class="line">        result.str[i + j] = variableString2.str[j];</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result.length = variableString1.length + variableString2.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">subString</span><span class="params">(variableString &amp;result, variableString variableString1, <span class="type">int</span> from, <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (from &lt; <span class="number">0</span> || from &gt; variableString1.length || length &lt; <span class="number">0</span> || length &gt; variableString1.length - from) &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;Your parameters is wrong, please check&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> result.str;</span><br><span class="line">    result.str = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">        result.str = <span class="literal">nullptr</span>;</span><br><span class="line">        result.length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.str = <span class="keyword">new</span> <span class="type">char</span>[length + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> i = from;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; from + length) &#123;</span><br><span class="line">            result.str[j++] = variableString1.str[i++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result.str[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        result.length = length;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">clean</span><span class="params">(variableString &amp;variableString1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> variableString1.str;</span><br><span class="line">    variableString1.str = <span class="literal">nullptr</span>;</span><br><span class="line">    variableString1.length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="串的模式匹配"><a href="#串的模式匹配" class="headerlink" title="串的模式匹配"></a>串的模式匹配</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="comment">//串的结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch[N];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">&#125;sstring;</span><br><span class="line"><span class="comment">//串的类写法</span></span><br><span class="line"><span class="comment">// class Str&#123;</span></span><br><span class="line"><span class="comment">//     public:</span></span><br><span class="line"><span class="comment">//         char *ch; </span></span><br><span class="line"><span class="comment">//         int length=0;</span></span><br><span class="line"><span class="comment">//         Str(char *c)&#123;</span></span><br><span class="line"><span class="comment">//             ch=c;</span></span><br><span class="line"><span class="comment">//             while(*c)&#123;</span></span><br><span class="line"><span class="comment">//                 ++length;</span></span><br><span class="line"><span class="comment">//                 ++c;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     int reassign(char* c)&#123;</span></span><br><span class="line"><span class="comment">//         if(ch)&#123;</span></span><br><span class="line"><span class="comment">//             ch=NULL;</span></span><br><span class="line"><span class="comment">//             length=0;</span></span><br><span class="line"><span class="comment">//             int len=0;</span></span><br><span class="line"><span class="comment">//             char *temp;</span></span><br><span class="line"><span class="comment">//             temp=c;</span></span><br><span class="line"><span class="comment">//             while(*temp)&#123;</span></span><br><span class="line"><span class="comment">//                 ++len;</span></span><br><span class="line"><span class="comment">//                 ++temp;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             if(len==0)&#123; // 新字符串为空串 </span></span><br><span class="line"><span class="comment">//                 ch=NULL;</span></span><br><span class="line"><span class="comment">//             &#125;else&#123;</span></span><br><span class="line"><span class="comment">//                 ch=c;</span></span><br><span class="line"><span class="comment">//                 length=len;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             return 1;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return 0;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">//打印串</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">output</span><span class="params">(sstring a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;a.len;i++)</span><br><span class="line">    cout&lt;&lt;a.ch[i];</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//朴素匹配法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">simple</span><span class="params">(sstring p,sstring s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;朴素匹配法-------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;匹配串:&quot;</span>;</span><br><span class="line">    <span class="built_in">output</span>(s);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;模式串:&quot;</span>;</span><br><span class="line">    <span class="built_in">output</span>(p);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>,j =<span class="number">0</span>,flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;=s.len-p.len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k = i;</span><br><span class="line">        <span class="keyword">for</span>(j =<span class="number">0</span>;j&lt;p.len;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.ch[k]==p.ch[j])</span><br><span class="line">            k++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==p.len)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;在第&quot;</span>&lt;&lt;k-p.len&lt;&lt;<span class="string">&quot;位匹配成功 &quot;</span>&lt;&lt;endl;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        j=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;匹配失败&quot;</span>;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//kmp</span></span><br><span class="line"><span class="type">int</span> nxt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kmp</span><span class="params">(sstring p,sstring s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;kmp匹配法-------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;匹配串:&quot;</span>;</span><br><span class="line">    <span class="built_in">output</span>(s);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;模式串:&quot;</span>;</span><br><span class="line">    <span class="built_in">output</span>(p);</span><br><span class="line">    <span class="type">int</span> i =<span class="number">1</span>,j=<span class="number">0</span>;</span><br><span class="line">    nxt[<span class="number">1</span>] =<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//求next数组</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;p.len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>||p.ch[i]==p.ch[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i,++j;</span><br><span class="line">            nxt[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> j = nxt[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k&lt;=p.len;k++)</span><br><span class="line">    cout&lt;&lt;nxt[k];</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;&quot;over&quot;&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//比较过程</span></span><br><span class="line">    i = <span class="number">1</span>,j =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=s.len&amp;&amp;j&lt;=p.len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>||s.ch[i]==p.ch[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i,++j;</span><br><span class="line">        &#125;<span class="keyword">else</span> j =nxt[j];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(j&gt;p.len<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;在第&quot;</span>&lt;&lt;i-j&lt;&lt;<span class="string">&quot;位匹配成功 &quot;</span>&lt;&lt;endl;</span><br><span class="line">            j = nxt[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//next优化</span></span><br><span class="line">    <span class="type">int</span> nextval[N];</span><br><span class="line">    i = <span class="number">1</span>,j =<span class="number">0</span>;</span><br><span class="line">    nextval[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;p.len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!j||p.ch[i]==p.ch[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i,++j;</span><br><span class="line">            <span class="keyword">if</span>(p.ch[i]!=p.ch[j]) nextval[i] = j;</span><br><span class="line">            <span class="keyword">else</span> nextval[i] = nextval[j];</span><br><span class="line">        &#125;<span class="keyword">else</span> j = nextval[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k&lt;=p.len;k++)</span><br><span class="line">    cout&lt;&lt;nextval[k];</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    sstring p,s;</span><br><span class="line">    string a = <span class="string">&quot;aaabaaaababaabcaba&quot;</span>;</span><br><span class="line">    string b = <span class="string">&quot;abaabcaba&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s.ch[i] = a[i];</span><br><span class="line">        p.ch[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    s.len = a.<span class="built_in">size</span>();</span><br><span class="line">    p.len = b.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//simple(p,s);</span></span><br><span class="line">    <span class="built_in">kmp</span>(p,s);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是王道上的kmp的nex数组的构建代码似乎有点小问题,还是建议像acwing上的一样从j的下一位匹配<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>,M = N*<span class="number">30</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">(<span class="type">const</span> string&amp; p,<span class="type">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> len = (<span class="type">int</span>)p.<span class="built_in">size</span>();</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(j &lt; len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">-1</span> || p[j] == p[k])</span><br><span class="line">        &#123;</span><br><span class="line">            ++j;</span><br><span class="line">            ++k;</span><br><span class="line">            next[j] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            k = next[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x =<span class="number">1</span>;x&lt;=len;x++)<span class="comment">//这里的next中的值是前后缀相同的数目，王道中的是相同数目+1即下一次对比的坐标</span></span><br><span class="line">    cout&lt;&lt;next[x];</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kmp</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">const</span> string&amp; pattern)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = (<span class="type">int</span>)s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> patternLen = (<span class="type">int</span>)pattern.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> next[patternLen] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">getNext</span>(pattern,next);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || s[i] == pattern[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(j == patternLen)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = i - patternLen;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s = <span class="string">&quot;abbbadabaabcabadba&quot;</span>;</span><br><span class="line">    string pattern = <span class="string">&quot;abaabcaba&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">kmp</span>(s,pattern) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></p><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>这章节内容很多啊，考的东西也多<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">bitnode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">bitnode</span> *l_child,*r_child;</span><br><span class="line">    </span><br><span class="line">&#125;*bitree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span><span class="comment">//用于记录非递归后序</span></span><br><span class="line">&#123;</span><br><span class="line">  bitree btnode;</span><br><span class="line">  <span class="type">bool</span> isfirst;<span class="comment">//提供后序非递归操作标记</span></span><br><span class="line">&#125;Node,*node;</span><br><span class="line"><span class="comment">//线索二叉树</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">threadnode</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">threadnode</span> *lchild,*rchild;</span><br><span class="line">  <span class="type">int</span> ltag,rtag;<span class="comment">//线索标记</span></span><br><span class="line">&#125;threadnode,*threadtree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通二叉树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bi_tree</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  bitree t;</span><br><span class="line">  <span class="comment">//二叉树的建立</span></span><br><span class="line">  <span class="comment">//思路就是用一个节点从头往下最后一个子树的位置(当且节点大于待插入节点就往左找，反之往右)，</span></span><br><span class="line">  <span class="comment">//找到插入位置后大于根节点的放在右边，小于根节点的放在左边</span></span><br><span class="line">  <span class="function"><span class="type">void</span>  <span class="title">creat_tree</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n,bitree &amp;root)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    bitnode *c,*pa=<span class="literal">NULL</span>,*p;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    root = <span class="keyword">new</span> bitnode;</span><br><span class="line">    root-&gt;data = a[<span class="number">0</span>];</span><br><span class="line">    root-&gt;l_child = root-&gt;r_child = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = <span class="keyword">new</span> bitnode;</span><br><span class="line">        p-&gt;l_child = p-&gt;r_child = <span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;data = a[i];</span><br><span class="line">        c = root;</span><br><span class="line">        <span class="keyword">while</span>(c)</span><br><span class="line">        &#123;</span><br><span class="line">            pa = c;</span><br><span class="line">            <span class="keyword">if</span>(c-&gt;data&lt;p-&gt;data)</span><br><span class="line">            c = c-&gt;r_child;<span class="comment">//如果根节点小于待插入节点就往右遍历</span></span><br><span class="line">            <span class="keyword">else</span> c = c-&gt;l_child;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pa-&gt;data&lt;p-&gt;data)</span><br><span class="line">        pa-&gt;r_child = p;<span class="comment">//右放</span></span><br><span class="line">        <span class="keyword">else</span> pa-&gt;l_child = p;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;二叉树建立完成&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//前序遍历</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">nlr</span><span class="params">(bitree root)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;root-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">nlr</span>(root-&gt;l_child);</span><br><span class="line">        <span class="built_in">nlr</span>(root-&gt;r_child);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//中序</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">lnr</span><span class="params">(bitree root)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">lnr</span>(root-&gt;l_child);</span><br><span class="line">        cout&lt;&lt;root-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">lnr</span>(root-&gt;r_child);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//后序</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">lrn</span><span class="params">(bitree root)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">lrn</span>(root-&gt;l_child);</span><br><span class="line">        <span class="built_in">lrn</span>(root-&gt;r_child);</span><br><span class="line">        cout&lt;&lt;root-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//层序遍历</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">ceng</span><span class="params">(bitree root)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">    queue&lt;bitree&gt; q;</span><br><span class="line">    bitree p = root;</span><br><span class="line">    q.<span class="built_in">push</span>(p);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">      p = q.<span class="built_in">front</span>();</span><br><span class="line">      cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">      q.<span class="built_in">pop</span>();</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;l_child) q.<span class="built_in">push</span>(p-&gt;l_child);</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;r_child) q.<span class="built_in">push</span>(p-&gt;r_child);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//非递归实现</span></span><br><span class="line">  <span class="comment">//非递归先序</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">nlr2</span><span class="params">(bitree root)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">    stack&lt;bitree&gt; s;</span><br><span class="line">    bitree p = root;</span><br><span class="line">    <span class="keyword">while</span>(p||!s.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(p)</span><br><span class="line">      &#123;</span><br><span class="line">        cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        s.<span class="built_in">push</span>(p);</span><br><span class="line">        p = p-&gt;l_child;</span><br><span class="line">      &#125;<span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        p = s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        p = p-&gt;r_child;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//中序非递归</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">lnr2</span><span class="params">(bitree root)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">    stack&lt;bitree&gt; s;<span class="comment">//懒得写栈了，直接用容器</span></span><br><span class="line">    bitree p = root;</span><br><span class="line">    <span class="keyword">while</span>(p||!s.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(p);</span><br><span class="line">            p = p-&gt;l_child;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = s.<span class="built_in">top</span>();</span><br><span class="line">            cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            p = p-&gt;r_child;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//非递归后序</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">lrn2</span><span class="params">(bitree root)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">    stack&lt;node&gt; s;</span><br><span class="line">    bitree p = root;</span><br><span class="line">    node tmp;</span><br><span class="line">    <span class="keyword">while</span>(p||!s.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span>(p)<span class="comment">//一定是while，非递归其他也可以用while，但是这里不能用if</span></span><br><span class="line">      &#123;</span><br><span class="line">        node btn = <span class="keyword">new</span> Node;</span><br><span class="line">        btn-&gt;btnode = p;</span><br><span class="line">        btn-&gt;isfirst = <span class="literal">true</span>;</span><br><span class="line">        s.<span class="built_in">push</span>(btn);</span><br><span class="line">        p = p-&gt;l_child;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(!s.<span class="built_in">empty</span>())</span><br><span class="line">      &#123;</span><br><span class="line">        tmp = s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(tmp-&gt;isfirst==<span class="literal">true</span>)<span class="comment">//第一次出现在栈顶</span></span><br><span class="line">        &#123;</span><br><span class="line">          tmp-&gt;isfirst = <span class="literal">false</span>;</span><br><span class="line">          s.<span class="built_in">push</span>(tmp);</span><br><span class="line">          p = tmp-&gt;btnode-&gt;r_child;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          cout&lt;&lt;tmp-&gt;btnode-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">          p = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//实现操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[<span class="number">8</span>] = &#123; <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    <span class="built_in">creat_tree</span>(a,<span class="number">8</span>,t);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;前序遍历：&quot;</span>;</span><br><span class="line">    <span class="built_in">nlr</span>(t);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;中序遍历：&quot;</span>;</span><br><span class="line">    <span class="built_in">lnr</span>(t);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;后序遍历：&quot;</span>;</span><br><span class="line">    <span class="built_in">lrn</span>(t);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;层序遍历：&quot;</span>;</span><br><span class="line">    <span class="built_in">ceng</span>(t);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;非递归先序遍历：&quot;</span>;</span><br><span class="line">    <span class="built_in">nlr2</span>(t);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;非递归中序遍历：&quot;</span>;</span><br><span class="line">    <span class="built_in">lnr2</span>(t);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;非递归后序遍历：&quot;</span>;</span><br><span class="line">    <span class="built_in">lrn2</span>(t);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线索二叉树类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">xian_tree</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  threadtree x,z,h;</span><br><span class="line">  <span class="function"><span class="type">void</span>  <span class="title">creat_tree</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n,threadtree &amp;root)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    threadnode *c,*pa=<span class="literal">NULL</span>,*p;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    root = <span class="keyword">new</span> threadnode;</span><br><span class="line">    root-&gt;data = a[<span class="number">0</span>];</span><br><span class="line">    root-&gt;lchild = root-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = <span class="keyword">new</span> threadnode;</span><br><span class="line">        p-&gt;lchild = p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;data = a[i];</span><br><span class="line">        c = root;</span><br><span class="line">        <span class="keyword">while</span>(c)</span><br><span class="line">        &#123;</span><br><span class="line">            pa = c;</span><br><span class="line">            <span class="keyword">if</span>(c-&gt;data&lt;p-&gt;data)</span><br><span class="line">            c = c-&gt;rchild;<span class="comment">//如果根节点小于待插入节点就往右遍历</span></span><br><span class="line">            <span class="keyword">else</span> c = c-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pa-&gt;data&lt;p-&gt;data)</span><br><span class="line">        pa-&gt;rchild = p;<span class="comment">//右放</span></span><br><span class="line">        <span class="keyword">else</span> pa-&gt;lchild = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;&quot;中序线索化二叉树建立完成&quot;&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//中序遍历线索化</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">inthread</span><span class="params">(threadtree &amp;p,threadtree &amp;pre)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">inthread</span>(p-&gt;lchild,pre);<span class="comment">//中序先处理左子树</span></span><br><span class="line">      <span class="keyword">if</span>(!p-&gt;lchild)</span><br><span class="line">      &#123;</span><br><span class="line">        p-&gt;lchild = pre;<span class="comment">//建立前驱索引</span></span><br><span class="line">        p-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(pre&amp;&amp;!pre-&gt;rchild)<span class="comment">//若前驱无右子树就让当前p为右子树,建立前驱的后继节点</span></span><br><span class="line">      &#123;</span><br><span class="line">        pre-&gt;rchild = p;</span><br><span class="line">        pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      pre = p;<span class="comment">//更新节点</span></span><br><span class="line">      <span class="built_in">inthread</span>(p-&gt;rchild,pre);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//建立中序线索二叉树</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">creat_inthread</span><span class="params">(threadtree t)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    threadtree pre = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">inthread</span>(t,pre);</span><br><span class="line">      pre-&gt;rchild = <span class="literal">NULL</span>;<span class="comment">//处理最后一个节点</span></span><br><span class="line">      pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//求中序第一个节点</span></span><br><span class="line">  <span class="function">threadnode *<span class="title">firstnode</span><span class="params">(threadnode *p)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!p-&gt;ltag)<span class="comment">//中序根据左根右的顺序第一个节点是最左下一个节点</span></span><br><span class="line">    p = p-&gt;lchild;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//求中序最后一个节点</span></span><br><span class="line">  <span class="function">threadnode *<span class="title">finalnode</span><span class="params">(threadnode *p)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!p-&gt;rtag)<span class="comment">//中序根据左根右的顺序最后一个节点是最右下一个节点</span></span><br><span class="line">    p = p-&gt;rchild;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//求后继节点</span></span><br><span class="line">  <span class="function">threadnode *<span class="title">nextnode</span><span class="params">(threadnode *p)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p-&gt;rtag)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">firstnode</span>(p-&gt;rchild);<span class="comment">//有右子树说明右子树中第一个节点就是后继节点</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> p-&gt;rchild;<span class="comment">//否则下一个节点就是线索化后指的节点</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//求前驱节点</span></span><br><span class="line">  <span class="function">threadnode *<span class="title">lastnode</span><span class="params">(threadnode *p)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p-&gt;ltag)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">finalnode</span>(p-&gt;lchild);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> p-&gt;lchild;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//中序遍历</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">lnr</span><span class="params">(threadnode *t)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(threadnode *p=<span class="built_in">firstnode</span>(t);p!=<span class="literal">NULL</span>;p = <span class="built_in">nextnode</span>(p))</span><br><span class="line">    &#123;</span><br><span class="line">      cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//先序线索化</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">prethread</span><span class="params">(threadtree &amp;p,threadtree &amp;pre)</span><span class="comment">//根左右</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(!p-&gt;lchild)<span class="comment">//没有左子树,处理节点的前驱</span></span><br><span class="line">      &#123;</span><br><span class="line">        p-&gt;lchild = pre;</span><br><span class="line">        p-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(pre&amp;&amp;!pre-&gt;rchild)<span class="comment">//pre存在并且pre右子树不存在,处理前驱节点的后继</span></span><br><span class="line">      &#123;</span><br><span class="line">        pre-&gt;rchild = p;</span><br><span class="line">        pre-&gt;rtag =<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      pre = p;</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;ltag==<span class="number">0</span>)<span class="comment">//避免循环,易错点,没有左子树说明此时p-&gt;lchild指向了p的前驱，因此不能再次回到遍历p的前驱节点</span></span><br><span class="line">        <span class="built_in">prethread</span>(p-&gt;lchild,pre);<span class="comment">//遍历左子树</span></span><br><span class="line">      <span class="built_in">prethread</span>(p-&gt;rchild,pre);<span class="comment">//遍历右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;&quot;先序线索化二叉树建立完成&quot;&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//建立先序线索二叉树</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">creat_prethread</span><span class="params">(threadtree t)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    threadtree pre = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(t)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">prethread</span>(t,pre);</span><br><span class="line">      <span class="keyword">if</span>(!pre-&gt;rchild)</span><br><span class="line">      pre-&gt;rchild = <span class="literal">NULL</span>;<span class="comment">//处理最后一个节点</span></span><br><span class="line">      pre-&gt;rtag =<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//先序遍历</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">nlr</span><span class="params">(threadtree root)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(threadnode *p = root;p!=<span class="literal">nullptr</span>;p = <span class="built_in">next_prenode</span>(p))</span><br><span class="line">    &#123;</span><br><span class="line">      cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//下一个先序节点</span></span><br><span class="line">  <span class="function">threadnode* <span class="title">next_prenode</span><span class="params">(threadtree p)</span><span class="comment">//根左右</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;rtag==<span class="number">1</span>) <span class="keyword">return</span> p-&gt;rchild;<span class="comment">//有线索就直接按线索走</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;lchild&amp;&amp;p-&gt;ltag ==<span class="number">0</span>) <span class="keyword">return</span> p-&gt;lchild;<span class="comment">//否则按照根左右的顺序有左孩子下一个就是左孩子，不然就找右孩子</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//后序构造线索二叉树</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">postthread</span><span class="params">(threadtree root,threadtree pre)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">postthread</span>(root-&gt;lchild,pre);</span><br><span class="line">      <span class="built_in">postthread</span>(root-&gt;rchild,pre);</span><br><span class="line">      <span class="comment">//建立前驱线索</span></span><br><span class="line">      <span class="keyword">if</span>(!root-&gt;lchild)</span><br><span class="line">      &#123;</span><br><span class="line">        root-&gt;ltag = <span class="number">1</span>;</span><br><span class="line">        root-&gt;lchild = pre;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//连接后继</span></span><br><span class="line">      <span class="keyword">if</span>(pre&amp;&amp;!pre-&gt;rchild)</span><br><span class="line">      &#123;</span><br><span class="line">        pre-&gt;rtag =<span class="number">1</span>;</span><br><span class="line">        pre-&gt;rchild = root;</span><br><span class="line">      &#125;</span><br><span class="line">      pre = root;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">creat_postthread</span><span class="params">(threadtree root)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    threadnode* pre;</span><br><span class="line">    <span class="keyword">if</span>(root)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">postthread</span>(root,pre);</span><br><span class="line">      pre-&gt;rchild =<span class="literal">nullptr</span>;</span><br><span class="line">      pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//后序遍历需要三叉链表，有点复杂了就懒得写那么细了</span></span><br><span class="line">  <span class="comment">//只要学会原理都可以推。</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//测试</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">8</span>] = &#123; <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    <span class="built_in">creat_tree</span>(a,<span class="number">8</span>,z);</span><br><span class="line">    <span class="built_in">creat_inthread</span>(z);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;中序线索二叉树建立完成-------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;遍历：&quot;</span>;</span><br><span class="line">    <span class="built_in">lnr</span>(z);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">creat_tree</span>(a,<span class="number">8</span>,x);</span><br><span class="line">    <span class="built_in">creat_prethread</span>(x);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;先序线索二叉树建立完成-------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;遍历：&quot;</span>;</span><br><span class="line">    <span class="built_in">nlr</span>(x);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//课后练习</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exercises</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//3后序非递归在上面实现了，比起其他两个就是要注意设定一个标记为来判断左右指针访问过了</span></span><br><span class="line">  <span class="comment">//4,实现就是用额外空间存储，在反向输出即可，力扣上写过更难的</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">four</span><span class="params">(bitree t)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    queue&lt;bitree&gt; q;</span><br><span class="line">    stack&lt;bitree&gt; s;</span><br><span class="line">    q.<span class="built_in">push</span>(t);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">      bitnode *p = q.<span class="built_in">front</span>();</span><br><span class="line">      q.<span class="built_in">pop</span>();</span><br><span class="line">      s.<span class="built_in">push</span>(p);</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;l_child) q.<span class="built_in">push</span>(p-&gt;l_child);</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;r_child) q.<span class="built_in">push</span>(p-&gt;r_child);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">      cout&lt;&lt;s.<span class="built_in">top</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">      s.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//5,非递归写法用类似层次遍历,再用两个指针分别指向下一层和这层的最右或最左的子树，上层往下走等于另一个时层数就加一</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">five</span><span class="params">(bitree t)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="type">int</span> res =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!t) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="type">int</span> front =<span class="number">-1</span>, rear = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> last = <span class="number">0</span>;</span><br><span class="line">    bitree q[<span class="number">100</span>];<span class="comment">//用数组模拟队列</span></span><br><span class="line">    q[++rear] = t;</span><br><span class="line">    bitree p;</span><br><span class="line">    <span class="keyword">while</span>(front&lt;rear)<span class="comment">//但队列不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">      p = q[++front];</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;l_child) q[++rear] = p-&gt;l_child;</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;r_child) q[++rear] = p-&gt;r_child;</span><br><span class="line">      <span class="keyword">if</span>(front==last)</span><br><span class="line">      &#123;</span><br><span class="line">        res++;</span><br><span class="line">        last = rear;<span class="comment">//last更新</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//6,两个数组中分别找关系一个一个排</span></span><br><span class="line">  <span class="function">bitree <span class="title">num6</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> b[],<span class="type">int</span> l1,<span class="type">int</span> h1,<span class="type">int</span> l2,<span class="type">int</span> h2)</span><span class="comment">//l1h1是先序的第一个和最后一个下标，另外两个是中序的</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    bitree root = <span class="keyword">new</span> bitnode;</span><br><span class="line">    root-&gt;data = a[l1];<span class="comment">//建立根节点</span></span><br><span class="line">    <span class="type">int</span> l_len,r_len;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i =l2;b[i]!=root-&gt;data;i++);<span class="comment">//找到中序中根节点下标</span></span><br><span class="line">    </span><br><span class="line">    l_len = i<span class="number">-12</span>;<span class="comment">//左子树长度</span></span><br><span class="line">    r_len = h2-i;</span><br><span class="line">    <span class="keyword">if</span>(l_len)</span><br><span class="line">      root-&gt;l_child =<span class="built_in">num6</span>(a,b,l1+<span class="number">1</span>,l1+l_len,l2,l2+l_len<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">else</span>  root-&gt;l_child = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(r_len)</span><br><span class="line">      root-&gt;r_child =<span class="built_in">num6</span>(a,b,h1-r_len+<span class="number">1</span>,h1,h2-r_len+<span class="number">1</span>,h2);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//7用层序遍历的思想判断，插入所有的节点，遇到NULL检查后面的是否还有非空节点，有就不是</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">num7</span><span class="params">(bitree t)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!t) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    queue&lt;bitree&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(t);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">      bitree p = q.<span class="built_in">front</span>();</span><br><span class="line">      q.<span class="built_in">pop</span>();</span><br><span class="line">      <span class="keyword">if</span>(p)</span><br><span class="line">      &#123;</span><br><span class="line">        q.<span class="built_in">push</span>(p-&gt;l_child);</span><br><span class="line">        q.<span class="built_in">push</span>(p-&gt;r_child);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span><span class="comment">//发现null</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span>(q.<span class="built_in">front</span>()) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//发现非空元素</span></span><br><span class="line">          q.<span class="built_in">pop</span>();<span class="comment">//别忘了检查完后</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//8</span></span><br><span class="line">  <span class="comment">//用递归的思想判断</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">num8</span><span class="params">(bitree t)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!t) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(t-&gt;l_child&amp;&amp;t-&gt;r_child)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">num8</span>(t-&gt;l_child)+<span class="built_in">num8</span>(t-&gt;r_child) +<span class="number">1</span>;<span class="comment">//出现双分支总数就加1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">num8</span>(t-&gt;l_child)+<span class="built_in">num8</span>(t-&gt;r_child);<span class="comment">//返回值不会改变</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//9</span></span><br><span class="line">  <span class="comment">//还是递归的思路</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">num9</span><span class="params">(bitree t)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">num9</span>(t-&gt;l_child);</span><br><span class="line">      <span class="built_in">num9</span>(t-&gt;r_child);</span><br><span class="line">      <span class="keyword">auto</span> tmp = t-&gt;l_child;</span><br><span class="line">      t-&gt;l_child = t-&gt;r_child;</span><br><span class="line">      t-&gt;r_child = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//10</span></span><br><span class="line">  <span class="comment">//经典递归</span></span><br><span class="line">  <span class="type">int</span> i_10 =<span class="number">1</span>;<span class="comment">//遍历序号</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">num10</span><span class="params">(bitree b,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="string">&#x27;-1&#x27;</span>;<span class="comment">//设定空标记为-1</span></span><br><span class="line">    <span class="keyword">if</span>(i_10==k) <span class="keyword">return</span> b-&gt;data;</span><br><span class="line">    i_10++;</span><br><span class="line">    <span class="type">int</span> ch = <span class="built_in">num10</span>(b-&gt;l_child,k);<span class="comment">//往左子树找</span></span><br><span class="line">    <span class="keyword">if</span>(ch!=<span class="number">-1</span>) <span class="keyword">return</span> ch;</span><br><span class="line">    ch = <span class="built_in">num10</span>(b-&gt;r_child,k);<span class="comment">//找不到就在右子树找</span></span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//11</span></span><br><span class="line">  <span class="comment">//只是删除节点的子树所以要遍历所有节点，用层序</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">num_11_1</span><span class="params">(bitree &amp;t)</span><span class="comment">//删除操作，删除二叉树要递归删除，否则只是删除了根结点的，子树上的还会存留</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">num_11_1</span>(t-&gt;l_child);</span><br><span class="line">      <span class="built_in">num_11_1</span>(t-&gt;r_child);</span><br><span class="line">      <span class="keyword">delete</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">num_11_2</span><span class="params">(bitree bt,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    queue&lt;bitree&gt; q;</span><br><span class="line">    <span class="keyword">if</span>(bt)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(bt-&gt;data ==x)<span class="comment">//根节点就是x的情况</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">num_11_1</span>(bt);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    q.<span class="built_in">push</span>(bt);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">      bitree p = q.<span class="built_in">front</span>();</span><br><span class="line">      q.<span class="built_in">pop</span>();</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;l_child)<span class="comment">//处理左子树</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;l_child-&gt;data==x)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">num_11_1</span>(p-&gt;l_child);</span><br><span class="line">          p-&gt;l_child =<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> q.<span class="built_in">push</span>(p-&gt;l_child);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(p-&gt;r_child)<span class="comment">//处理右子树</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;r_child-&gt;data==x)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">num_11_1</span>(p-&gt;r_child);</span><br><span class="line">          p-&gt;r_child =<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> q.<span class="built_in">push</span>(p-&gt;r_child);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//12</span></span><br><span class="line">  <span class="comment">//非递归后序实现，因为访问到x时，栈内节点都是x的祖先</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">stack_12</span></span><br><span class="line">  &#123;</span><br><span class="line">    bitree t;</span><br><span class="line">    <span class="type">bool</span> tag;<span class="comment">//判断标志</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">num12</span><span class="params">(bitree bt,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    stack_12 s[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bt||top&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span>(bt&amp;&amp;bt-&gt;data!=x)<span class="comment">//左子树节点入栈</span></span><br><span class="line">      &#123;</span><br><span class="line">        s[++top].t =bt;</span><br><span class="line">        s[top].tag = <span class="literal">false</span>;</span><br><span class="line">        bt = bt-&gt;l_child;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(bt&amp;&amp;bt-&gt;data==x)</span><br><span class="line">      &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;找到查找结点&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=top;i++)</span><br><span class="line">        cout&lt;&lt;s[i].t-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);<span class="comment">//结束</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span>(top&amp;&amp;s[top].tag==<span class="number">1</span>)<span class="comment">//将空结点退栈</span></span><br><span class="line">      &#123;</span><br><span class="line">        top--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(top)</span><br><span class="line">      &#123;</span><br><span class="line">        s[top].tag =<span class="number">1</span>;</span><br><span class="line">        bt=s[top].t-&gt;r_child;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//13</span></span><br><span class="line">  <span class="comment">//后序非递归遍历p时保存此时的栈内所有p的祖先，再遍历q，用两个不同祖先一次对比，第一个重复元素即为最近公共祖先</span></span><br><span class="line">  stack_12 s[<span class="number">100</span>],s1[<span class="number">100</span>];<span class="comment">//和12题一样</span></span><br><span class="line">  <span class="type">int</span> top,top1;</span><br><span class="line">  <span class="function">bitree <span class="title">num13</span><span class="params">(bitree root,bitnode *p,bitnode*q)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    top = <span class="number">0</span>;</span><br><span class="line">    bitree bt = root;</span><br><span class="line">    <span class="keyword">while</span>(bt!=<span class="literal">NULL</span>||top&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span>(bt!=<span class="literal">NULL</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        s[++top].t = bt;</span><br><span class="line">        s[top].tag =<span class="number">0</span>;</span><br><span class="line">        bt=bt-&gt;l_child;<span class="comment">//存放左子树</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span>(top!=<span class="number">0</span>&amp;&amp;s[top].tag==<span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[top].t==p)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=top;i++)<span class="comment">//遇到p结点时此时栈内元素都是p的祖先，保存起来</span></span><br><span class="line">          &#123;</span><br><span class="line">            s1[i] = s[i];</span><br><span class="line">            top1=top;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[top].t==q)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> i =top;i&gt;<span class="number">0</span>;i--)<span class="comment">//就是暴力去找,嵌套循环</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j =top1;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span>(s1[j].t==s[i].t)</span><br><span class="line">              <span class="keyword">return</span> s[i].t;<span class="comment">//找到祖先</span></span><br><span class="line">            &#125;</span><br><span class="line">            top--;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(top!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          s[top].tag=<span class="number">1</span>;</span><br><span class="line">          bt = s[top].t-&gt;r_child;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//无祖先</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//14</span></span><br><span class="line">  <span class="comment">//层序遍历顺便记录结点的层号，再统计每层的宽度,这种题好像可以用bfs和dfs做</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">num14</span><span class="params">(bitree b)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    queue&lt;pair&lt;<span class="type">int</span>,bitree&gt;&gt; q;<span class="comment">//int用来存储每个节点的层号，这个方式和书上结构体效果差不多</span></span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>,bitree&gt;&gt; v;<span class="comment">//存储答案</span></span><br><span class="line">    <span class="type">int</span> idx = <span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;idx,b&#125;);<span class="comment">//插入第一层</span></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">auto</span> p = q.<span class="built_in">front</span>();</span><br><span class="line">      q.<span class="built_in">pop</span>();</span><br><span class="line">      v.<span class="built_in">push_back</span>(p);</span><br><span class="line">      idx = p.first;<span class="comment">//idx更新为出队的层数，因为每一层出后下一层进来</span></span><br><span class="line">      <span class="keyword">if</span>(p.second-&gt;l_child)</span><br><span class="line">      &#123;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;idx+<span class="number">1</span>,p.second-&gt;l_child&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(p.second-&gt;r_child)</span><br><span class="line">      &#123;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;idx+<span class="number">1</span>,p.second-&gt;r_child&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//idx++;层号++这样或许也可以</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在v中查找</span></span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>;idx = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;v.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> n = <span class="number">0</span>;<span class="comment">//统计每层的宽度</span></span><br><span class="line">      <span class="keyword">while</span>(v[i].first==idx)</span><br><span class="line">      &#123;</span><br><span class="line">        n++;i++;</span><br><span class="line">      &#125;</span><br><span class="line">      idx = v[i].first;<span class="comment">//结束上面循环后i来到了下一层，此时更新层号</span></span><br><span class="line">      <span class="keyword">if</span>(n&gt;max) max = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//15</span></span><br><span class="line">  <span class="comment">//其他类型数不能由先序得到后序，满二叉树可以，用递归的思想,先找到根节点，剩下的对半，前一半为左子树，后一半为右子树</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">num15</span><span class="params">(<span class="type">int</span> pre[],<span class="type">int</span> l1,<span class="type">int</span> h1,<span class="type">int</span> post[],<span class="type">int</span> l2,<span class="type">int</span> h2)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="type">int</span> half;</span><br><span class="line">    <span class="keyword">if</span>(h1&gt;=l1)</span><br><span class="line">    &#123;</span><br><span class="line">      post[h2] = pre[<span class="number">11</span>];</span><br><span class="line">      half = h1-l1/<span class="number">2</span>;</span><br><span class="line">      <span class="built_in">num15</span>(pre,l1+<span class="number">1</span>,l1+half,post,l2,l2+half<span class="number">-1</span>);</span><br><span class="line">      <span class="built_in">num15</span>(pre,l1+half+<span class="number">1</span>,h1,post,l2+half,h2<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//16</span></span><br><span class="line">  <span class="comment">//用中序遍历，遍历到叶节点时就插入链表即可,其他遍历方式因该也可以</span></span><br><span class="line">  vector&lt;bitree&gt;n;<span class="comment">//用vector代替链表,会有些许差异</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">num16</span><span class="params">(bitree b)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">num16</span>(b-&gt;l_child);</span><br><span class="line">      <span class="keyword">if</span>(b-&gt;l_child==<span class="literal">NULL</span>&amp;&amp;b-&gt;r_child==<span class="literal">NULL</span>)</span><br><span class="line">      n.<span class="built_in">push_back</span>(b);<span class="comment">//将叶结点按顺序插入n</span></span><br><span class="line">      <span class="built_in">num16</span>(b-&gt;r_child);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//再按n来创建链表即可</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//17</span></span><br><span class="line">  <span class="comment">//经典递归</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">num17</span><span class="params">(bitree t1,bitree t2)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="type">bool</span> flag1,flag2;</span><br><span class="line">    <span class="keyword">if</span>(t1==<span class="literal">NULL</span>&amp;&amp;t2==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(t1==<span class="literal">NULL</span>||t2==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">num17</span>(t1-&gt;l_child,t2-&gt;l_child)&amp;&amp;<span class="built_in">num17</span>(t1-&gt;r_child,t2-&gt;r_child);<span class="comment">//简写了</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//18</span></span><br><span class="line">  <span class="comment">//不好说，看解析</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">num18</span><span class="params">(threadtree t,threadtree p)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    threadtree q;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;rtag==<span class="number">0</span>)<span class="comment">//有右子树，右子树为前驱</span></span><br><span class="line">    q = p-&gt;rchild;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;ltag==<span class="number">0</span>)<span class="comment">//无右但有左子树，左为前驱</span></span><br><span class="line">    q = p-&gt;lchild;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;lchild==<span class="literal">NULL</span>)</span><br><span class="line">    q=<span class="literal">NULL</span>;<span class="comment">//p是中序第一个结点，无后序前驱</span></span><br><span class="line">    <span class="keyword">else</span><span class="comment">//否则往上找线索</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span>(p-&gt;ltag==<span class="number">1</span>&amp;&amp;p-&gt;lchild)</span><br><span class="line">      &#123;</span><br><span class="line">        p = p-&gt;lchild;<span class="comment">//往上找到有左子树的第一个p的祖宗结点，那么依据左右根的思路p的前驱就是左子树的根结点</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;ltag==<span class="number">0</span>)</span><br><span class="line">      q = p-&gt;lchild;</span><br><span class="line">      <span class="keyword">else</span> q=<span class="literal">NULL</span>;<span class="comment">//仅有单支树的情况</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bi_tree tree;</span><br><span class="line">    tree.<span class="built_in">test</span>();</span><br><span class="line">    <span class="comment">// xian_tree t;//不知道为什么一起两个类一起用线索二叉树会缺漏</span></span><br><span class="line">    <span class="comment">// t.test();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>王道上写法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//并查集</span></span><br><span class="line"><span class="type">int</span> f[<span class="number">100</span>];<span class="comment">//采用双亲表示法存放数据</span></span><br><span class="line"><span class="type">int</span> h[<span class="number">100</span>];<span class="comment">//优化后根节点的绝对值是该树中结点的总树</span></span><br><span class="line"><span class="comment">//初始化 n个元素 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//使每个元素的根节点是其本身</span></span><br><span class="line">  <span class="comment">//即初始时每个元素都是单独的 </span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) f[i]=i;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_pro</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) f[i]=i,h[i]=<span class="number">0</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询操作，本质就是向上查找父节点，直至查到根节点即可表示该点属于哪个树了</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> i)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(f[i] &gt;= <span class="number">0</span>)   <span class="comment">//直到元素的父节点&lt;=0，表示已经查询到了树的根，这是王道上的写法</span></span><br><span class="line">    i = f[i];</span><br><span class="line">  <span class="keyword">return</span> i; <span class="comment">//返回根节点对应的元素 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找优化(路径压缩</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_pro</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> root = i;</span><br><span class="line">  <span class="keyword">while</span>(f[root]&gt;=<span class="number">0</span>) root=f[root];<span class="comment">//循环找到结点</span></span><br><span class="line">  <span class="keyword">while</span>(i!=root)<span class="comment">//没有直接指向根节点就压缩,顺便将往上走的所有父节点都压缩，不断减少树的高度</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> t = f[i];</span><br><span class="line">    f[i] = root;</span><br><span class="line">    i =t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并,本质就是将一个树的根结点修改为另一个树的根节点，象征着合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//先找到两个元素对应的根对应的元素 </span></span><br><span class="line">  <span class="type">int</span> fa = <span class="built_in">Find</span>(a); </span><br><span class="line">  <span class="type">int</span> fb = <span class="built_in">Find</span>(b);</span><br><span class="line">  <span class="keyword">if</span>(fa==fb) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">else</span> f[fa]=fb;  <span class="comment">//否则令元素 a的根指向元素 b的根 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//优化思路就是小树合并到大树里，这样高度更低</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">union_pro</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> fa = <span class="built_in">Find</span>(a);</span><br><span class="line">  <span class="type">int</span> fb = <span class="built_in">Find</span>(b);</span><br><span class="line">  <span class="keyword">if</span>(fa != fb) &#123;</span><br><span class="line">    <span class="keyword">if</span>(h[fa] &lt; h[fb]) &#123;</span><br><span class="line">      f[fa] = fb;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      f[fb] = fa;</span><br><span class="line">      <span class="keyword">if</span>(h[fa] == h[fb]) h[fa]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Acwing写法<br>网上主流根节点是存储数组的下标和存储的数据相等的点。王道上是根节点存储的是负数，绝对值表示树中结点数目<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)朴素并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N]; <span class="comment">//存储每个点的祖宗节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);<span class="comment">//自带了路径压缩，递归写法。借用了除根结点外其他结点下标位置上的数据都是该节点的父节点下标的特性，不断往上直至查询到相同的时候表明找到了根节点，再将原本查询元素存放的数据更改为根节点下标，实现路径压缩。</span></span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)维护size的并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N], size[N];</span><br><span class="line">    <span class="comment">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        size[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    size[<span class="built_in">find</span>(b)] += size[<span class="built_in">find</span>(a)];</span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)维护到祖宗节点距离的并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N], d[N];</span><br><span class="line">    <span class="comment">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u = <span class="built_in">find</span>(p[x]);</span><br><span class="line">            d[x] += d[p[x]];</span><br><span class="line">            p[x] = u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        d[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">    d[<span class="built_in">find</span>(a)] = distance; <span class="comment">// 根据具体问题，初始化find(a)的偏移量</span></span><br></pre></td></tr></table></figure></p><h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> max_size =<span class="number">100</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = N * <span class="number">2</span>;</span><br><span class="line"><span class="comment">//邻接表构造</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">arcnode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> adjvex;<span class="comment">//顶点位置</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">arcnode</span> *next;<span class="comment">//下一条弧的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">vnode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data;<span class="comment">//顶点信息</span></span><br><span class="line">    arcnode *first;<span class="comment">//单条表上的头指针</span></span><br><span class="line">&#125;vnode,adjlist[max_size];</span><br><span class="line"> <span class="keyword">struct</span> <span class="title class_">algraph</span> <span class="comment">//邻接表本体</span></span><br><span class="line">&#123;</span><br><span class="line">    adjlist vertices;</span><br><span class="line">    <span class="type">int</span> vexnum,arcnum;<span class="comment">//图的顶点数和弧数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建邻接表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create_algraph</span><span class="params">(algraph* g)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> end, start;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;请输入结点数和边数：&quot;</span>; </span><br><span class="line">  cin &gt;&gt;g-&gt;vexnum&gt;&gt;g-&gt;arcnum;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;请输入每个顶点保存的数据：&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g-&gt;vexnum; i++) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;vertex&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line">    cin &gt;&gt; g-&gt;vertices[i].data;</span><br><span class="line">    g-&gt;vertices[i].first = <span class="literal">NULL</span>;<span class="comment">//初始化时一定要让每个顶点的指针域为NULL，否则不会默认为NULL</span></span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;请输入每条边的两个顶点在数组中的下标&quot;</span> &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; g-&gt;arcnum; j++) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;条边:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; start &gt;&gt; end;</span><br><span class="line">        arcnode *node = <span class="keyword">new</span> arcnode;</span><br><span class="line">    node-&gt;adjvex = end;</span><br><span class="line">    node-&gt;next = g-&gt;vertices[start].first;</span><br><span class="line">    g-&gt;vertices[start].first = node;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//打印邻接表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintLink</span><span class="params">(algraph* g ,arcnode* p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    cout &lt;&lt; g-&gt;vertices[p-&gt;adjvex].data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">output</span><span class="params">(algraph* g)</span> </span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;邻接表为:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g-&gt;vexnum; i++) &#123;</span><br><span class="line">    cout &lt;&lt; g-&gt;vertices[i].data &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">    <span class="built_in">PrintLink</span>(g, g-&gt;vertices[i].first);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 图的遍历</span></span><br><span class="line"><span class="comment">//例子使用这里的来实现的，转换之间有所差异</span></span><br><span class="line"><span class="comment">//创建邻接矩</span></span><br><span class="line"><span class="comment">// void Creat(GraAdList&amp; G) &#123;</span></span><br><span class="line"><span class="comment">//   int i, j, k;</span></span><br><span class="line"><span class="comment">//   EdgeNode* e = NULL;</span></span><br><span class="line"><span class="comment">//   EdgeNode* q = NULL;</span></span><br><span class="line"><span class="comment">//   cout &lt;&lt; &quot;请输入顶点数和边数： &quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//   cin &gt;&gt; G.vexnum &gt;&gt; G.edgenum;</span></span><br><span class="line"><span class="comment">//   cout &lt;&lt; &quot;请输入顶点信息&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//   for (k = 0; k &lt; G.vexnum; k++)</span></span><br><span class="line"><span class="comment">//   &#123;</span></span><br><span class="line"><span class="comment">//     cin &gt;&gt; G.AdList[k].data;</span></span><br><span class="line"><span class="comment">//     G.AdList[k].first = NULL;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   for (k = 0; k &lt; G.edgenum; k++)</span></span><br><span class="line"><span class="comment">//   &#123;</span></span><br><span class="line"><span class="comment">//     cout &lt;&lt; &quot;请输入边(vi,vj)的下标i,j： &quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//     cin &gt;&gt; i &gt;&gt; j;</span></span><br><span class="line"><span class="comment">//     e = new EdgeNode;</span></span><br><span class="line"><span class="comment">//     e-&gt;adjvex = j;</span></span><br><span class="line"><span class="comment">//     e-&gt;next = G.AdList[i].first;</span></span><br><span class="line"><span class="comment">//     G.AdList[i].first = e;</span></span><br><span class="line"><span class="comment">//     /*q = new EdgeNode;</span></span><br><span class="line"><span class="comment">//     q-&gt;adjvex = i;</span></span><br><span class="line"><span class="comment">//     q-&gt;next = G.AdList[j].first;</span></span><br><span class="line"><span class="comment">//     G.AdList[j].first = q;*/</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// void myprint(GraAdList G)&#123;</span></span><br><span class="line"><span class="comment">//   cout &lt;&lt; endl &lt;&lt; &quot;邻接表: &quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//   EdgeNode* p;</span></span><br><span class="line"><span class="comment">//   for (int i = 0; i &lt; G.vexnum; i++)</span></span><br><span class="line"><span class="comment">//   &#123;</span></span><br><span class="line"><span class="comment">//     cout &lt;&lt; G.AdList[i].data &lt;&lt; &quot;: &quot;;</span></span><br><span class="line"><span class="comment">//     for (p = G.AdList[i].first; p; p = p-&gt;next)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//       cout &lt;&lt; p-&gt;adjvex &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//bfs</span></span><br><span class="line"><span class="type">bool</span> st_b_n[max_size];<span class="comment">//辅助数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfstraverse</span><span class="params">(algraph g)</span><span class="comment">//和上述格式有点差异，不转换了</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(st_b_n,<span class="literal">false</span>, <span class="keyword">sizeof</span> st_b_n);<span class="comment">//数组初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;g.vexnum;i++) <span class="comment">//防止非连通图遍历不完</span></span><br><span class="line">        <span class="keyword">if</span>(!st_b_n[i])</span><br><span class="line">        <span class="built_in">bfs_normal</span>(g,i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs_normal</span><span class="params">(algraph g,<span class="type">int</span> v)</span><span class="comment">//v表示从哪里开始</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> front,rear,j;<span class="comment">// 队列指针</span></span><br><span class="line">    <span class="type">int</span> q[max_size];<span class="comment">//队列模拟</span></span><br><span class="line">    front = rear =<span class="number">-1</span>;</span><br><span class="line">    arcnode *p;</span><br><span class="line">    cout&lt;&lt;g.vertices[v].data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    st_b_n[v]=<span class="literal">true</span>;</span><br><span class="line">    q[++rear] = v;<span class="comment">//类似层序遍历，将准备查找的元素插入队列</span></span><br><span class="line">    <span class="keyword">while</span>(front!=rear)</span><br><span class="line">    &#123;</span><br><span class="line">        v = q[++front];<span class="comment">//取出队头元素并出队</span></span><br><span class="line">        p = g.vertices[v].first;</span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            j = p-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span>(!st_b_n[j])<span class="comment">//和p同链但是没被访问的元素插入队列访问再等待查找后序处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;g.vertices[j].data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                st_b_n[j]=<span class="literal">true</span>;</span><br><span class="line">                q[++rear] = j;</span><br><span class="line">            &#125;</span><br><span class="line">            p =p-&gt;next;<span class="comment">//往后找</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dfs</span></span><br><span class="line"><span class="comment">//图构造如下</span></span><br><span class="line"><span class="comment">// void matrix_make(Graph &amp;g)&#123; //由邻接表构造邻接矩阵 </span></span><br><span class="line"><span class="comment">//   Arcnode *p = new Arcnode;</span></span><br><span class="line"><span class="comment">//   memset(g.arc_matrix,0,sizeof(g.arc_matrix));</span></span><br><span class="line"><span class="comment">//   for(int i = 1;i &lt;= g.vex_sum;i++)</span></span><br><span class="line"><span class="comment">//   &#123;</span></span><br><span class="line"><span class="comment">//     p = g.vexlist[i].firstarc;</span></span><br><span class="line"><span class="comment">//     while(p)&#123;</span></span><br><span class="line"><span class="comment">//       g.arc_matrix[i][p-&gt;adjvex] = 1;</span></span><br><span class="line"><span class="comment">//       p = p-&gt;nextarc;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   for(int i = 1;i &lt;= g.vex_sum;i++)</span></span><br><span class="line"><span class="comment">//   for(int j = 1;j &lt;= g.vex_sum;j++)</span></span><br><span class="line"><span class="comment">//   if(g.arc_matrix[i][j] == 1)g.arc_matrix[j][i] = 1;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="type">bool</span> st_d_n[max_size];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_n</span><span class="params">(algraph &amp;g,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st_d_n[v] = <span class="literal">true</span>;</span><br><span class="line">    cout&lt;&lt;g.vertices[v].data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;g.vexnum;i++)</span><br><span class="line">        <span class="keyword">if</span>(!st_d_n[i]) <span class="built_in">dfs_n</span>(g,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfstraverse</span><span class="params">(algraph &amp;g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;g.vexnum;i++) st_d_n[i] = <span class="literal">false</span>;<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;g.vexnum;i++)</span><br><span class="line">        <span class="keyword">if</span>(!st_d_n[i]) <span class="built_in">dfs_n</span>(g,i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//以上是常规建立，算法还有一种邻接表用数组模拟</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;<span class="comment">//顶点数和表中顶点关系数目</span></span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="comment">//插入操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<span class="comment">//h储存的是a这条链表上的头节点，ne存储列表的索引值，e存放数据</span></span><br><span class="line">    <span class="comment">//插入的时候，像链表的头插法一样，e的第idx位存储数据，ne第idx位存放的是第a条链表的头节点，即h[a]，</span></span><br><span class="line">    <span class="comment">//然后更新这条链表上的头节点的下标值即h[a]=idx++；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//树的结构输出出来是这样的</span></span><br><span class="line"><span class="comment">// 1:-&gt;4-&gt;7-&gt;2  表示1连着4，7，2这几个结点</span></span><br><span class="line"><span class="comment">// 2:-&gt;5-&gt;8-&gt;1</span></span><br><span class="line"><span class="comment">// 3:-&gt;9-&gt;4</span></span><br><span class="line"><span class="comment">// 4:-&gt;6-&gt;3-&gt;1</span></span><br><span class="line"><span class="comment">// 5:-&gt;2</span></span><br><span class="line"><span class="comment">// 6:-&gt;4</span></span><br><span class="line"><span class="comment">// 7:-&gt;1</span></span><br><span class="line"><span class="comment">// 8:-&gt;2</span></span><br><span class="line"><span class="comment">// 9:-&gt;3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create_e_alg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    </span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;请输入图的两点间关系总数：&quot;</span>; </span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入格式:两个整数,代表在顶点x中插入的数y&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        </span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="built_in">add</span>(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_e</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)  </span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;<span class="string">&quot;:&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=h[i];j!=<span class="number">-1</span>;j=ne[j])</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>&lt;&lt;e[j]; </span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Acwing上理所当然的也有相应练习模板</span></span><br><span class="line"><span class="type">bool</span> st[max_size];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[u] = <span class="literal">true</span>; <span class="comment">// st[u] 表示点u已经被遍历过</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j]) <span class="built_in">dfs</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">st[<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">// 表示1号点已经被遍历过</span></span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j])</span><br><span class="line">        &#123;</span><br><span class="line">            st[j] = <span class="literal">true</span>; <span class="comment">// 表示点j已经被遍历过</span></span><br><span class="line">            q.<span class="built_in">push</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//练习题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exercises</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//6.3.5练习题</span></span><br><span class="line">    <span class="comment">//第一题就是判断边数是否为顶点数-1个，或者判断是不是无回路的连通图即可</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="comment">//使用栈来存储</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num2</span><span class="params">(algraph&amp;g,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> w;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="type">bool</span> st[max_size];<span class="comment">//标记数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;g.vexnum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s.<span class="built_in">push</span>(v);</span><br><span class="line">        st[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k =s.<span class="built_in">top</span>();</span><br><span class="line">            s.<span class="built_in">pop</span>();<span class="comment">//取栈顶元素</span></span><br><span class="line">            cout&lt;&lt;g.vertices[k].data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> p = g.vertices[k].first;p-&gt;adjvex&gt;=<span class="number">0</span>;p = p-&gt;next )<span class="comment">//和书上不大一样，类似使用迭代器迭代</span></span><br><span class="line">            &#123;</span><br><span class="line">                w = p-&gt;adjvex;</span><br><span class="line">                <span class="keyword">if</span>(!st[w])</span><br><span class="line">                &#123;</span><br><span class="line">                    s.<span class="built_in">push</span>(w);</span><br><span class="line">                    st[w] =<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="comment">//思路就是用广度和深度搜索即可</span></span><br><span class="line">    <span class="type">bool</span> st_4[max_size];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num4_dfs</span><span class="params">(algraph g,<span class="type">int</span> i,<span class="type">int</span> j,<span class="type">bool</span> &amp;can_reach)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==j)</span><br><span class="line">        &#123;</span><br><span class="line">            can_reach = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        st_4[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p = g.vertices[i].first;p-&gt;adjvex&gt;=<span class="number">0</span>;p = p-&gt;next )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> w = p-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span>(!st_4[<span class="number">2</span>]&amp;&amp;!can_reach)</span><br><span class="line">            <span class="built_in">num4_dfs</span>(g,w,j,can_reach);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">num4_bfs</span><span class="params">(algraph g,<span class="type">int</span> i,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            st_4[u] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(u==j) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> p = g.vertices[u].first;p-&gt;adjvex&gt;=<span class="number">0</span>;p = p-&gt;next )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> w = p-&gt;adjvex;</span><br><span class="line">                <span class="keyword">if</span>(w==j)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(!st_4[w])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(w);</span><br><span class="line">                    st_4[w] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//未找到</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5</span></span><br><span class="line">    <span class="comment">//经典深度优先搜索,注意要回溯</span></span><br><span class="line">    <span class="type">bool</span> st_5[max_size];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num5</span><span class="params">(algraph *g,<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> path[],<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> w;</span><br><span class="line">        arcnode *p;</span><br><span class="line">        d++; <span class="comment">//路径长度+1</span></span><br><span class="line">        path[d] = u;</span><br><span class="line">        st_5[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(u==v)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;path&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        p = g-&gt;vertices[u].first;</span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            w = p-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span>(st_5[w]==<span class="number">0</span>)</span><br><span class="line">                <span class="built_in">num5</span>(g,w,v,path,d);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        st_5[u] =<span class="number">0</span>;<span class="comment">//回溯</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    algraph* g = <span class="keyword">new</span> algraph;</span><br><span class="line">    <span class="built_in">create_algraph</span>(g);</span><br><span class="line">    <span class="built_in">output</span>(g);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> g;<span class="comment">//释放结点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// create_e_alg();</span></span><br><span class="line">    <span class="comment">// //打印数据</span></span><br><span class="line">    <span class="comment">// print_e();</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="prim找最小生成树"><a href="#prim找最小生成树" class="headerlink" title="prim找最小生成树"></a>prim找最小生成树</h2><p>acwing写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,g[N][N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; dist[t] == INF) <span class="keyword">return</span> INF;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i) res += dist[t];</span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ ) dist[j] = <span class="built_in">min</span>(dist[j], g[t][j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        g[a][b] = g[b][a] = <span class="built_in">min</span>(g[a][b],c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">prim</span>();</span><br><span class="line">    <span class="keyword">if</span>(t ==INF) cout&lt;&lt;<span class="string">&quot;impossible&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Kruskal算法求最小生成树"><a href="#Kruskal算法求最小生成树" class="headerlink" title="Kruskal算法求最小生成树"></a>Kruskal算法求最小生成树</h2><p>acwing写法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> p[N];<span class="comment">//保存并查集</span></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">e</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="type">int</span> w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> e&amp; rhs)&#123;<span class="comment">//通过边长进行排序</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;w &lt; rhs.w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;edg[N * <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[a]!=a) p[a] = <span class="built_in">find</span>(p[a]);<span class="comment">//并查集找根结点+压缩操作</span></span><br><span class="line">    <span class="keyword">return</span> p[a];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">klskr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=m;i++)<span class="comment">//每条边都找</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pa = <span class="built_in">find</span>(edg[i].a);<span class="comment">//a所在的集合</span></span><br><span class="line">        <span class="type">int</span> pb = <span class="built_in">find</span>(edg[i].b);</span><br><span class="line">        <span class="keyword">if</span>(pa!=pb)</span><br><span class="line">        &#123;</span><br><span class="line">            res+=edg[i].w;</span><br><span class="line">            p[pa] = pb;<span class="comment">//合并a,b</span></span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++) p[i] =i;<span class="comment">//初始化并查集</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        edg[i] = &#123;a,b,c,&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(edg+<span class="number">1</span>,edg+m+<span class="number">1</span>);<span class="comment">//按边长排序</span></span><br><span class="line">    <span class="built_in">klskr</span>();</span><br><span class="line">    <span class="keyword">if</span>(cnt&lt;n<span class="number">-1</span>)</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;impossible&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Dijkstra求最短路"><a href="#Dijkstra求最短路" class="headerlink" title="Dijkstra求最短路"></a>Dijkstra求最短路</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> g[N][N];<span class="comment">//存放图</span></span><br><span class="line"><span class="type">int</span> dist[N];<span class="comment">//保存源点到其余各个节点的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">   dist[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>(!st[j]&amp;&amp;(t==<span class="number">-1</span>||dist[t]&gt;dist[j]))</span><br><span class="line">           t = j;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        dist[j] = <span class="built_in">min</span>(dist[j],dist[t]+g[t][j]);</span><br><span class="line">        </span><br><span class="line">    st[t] =<span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span>(dist[n]==<span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">return</span> dist[n];</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> g);<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        g[a][b] = <span class="built_in">min</span>(g[a][b],c);<span class="comment">//迪杰斯特拉算法不能有负权边，所以最小是0</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">dijstra</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Floyd求最短路"><a href="#Floyd求最短路" class="headerlink" title="Floyd求最短路"></a>Floyd求最短路</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>, INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="type">int</span> d[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k =<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            d[i][j] = <span class="built_in">min</span>(d[i][j],d[i][k]+d[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i==j) d[i][j] =<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> d[i][j] = INF;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">        d[x][y] = <span class="built_in">min</span>(d[x][y], z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">floyd</span>();</span><br><span class="line">    <span class="keyword">while</span>(k--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="type">int</span> t = d[a][b];</span><br><span class="line">        <span class="keyword">if</span>(t&gt;INF/<span class="number">2</span>) cout&lt;&lt;<span class="string">&quot;impossible&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;t&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>顺序查询</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_arry</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;当前数组输出:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i :a)</span><br><span class="line">    cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序查找</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">normal_find</span><span class="params">(<span class="type">int</span> x,vector&lt;<span class="type">int</span>&gt; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;使用顺序查找&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i:a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cnt++;</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;找到了在第&quot;</span>&lt;&lt;cnt&lt;&lt;<span class="string">&quot;位&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;无可奉告&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二分查找</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">erfen_find</span><span class="params">(<span class="type">int</span> x,vector&lt;<span class="type">int</span>&gt; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; b = a;</span><br><span class="line">    <span class="built_in">sort</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">print_arry</span>(b);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;使用二分查找&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="type">int</span> l =<span class="number">0</span>,r = b.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> mid =(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(b[mid]&lt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b[mid]&gt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            r = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;找到了在第&quot;</span>&lt;&lt;mid+<span class="number">1</span>&lt;&lt;<span class="string">&quot;位&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mid =(l+r)/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;无可奉告&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉排序树构造</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="type">int</span> key;<span class="comment">//关键子项</span></span><br><span class="line">  <span class="type">int</span> otherinfo;<span class="comment">//其他数据域</span></span><br><span class="line">&#125;elemtype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">bstnode</span> &#123;</span><br><span class="line">  elemtype data;<span class="comment">//每个结点的数据域包括关键字项和其他数据项</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">bstnode</span>* lchild, * rchild;<span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;bstode,*bstree;</span><br><span class="line"><span class="comment">//二叉排序树递归查找</span></span><br><span class="line"><span class="function">bstree <span class="title">searchbst</span><span class="params">(bstree t,<span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!t||key==t-&gt;data.key) <span class="keyword">return</span> t;<span class="comment">//查找结束 </span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key&lt;t-&gt;data.key) <span class="keyword">return</span> <span class="built_in">searchbst</span>(t-&gt;lchild,key);<span class="comment">//往左子树查找</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">searchbst</span>(t-&gt;rchild,key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二叉排序树插入</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_bst</span><span class="params">(bstree &amp;t,elemtype e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!t)<span class="comment">//如果依据到了叶节点就直接连接上</span></span><br><span class="line">    &#123;</span><br><span class="line">        bstnode* s =<span class="keyword">new</span> bstnode;</span><br><span class="line">        s-&gt;data = e;</span><br><span class="line">        s-&gt;lchild = s-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        t = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e.key&lt;t-&gt;data.key)<span class="comment">//插入小于当前值就往左子树递归</span></span><br><span class="line">        <span class="built_in">insert_bst</span>(t-&gt;lchild,e);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e.key&gt;t-&gt;data.key)<span class="comment">//否则就往右子树递归</span></span><br><span class="line">        <span class="built_in">insert_bst</span>(t-&gt;rchild,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序二叉树的创建</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create_bst</span><span class="params">(bstree &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t =<span class="literal">NULL</span>;</span><br><span class="line">    elemtype e;</span><br><span class="line">    cin&gt;&gt;e.key;</span><br><span class="line">    <span class="keyword">while</span>(e.key!= <span class="number">-1</span>)<span class="comment">//-1是停止标记</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">insert_bst</span>(t,e);</span><br><span class="line">        cin&gt;&gt;e.key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">insert_bst</span>(t,e);<span class="comment">//最后一步不可遗忘</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉排序树的删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_bst</span><span class="params">(bstree &amp;t,<span class="type">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//从二叉排序树T中删除关键字等于key的结点</span></span><br><span class="line">  bstnode* p = <span class="keyword">new</span> bstnode;</span><br><span class="line">  bstnode* f = <span class="keyword">new</span> bstnode;</span><br><span class="line">    p =t;f = <span class="literal">NULL</span>;<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data.key == key) <span class="keyword">break</span>;</span><br><span class="line">        f = p;<span class="comment">//f为p的双亲结点</span></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data.key&gt;key) p = p-&gt;lchild;<span class="comment">//当前结点比查找值小就往左子树找</span></span><br><span class="line">        <span class="keyword">else</span> p =p-&gt;rchild;<span class="comment">//否则往右找</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    bstnode* q = <span class="keyword">new</span> bstnode;</span><br><span class="line"></span><br><span class="line">    q = p;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;lchild&amp;&amp;p-&gt;rchild)<span class="comment">//存在左右子树的情况</span></span><br><span class="line">    &#123;</span><br><span class="line">        bstnode *s = <span class="keyword">new</span> bstnode;</span><br><span class="line">        s = p-&gt;lchild;</span><br><span class="line">        <span class="keyword">while</span>(s-&gt;rchild)</span><br><span class="line">        &#123;</span><br><span class="line">            q = s;</span><br><span class="line">            s = s-&gt;rchild;<span class="comment">//找到最右下的结点，即直接前驱</span></span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;data = s-&gt;data;<span class="comment">//s指向被删结点前驱</span></span><br><span class="line">        <span class="keyword">if</span>(q!=p) q-&gt;rchild = s-&gt;lchild;<span class="comment">//重接q的右子树</span></span><br><span class="line">        <span class="keyword">else</span> q-&gt;lchild = s-&gt;lchild;<span class="comment">//重接左子树</span></span><br><span class="line">        <span class="keyword">delete</span> s;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!p-&gt;rchild) <span class="comment">//若只有左子树，只需重接左子树即可</span></span><br><span class="line">        p = p-&gt;lchild;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!p-&gt;lchild)</span><br><span class="line">        p = p-&gt;rchild;</span><br><span class="line">    <span class="comment">/*---------将p所指的子树挂接到其双亲结点*f相应的位置---------*/</span></span><br><span class="line">    <span class="keyword">if</span>(!f) t = p;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(q==f-&gt;lchild) f-&gt;lchild = p;</span><br><span class="line">    <span class="keyword">else</span> f-&gt;rchild = p;</span><br><span class="line">    <span class="keyword">delete</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------二叉树的中序遍历------------*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inorder_bst</span><span class="params">(bstree T)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (T)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">inorder_bst</span>(T-&gt;lchild);</span><br><span class="line">    cout &lt;&lt; T-&gt;data.key &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">inorder_bst</span>(T-&gt;rchild);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试案例，53 17 78 9 45 70 94 23 60 88 75 -1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bst_test</span><span class="params">(bstree &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">create_bst</span>(t);</span><br><span class="line">    <span class="built_in">inorder_bst</span>(t);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入您要查询的元素：&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">  cin &gt;&gt; k;</span><br><span class="line">  bstree T1 = <span class="literal">NULL</span>;<span class="comment">//定义T1用来接收查找结果</span></span><br><span class="line">  T1 = <span class="built_in">searchbst</span>(t, k);</span><br><span class="line">  <span class="keyword">if</span> (T1) cout &lt;&lt; <span class="string">&quot;存在此元素！&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;不存在此元素！&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="type">int</span> key = <span class="number">0</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;请输入您要删除的元素：&quot;</span> &lt;&lt; endl;</span><br><span class="line">  cin &gt;&gt; key;</span><br><span class="line">  <span class="built_in">delete_bst</span>(t, key);<span class="comment">//删除元素</span></span><br><span class="line">  <span class="built_in">inorder_bst</span>(t);<span class="comment">//再次中序遍历二叉树</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉平衡树"><a href="#二叉平衡树" class="headerlink" title="二叉平衡树"></a>二叉平衡树</h2><p>内容有点多，直接抄大佬的了，实现逻辑可以参考<a href="[第五章树-第四节2：平衡二叉树(AVL">另一位大佬的解释</a>及其旋转_快乐江湖的博客-CSDN博客](<a href="https://blog.csdn.net/qq_39183034/article/details/121445755">https://blog.csdn.net/qq_39183034/article/details/121445755</a>))</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">二叉平衡搜索树(AVL):对于二叉搜索树的所有结点，其左右节点的高度之差不超过 1 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> KeyType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BSTNode</span>&#123;</span><br><span class="line">  KeyType key;</span><br><span class="line">  <span class="type">int</span> height;</span><br><span class="line">  ElemType data;</span><br><span class="line">  BSTNode *left,*right;</span><br><span class="line">  <span class="built_in">BSTNode</span>()=<span class="keyword">default</span>;</span><br><span class="line">  <span class="built_in">BSTNode</span>(KeyType k):<span class="built_in">key</span>(k),<span class="built_in">height</span>(<span class="number">1</span>),<span class="built_in">data</span>(<span class="number">0</span>),<span class="built_in">left</span>(<span class="literal">NULL</span>),<span class="built_in">right</span>(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;BSTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetHeight</span><span class="params">(BSTree *rt)</span></span>&#123;  <span class="comment">//得到高度 </span></span><br><span class="line">  <span class="keyword">if</span>(rt==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> rt-&gt;height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UpdateHeight</span><span class="params">(BSTree *rt)</span></span>&#123;  <span class="comment">//更新高度 </span></span><br><span class="line">  <span class="keyword">if</span>(rt==<span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line">  rt-&gt;height=<span class="built_in">max</span>(<span class="built_in">GetHeight</span>(rt-&gt;left),<span class="built_in">GetHeight</span>(rt-&gt;right))+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左左调整(bf=2)，右旋，左子节点变成父节点，其多余的右子节点变成降级节点的左子节点 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UpdateLL</span><span class="params">(BSTree *&amp;rt)</span></span>&#123;</span><br><span class="line">  BSTree *pl=rt-&gt;left;</span><br><span class="line">  rt-&gt;left=pl-&gt;right;</span><br><span class="line">  pl-&gt;right=rt;</span><br><span class="line">  rt=pl;</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt-&gt;left);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt-&gt;right);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//右右调整(bf=-2),左旋，右子节点变成父节点，其多余的左子节点变成降级节点的右子节点 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UpdateRR</span><span class="params">(BSTree *&amp;rt)</span></span>&#123;</span><br><span class="line">  BSTree *pr=rt-&gt;right;</span><br><span class="line">  rt-&gt;right=pr-&gt;left;</span><br><span class="line">  pr-&gt;left=rt;</span><br><span class="line">  rt=pr;</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt-&gt;left);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt-&gt;right);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左右调整(bf=2),先对左子节点左旋调整为左左型，再进行左左调整 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UpdateLR</span><span class="params">(BSTree *&amp;rt)</span></span>&#123;</span><br><span class="line">  <span class="built_in">UpdateRR</span>(rt-&gt;left);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt-&gt;left-&gt;left);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt-&gt;left-&gt;right);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt-&gt;left);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">UpdateLL</span>(rt);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt-&gt;left);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt-&gt;right);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//右左调整(bf=-2),先对右子节点右旋调整为右右型，再进行右右调整 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UpdateRL</span><span class="params">(BSTree *&amp;rt)</span></span>&#123;</span><br><span class="line">  <span class="built_in">UpdateLL</span>(rt-&gt;right);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt-&gt;right-&gt;left);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt-&gt;right-&gt;right);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt-&gt;right);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">UpdateRR</span>(rt);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt-&gt;left);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt-&gt;right);</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BSTree* <span class="title">SearchBST</span><span class="params">(BSTree *rt, KeyType k)</span></span>&#123;    <span class="comment">//查找</span></span><br><span class="line">  <span class="keyword">if</span>(rt==<span class="literal">NULL</span>||k==rt-&gt;key)<span class="keyword">return</span> rt;</span><br><span class="line">  <span class="keyword">if</span>(k&lt;rt-&gt;key)<span class="keyword">return</span> <span class="built_in">SearchBST</span>(rt-&gt;left,k);</span><br><span class="line">  <span class="keyword">else</span><span class="keyword">return</span> <span class="built_in">SearchBST</span>(rt-&gt;right,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">插入节点操作，先插入节点，再对其影响的祖先节点进行平衡调整，同时更新其节点高度。 </span></span><br><span class="line"><span class="comment">节点A的平衡调整可分为四种情况：</span></span><br><span class="line"><span class="comment">一、LL型：在A节点的左孩子的左子树上插入节点，导致A节点的平衡因子变为2。</span></span><br><span class="line"><span class="comment">可对其进行右旋，将A的左孩子代替A成为根节点，而原A的左孩子的右子树成为A的左子树。 </span></span><br><span class="line"><span class="comment">二、RR型：与LL型相反，是在A节点的右孩子的右子树上插入节点，导致A节点的平衡因子变为-2。</span></span><br><span class="line"><span class="comment">可对其进行左旋，将A的右孩子代替A成为根节点，而原A的右孩子的左子树成为A的右子树。</span></span><br><span class="line"><span class="comment">三、LR型：在A节点的左孩子的右子树上插入节点，导致A节点的平衡因子变为2。</span></span><br><span class="line"><span class="comment">可先对A的左孩子进行左旋操作（RR型），再对A节点进行右旋操作（LL型）。</span></span><br><span class="line"><span class="comment">四、RL型：在A节点的右孩子的左子树上插入节点，导致A节点的平衡因子变为-2。</span></span><br><span class="line"><span class="comment">可先对A的左孩子进行右旋操作（LL型），再对A节点进行左旋操作（RR型）。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertBST</span><span class="params">(BSTree *&amp;rt, KeyType k)</span></span>&#123;    <span class="comment">//插入 </span></span><br><span class="line">  <span class="keyword">if</span>(rt==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    rt=<span class="keyword">new</span> <span class="built_in">BSTNode</span>(k);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(k==rt-&gt;key)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="type">bool</span> res=<span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span>(k&lt;rt-&gt;key)&#123;</span><br><span class="line">    res=<span class="built_in">InsertBST</span>(rt-&gt;left,k);</span><br><span class="line">    <span class="keyword">if</span>(res&amp;&amp;<span class="built_in">GetHeight</span>(rt-&gt;left)-<span class="built_in">GetHeight</span>(rt-&gt;right)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(k&lt;rt-&gt;left-&gt;key)<span class="built_in">UpdateLL</span>(rt);<span class="comment">//左左</span></span><br><span class="line">      <span class="keyword">else</span><span class="built_in">UpdateLR</span>(rt);<span class="comment">//左右 </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    res=<span class="built_in">InsertBST</span>(rt-&gt;right,k);</span><br><span class="line">    <span class="keyword">if</span>(res&amp;&amp;<span class="built_in">GetHeight</span>(rt-&gt;left)-<span class="built_in">GetHeight</span>(rt-&gt;right)&lt;<span class="number">-1</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(k&gt;rt-&gt;right-&gt;key)<span class="built_in">UpdateRR</span>(rt);<span class="comment">//右右 </span></span><br><span class="line">      <span class="keyword">else</span><span class="built_in">UpdateRL</span>(rt);<span class="comment">//右左 </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(res) <span class="built_in">UpdateHeight</span>(rt);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteBST_</span><span class="params">(BSTree *&amp;rt, BSTree *pt)</span></span>&#123;    <span class="comment">//删除节点有左右子树时处理 </span></span><br><span class="line">  <span class="keyword">if</span>(rt-&gt;right==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    BSTree *p=rt;</span><br><span class="line">    pt-&gt;key=rt-&gt;key;</span><br><span class="line">    rt=rt-&gt;left;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">DeleteBST_</span>(rt-&gt;right,pt);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">GetHeight</span>(rt-&gt;left)-<span class="built_in">GetHeight</span>(rt-&gt;right)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="built_in">UpdateLL</span>(rt);<span class="comment">//左左 </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">UpdateHeight</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除节点操作。可先删除节点，再对其影响的祖先节点进行平衡调整，同时更新其节点的高度。 </span></span><br><span class="line"><span class="comment">同二叉排序树相同，删除节点分三种情况</span></span><br><span class="line"><span class="comment">一：被删除节点没有孩子节点，则直接删除即可</span></span><br><span class="line"><span class="comment">二：被删除节点只有一个孩子节点，则将其孩子节点代替删除节点的位置，随后删除节点即可</span></span><br><span class="line"><span class="comment">三：被删除节点有左右孩子，则可移花接木，即取左子树的最大值（也可取右子树的最小值）存放在被删除节点中，随后删除左子树的最大值的节点即可 </span></span><br><span class="line"><span class="comment">对于情况一，可同情况二处理</span></span><br><span class="line"><span class="comment">而对于平衡调整，需先更新其节点的高度，对于情况三处理时也需更新其节点高度，</span></span><br><span class="line"><span class="comment">再对其左右子树高度判断其为哪种平衡调整，调整时同时更新其节点高度 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteBST</span><span class="params">(BSTree *&amp;rt, KeyType k)</span></span>&#123;    <span class="comment">//删除</span></span><br><span class="line">  <span class="keyword">if</span>(rt==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="type">bool</span> res=<span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span>(rt-&gt;key==k)&#123;</span><br><span class="line">    <span class="keyword">if</span>(rt-&gt;left==<span class="literal">NULL</span>)&#123;</span><br><span class="line">      rt=rt-&gt;right;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rt-&gt;right==<span class="literal">NULL</span>)&#123;</span><br><span class="line">      rt=rt-&gt;left;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">DeleteBST_</span>(rt-&gt;left,rt);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k&lt;rt-&gt;key)&#123;</span><br><span class="line">    res=<span class="built_in">DeleteBST</span>(rt-&gt;left,k);</span><br><span class="line">    <span class="keyword">if</span>(res&amp;&amp;<span class="built_in">GetHeight</span>(rt-&gt;left)-<span class="built_in">GetHeight</span>(rt-&gt;right)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(k&lt;rt-&gt;left-&gt;key)<span class="built_in">UpdateLL</span>(rt);<span class="comment">//左左</span></span><br><span class="line">      <span class="keyword">else</span><span class="built_in">UpdateLR</span>(rt);<span class="comment">//左右</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res&amp;&amp;<span class="built_in">GetHeight</span>(rt-&gt;left)-<span class="built_in">GetHeight</span>(rt-&gt;right)&lt;<span class="number">-1</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(k&gt;rt-&gt;right-&gt;key)<span class="built_in">UpdateRR</span>(rt);<span class="comment">//右右 </span></span><br><span class="line">      <span class="keyword">else</span><span class="built_in">UpdateRL</span>(rt);<span class="comment">//右左 </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    res=<span class="built_in">DeleteBST</span>(rt-&gt;right,k);</span><br><span class="line">    <span class="keyword">if</span>(res&amp;&amp;<span class="built_in">GetHeight</span>(rt-&gt;left)-<span class="built_in">GetHeight</span>(rt-&gt;right)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(k&lt;rt-&gt;left-&gt;key)<span class="built_in">UpdateLL</span>(rt);<span class="comment">//左左</span></span><br><span class="line">      <span class="keyword">else</span><span class="built_in">UpdateLR</span>(rt);<span class="comment">//左右 </span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res&amp;&amp;<span class="built_in">GetHeight</span>(rt-&gt;left)-<span class="built_in">GetHeight</span>(rt-&gt;right)&lt;<span class="number">-1</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(k&gt;rt-&gt;right-&gt;key)<span class="built_in">UpdateRR</span>(rt);<span class="comment">//右右 </span></span><br><span class="line">      <span class="keyword">else</span><span class="built_in">UpdateRL</span>(rt);<span class="comment">//右左 </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(res)<span class="built_in">UpdateHeight</span>(rt);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InorderTraversal</span><span class="params">(BSTree *rt)</span></span>&#123;  <span class="comment">//中序遍历 </span></span><br><span class="line">  <span class="keyword">if</span>(rt==<span class="literal">NULL</span>)<span class="keyword">return</span>;</span><br><span class="line">  <span class="built_in">InorderTraversal</span>(rt-&gt;left);</span><br><span class="line">  cout&lt;&lt;rt-&gt;key&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">  <span class="built_in">InorderTraversal</span>(rt-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Judge</span><span class="params">(BSTree *rt)</span></span>&#123;    <span class="comment">//判断是否为AVL</span></span><br><span class="line">  <span class="keyword">if</span>(rt==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Judge</span>(rt-&gt;left)&amp;&amp;<span class="built_in">Judge</span>(rt-&gt;right)&amp;&amp;<span class="built_in">abs</span>(<span class="built_in">GetHeight</span>(rt-&gt;left)-<span class="built_in">GetHeight</span>(rt-&gt;right))&lt;=<span class="number">1</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LevelOrder</span><span class="params">(BSTree* root)</span> </span>&#123;  <span class="comment">//层序遍历 </span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">NULL</span>)  <span class="keyword">return</span>;</span><br><span class="line">    queue&lt;BSTree*&gt; que;</span><br><span class="line">    que.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    BSTree *rt;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;层序遍历：当前节点 (高度) = 左节点 右节点&quot;</span>&lt;&lt;endl; </span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">      n=que.<span class="built_in">size</span>();</span><br><span class="line">      <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        rt=que.<span class="built_in">front</span>();que.<span class="built_in">pop</span>();</span><br><span class="line">          cout&lt;&lt;rt-&gt;key&lt;&lt;<span class="string">&quot; (&quot;</span>&lt;&lt;rt-&gt;height&lt;&lt;<span class="string">&quot;)\t=\t&quot;</span>;</span><br><span class="line">          <span class="keyword">if</span>(rt-&gt;left)cout&lt;&lt;rt-&gt;left-&gt;key&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">          <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;#\t&quot;</span>;</span><br><span class="line">          <span class="keyword">if</span>(rt-&gt;right)cout&lt;&lt;rt-&gt;right-&gt;key&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">          <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;#\t&quot;</span>;</span><br><span class="line">          cout&lt;&lt;endl;</span><br><span class="line">          <span class="keyword">if</span>(rt-&gt;left)que.<span class="built_in">push</span>(rt-&gt;left);</span><br><span class="line">          <span class="keyword">if</span>(rt-&gt;right)que.<span class="built_in">push</span>(rt-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n=<span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">100</span>]=&#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">3</span>&#125;;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;插入顺序：&quot;</span>; </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">    cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">  cout&lt;&lt;endl; </span><br><span class="line">  BSTree *rt=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">    <span class="built_in">InsertBST</span>(rt,a[i]);</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;中序遍历：&quot;</span>;</span><br><span class="line">  <span class="built_in">InorderTraversal</span>(rt);</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;#############################&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="built_in">LevelOrder</span>(rt);</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;#############################&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">DeleteBST</span>(rt,a[i]);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;删除 &quot;</span>&lt;&lt;a[i]&lt;&lt;<span class="string">&quot;: &quot;</span>;</span><br><span class="line">    <span class="built_in">InorderTraversal</span>(rt);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="练习题目"><a href="#练习题目" class="headerlink" title="练习题目"></a>练习题目</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习题目</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exersises</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//7.3</span></span><br><span class="line">    <span class="comment">//6</span></span><br><span class="line">    <span class="comment">//中序遍历看结果</span></span><br><span class="line">    <span class="type">int</span> predt = <span class="number">-32767</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">num6</span><span class="params">(bstree bt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> b1,b2;</span><br><span class="line">        <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            b1 = <span class="built_in">num6</span>(bt-&gt;lchild);</span><br><span class="line">            <span class="keyword">if</span>(b1==<span class="number">0</span>||bt-&gt;data.key&lt;=predt)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//出现不符合中序顺序的说明不是二叉排序树</span></span><br><span class="line">            predt = bt-&gt;data.key;</span><br><span class="line">            b2 = <span class="built_in">num6</span>(bt-&gt;rchild);</span><br><span class="line">            <span class="keyword">return</span> b2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7</span></span><br><span class="line">    <span class="comment">//二叉排序树查找一次就下降一层，查找次数即为层数</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">num7</span><span class="params">(bstree bt,bstnode *p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        bstree t = bt;</span><br><span class="line">        <span class="keyword">if</span>(bt)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">while</span>(t-&gt;data.key!=p-&gt;data.key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(p-&gt;data.key&lt;t-&gt;data.key)</span><br><span class="line">                t = t-&gt;lchild;</span><br><span class="line">                <span class="keyword">else</span> t = t-&gt;rchild;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//8</span></span><br><span class="line">    <span class="comment">//递归后序遍历从叶节点开始一层一层往上反</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num8</span><span class="params">(bstree bt,<span class="type">int</span> &amp;balance,<span class="type">int</span> &amp;h)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> b1 =<span class="number">0</span>,br =<span class="number">0</span>,h1= <span class="number">0</span>,hr =<span class="number">0</span>;<span class="comment">//h1 ==hl,打错了</span></span><br><span class="line">        <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            h = <span class="number">0</span>,balance = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(bt-&gt;lchild==<span class="literal">NULL</span>&amp;&amp;bt-&gt;rchild==<span class="literal">NULL</span>)<span class="comment">//只有根节点返回1</span></span><br><span class="line">        &#123;</span><br><span class="line">            h = <span class="number">1</span>;balance = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">num8</span>(bt-&gt;lchild,b1,h1);</span><br><span class="line">            <span class="built_in">num8</span>(bt-&gt;rchild,b1,hr);</span><br><span class="line">            h = (h1&gt;hr?h1:hr)+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(h1-hr)&lt;<span class="number">2</span>)</span><br><span class="line">            balance =b1&amp;&amp;br;</span><br><span class="line">            <span class="keyword">else</span> balance = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//9</span></span><br><span class="line">    <span class="comment">//最小值在最左下，最大值在最右下</span></span><br><span class="line">    <span class="function">elemtype <span class="title">num9</span><span class="params">(bstnode *bt,<span class="type">int</span> flag)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//flag==1 找最小，否则找最大</span></span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">while</span>(bt-&gt;lchild)</span><br><span class="line">        bt = bt-&gt;lchild;</span><br><span class="line">        <span class="keyword">return</span> bt-&gt;data;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">while</span>(bt-&gt;rchild)</span><br><span class="line">        bt = bt-&gt;rchild;</span><br><span class="line">        <span class="keyword">return</span> bt-&gt;data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//10</span></span><br><span class="line">    <span class="comment">//根据左&lt;中&lt;右的特性，先遍历右然后根然后左</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num10</span><span class="params">(bstnode *bt,elemtype k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!bt)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(bt-&gt;rchild)</span><br><span class="line">            <span class="built_in">num10</span>(bt-&gt;rchild,k);</span><br><span class="line">        <span class="keyword">if</span>(bt-&gt;data.key&gt;=k.key)</span><br><span class="line">            cout&lt;&lt;bt-&gt;data.key&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(bt-&gt;lchild)</span><br><span class="line">            <span class="built_in">num10</span>(bt-&gt;lchild,k);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//11结构不一样就不写了，看书即可，</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>Acwing上开放寻址法和拉链法都有讲解过</p><p>开放寻址法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//开放寻址法N一般为数据范围的两到三倍，flag是不在范围内的数据用于判断位置是否为空</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200003</span>,flag = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"> <span class="comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="type">int</span> k = (x%N+N)%N;</span><br><span class="line">    <span class="keyword">while</span>(h[k]!=flag&amp;&amp;h[k]!=x)</span><br><span class="line">    &#123;</span><br><span class="line">        k++;</span><br><span class="line">        <span class="keyword">if</span>(k==N)</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,x;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> h);<span class="comment">//相当于初始化数组所有位为-1</span></span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        string op;</span><br><span class="line">        cin&gt;&gt;op&gt;&gt;x;</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">find</span>(x);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&quot;I&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            h[k] = x;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(h[k]!=flag)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拉连法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Project: 11_哈希表</span></span><br><span class="line"><span class="comment"> * File Created:Sunday, January 17th 2021, 2:11:23 pm</span></span><br><span class="line"><span class="comment"> * Author: Bug-Free</span></span><br><span class="line"><span class="comment"> * Problem:AcWing 840. 模拟散列表 拉链法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">3</span>;  <span class="comment">// 取大于1e5的第一个质数，取质数冲突的概率最小 可以百度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//* 开一个槽 h</span></span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;  <span class="comment">//邻接表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// c++中如果是负数 那他取模也是负的 所以 加N 再 %N 就一定是一个正数</span></span><br><span class="line">    <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = h[k];</span><br><span class="line">    h[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用上面同样的 Hash函数 讲x映射到 从 0-1e5 之间的数</span></span><br><span class="line">    <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[k]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e[i] == x) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);  <span class="comment">//将槽先清空 空指针一般用 -1 来表示</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        string op;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;I&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">insert</span>(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(x)) &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><ol><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；<br>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置；<br>重复步骤 2~5。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;插入排序&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="type">int</span> len = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> idx,ret;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;len;i++)<span class="comment">//从第二个元素开始选</span></span><br><span class="line">    &#123;</span><br><span class="line">        idx = i<span class="number">-1</span>;</span><br><span class="line">        ret = a[i];<span class="comment">//处理的元素</span></span><br><span class="line">        <span class="keyword">while</span>(idx&gt;=<span class="number">0</span>&amp;&amp;a[idx]&gt;ret)</span><br><span class="line">        &#123;</span><br><span class="line">            a[idx+<span class="number">1</span>] = a[idx];<span class="comment">//如果处理的元素应该排在索引前面时，让当前索引指针往后移腾出空位</span></span><br><span class="line">            idx--;</span><br><span class="line">        &#125;</span><br><span class="line">        a[idx+<span class="number">1</span>] = ret;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;排序后:&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入二分排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BinaryInsertSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;a)</span> </span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;插入二分排序&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="type">int</span> len = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=i<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> temp=a[i];</span><br><span class="line">        <span class="type">int</span> mid=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high) &#123;</span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid]&lt;temp) &#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                high=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>; j&gt;=low; j--) &#123;</span><br><span class="line">            a[j+<span class="number">1</span>]=a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i!=low)</span><br><span class="line">            a[low]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;排序后:&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>类似插入排序，先将整个待排序的记录序列分割成为若干子序列分别进行<a href="https://so.csdn.net/so/search?q=直接插入排序&amp;spm=1001.2101.3001.7020">直接插入排序</a>，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shell_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;希尔排序&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="type">int</span> len = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> i,j,gap;<span class="comment">//gap为步长</span></span><br><span class="line">    <span class="keyword">for</span>(gap = len/<span class="number">2</span>;gap&gt;<span class="number">0</span>;gap/=<span class="number">2</span>)<span class="comment">//每次范围缩小一半</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;gap;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j =i+gap;j&lt;len;j+=gap)<span class="comment">//本质上和插排差不多，只是排序范围上发生了变化，希尔是跳着选则排序对象的</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j]&lt;a[j-gap])<span class="comment">//当前值比上一个对象小</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> tmp=a[j];<span class="comment">//存储当前处理对象</span></span><br><span class="line">                    <span class="type">int</span> k = j-gap;<span class="comment">//准备动手将大于处理对象的数往后移动</span></span><br><span class="line">                    <span class="keyword">while</span>(k&gt;=<span class="number">0</span>&amp;&amp;a[k]&gt;tmp)</span><br><span class="line">                    &#123;</span><br><span class="line">                        a[k+gap] = a[k];</span><br><span class="line">                        k-=gap;</span><br><span class="line">                    &#125;</span><br><span class="line">                    a[k+gap] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;排序后:&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>像吐泡泡一样，从第一个开始和后一个两两比较交换，让符合条件的逐渐移动到查找范围的末端，在缩小一格查找范围，直至无交换说明完成了排序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;冒泡排序&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="type">int</span> len = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> idx = a[i];</span><br><span class="line">        <span class="type">bool</span> flag =<span class="literal">false</span>;<span class="comment">//若直至当前循环结束都没交换过说明已经有序，可提前结束</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =len<span class="number">-1</span>;j&gt;i;j--)<span class="comment">//从后往前开始换</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j<span class="number">-1</span>]&gt;a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j<span class="number">-1</span>],a[j]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;排序后:&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>找一个基准值，让比基准值大的都在右边，比基准值小的在基准值左边。在分别对基准值左右区间重复此操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="comment">//划分函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> pivot = a[l];<span class="comment">//基准值</span></span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r&amp;&amp;a[r]&gt;=pivot) r--;<span class="comment">//找到比基准小的值放在左边</span></span><br><span class="line">        a[l] = a[r];</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r&amp;&amp;a[l]&lt;=pivot) l++;</span><br><span class="line">        a[r] = a[l];</span><br><span class="line">    &#125;</span><br><span class="line">    a[l] = pivot;<span class="comment">//基准值放到正确位置</span></span><br><span class="line">    <span class="keyword">return</span> l;<span class="comment">//返回基准的最终位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pivotpos = <span class="built_in">partition</span>(a,l,r);</span><br><span class="line">        <span class="built_in">quick_sort</span>(a,l,pivotpos<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">quick_sort</span>(a,pivotpos+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>遍历找到最小或最大值，和最终位置交换后范围减一。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">select_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;选择排序&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> min_idx = i;<span class="comment">//记录最小元素位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =i+<span class="number">1</span>;j&lt;a.<span class="built_in">size</span>();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[min_idx]) min_idx = j;<span class="comment">//更新</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min_idx!=i) <span class="built_in">swap</span>(a[i],a[min_idx]);<span class="comment">//当前i所指元素不是最小值就交换</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>构造大根堆或小根堆实现排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/堆排序</span><br><span class="line"><span class="comment">//从小到大排序，构建大根堆</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a,<span class="type">int</span> i,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> parent =i;<span class="comment">//获取父节点</span></span><br><span class="line">    <span class="comment">// for(int child= 2*i;i&lt;=n;i*=2)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     if(i&lt;n&amp;&amp;a[i]&lt;a[i+1])</span></span><br><span class="line">    <span class="comment">//     i++;</span></span><br><span class="line">    <span class="comment">//     if(a[0]&gt;=a[i])</span></span><br><span class="line">    <span class="comment">//     break;</span></span><br><span class="line">    <span class="comment">//     else</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//      a[parent] =a[i];</span></span><br><span class="line">    <span class="comment">//      parent =i;   </span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// a[parent] = a[0];//被筛选接待你插入最终位置</span></span><br><span class="line">    <span class="type">int</span> child = <span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(child&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(child+<span class="number">1</span>&lt;n&amp;&amp;a[child]&lt;a[child+<span class="number">1</span>])</span><br><span class="line">        child++;<span class="comment">//比较左右大小，若左小于右，则较大值为右即child+1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a[parent]&lt;a[child])<span class="comment">//将最大值放到父节点上</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[parent],a[child]);</span><br><span class="line">            parent = child;</span><br><span class="line">        &#125;</span><br><span class="line">        child = child*<span class="number">2</span>+<span class="number">1</span>;<span class="comment">//下坠换行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构建大根堆</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_heap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =a.<span class="built_in">size</span>()/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">down</span>(a,i,a.<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;堆排序&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="built_in">build_heap</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(a[<span class="number">0</span>],a[i]);<span class="comment">//最大位置取出来放到最后</span></span><br><span class="line">        <span class="built_in">down</span>(a,<span class="number">0</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>它的基本思想是把待排序的元素分解成两个规模大致相等的子序列。如果不易分解，将得到的子序列继续分解，直到子序列中包含的元素个数为1。因为单个元素的序列本身就是有序的，此时便可以进行合并，从而得到一个完整的有序序列。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = left, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">temp</span><span class="params">(right - left + <span class="number">1</span>)</span></span>;<span class="comment">//辅助数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<span class="comment">//比较两个区域，把较小值插入辅助数组，另一个不动</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">            temp[k++] = arr[i++];<span class="comment">//插入后往后移动</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[k++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">        temp[k++] = arr[i++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (j &lt;= right) &#123;</span><br><span class="line">        temp[k++] = arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = left, k = <span class="number">0</span>; i &lt;= right; ++i, ++k) &#123;</span><br><span class="line">        arr[i] = temp[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">mergeSort</span>(arr, left, mid);</span><br><span class="line">    <span class="built_in">mergeSort</span>(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="built_in">merge</span>(arr, left, mid, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//归并测试</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_test</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;归并排序&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="type">int</span> l =<span class="number">0</span>,r = a.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">mergeSort</span>(a,l,r);</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exercises</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//8.3.3</span></span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="comment">//两边对称冒泡</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num1</span><span class="params">(vector&lt;<span class="type">int</span>&gt;a,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>,r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="type">bool</span> flag =<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            flag= <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;r;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(a[i],a[i+<span class="number">1</span>]);</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            r--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i =r;i&gt;l;i--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&lt;a[i<span class="number">-1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(a[i],a[i<span class="number">-1</span>]);</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//num2</span></span><br><span class="line">    <span class="comment">//快排的思想，找到一个偶数后和后一个数即奇数交换</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num2</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> i =<span class="number">0</span>,j=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j&amp;&amp;a[i]%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j&amp;&amp;a[j]%<span class="number">2</span>!=<span class="number">1</span>) j--;<span class="comment">//向后找到一个奇数元素</span></span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)</span><br><span class="line">                <span class="built_in">swap</span>(a[i],a[j]);</span><br><span class="line">            i++,j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="comment">//多加了步随机</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">num4</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> rand_idx = l+<span class="built_in">rand</span>()%(r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">swap</span>(a[rand_idx],a[l]);</span><br><span class="line">        <span class="type">int</span> pivot = a[l];</span><br><span class="line">        <span class="type">int</span> i =l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =l+<span class="number">1</span>;j&lt;=r;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;pivot)</span><br><span class="line">            <span class="built_in">swap</span>(a[++i],a[j]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(a[i],a[l]);<span class="comment">//将基准元素插入最终位置</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5</span></span><br><span class="line">    <span class="comment">//看解析更清楚</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">num5</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> pivot = a[l];</span><br><span class="line">        <span class="type">int</span> l_temp=l;</span><br><span class="line">        <span class="type">int</span> r_temp = r;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r&amp;&amp;a[r]&gt;=pivot)</span><br><span class="line">                --r;</span><br><span class="line">            a[l] =a[r];</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r&amp;&amp;a[l]&lt;=pivot)</span><br><span class="line">                ++l;</span><br><span class="line">            a[r] = a[l];</span><br><span class="line">        &#125;</span><br><span class="line">        a[l] =pivot;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//算法精髓</span></span><br><span class="line">        <span class="keyword">if</span>(l==k)</span><br><span class="line">        <span class="keyword">return</span> a[l];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;k)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">num5</span>(a,l_temp,l<span class="number">-1</span>,k);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">num5</span>(a,l+<span class="number">1</span>,r_temp,k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;red,white,blue&#125; color;<span class="comment">//枚举数组</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num6</span><span class="params">(color a[],<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> i =<span class="number">0</span>,j = <span class="number">0</span>,k=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;=k)</span><br><span class="line">        <span class="keyword">switch</span>(a[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> red :<span class="built_in">swap</span>(a[i],a[j]);i++;j++;<span class="keyword">break</span>;<span class="comment">//红色和i交换</span></span><br><span class="line">            <span class="keyword">case</span> white: j++;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> blue: <span class="built_in">swap</span>(a[j],a[k]);k--;<span class="comment">//蓝色和k交换</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.4</span></span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="comment">//链表省略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//5</span></span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">num4_5</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a,<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len%<span class="number">2</span>==<span class="number">0</span>)<span class="comment">//len为偶数，有一个单分支节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[len/<span class="number">2</span>]&gt;a[len])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = len/<span class="number">2</span><span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">                <span class="keyword">if</span>(a[i]&gt;a[i*<span class="number">2</span>]||a[i]&gt;a[<span class="number">2</span>*i]+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i =len/<span class="number">2</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">                <span class="keyword">if</span>(a[i]&gt;a[i*<span class="number">2</span>]||a[i]&gt;a[i*<span class="number">2</span>+<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="代码总览"><a href="#代码总览" class="headerlink" title="代码总览"></a>代码总览</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> max_size = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(vector&lt;<span class="type">int</span>&gt;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;当前数组为：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i :a)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;插入排序&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="type">int</span> len = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> idx,ret;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;len;i++)<span class="comment">//从第二个元素开始选</span></span><br><span class="line">    &#123;</span><br><span class="line">        idx = i<span class="number">-1</span>;</span><br><span class="line">        ret = a[i];<span class="comment">//处理的元素</span></span><br><span class="line">        <span class="keyword">while</span>(idx&gt;=<span class="number">0</span>&amp;&amp;a[idx]&gt;ret)</span><br><span class="line">        &#123;</span><br><span class="line">            a[idx+<span class="number">1</span>] = a[idx];<span class="comment">//如果处理的元素应该排在索引前面时，让当前索引指针往后移腾出空位</span></span><br><span class="line">            idx--;</span><br><span class="line">        &#125;</span><br><span class="line">        a[idx+<span class="number">1</span>] = ret;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;排序后:&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入二分排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BinaryInsertSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;a)</span> </span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;插入二分排序&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="type">int</span> len = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=i<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> temp=a[i];</span><br><span class="line">        <span class="type">int</span> mid=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high) &#123;</span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid]&lt;temp) &#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                high=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>; j&gt;=low; j--) &#123;</span><br><span class="line">            a[j+<span class="number">1</span>]=a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i!=low)</span><br><span class="line">            a[low]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;排序后:&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shell_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;希尔排序&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="type">int</span> len = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> i,j,gap;<span class="comment">//gap为步长</span></span><br><span class="line">    <span class="keyword">for</span>(gap = len/<span class="number">2</span>;gap&gt;<span class="number">0</span>;gap/=<span class="number">2</span>)<span class="comment">//每次范围缩小一半</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;gap;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j =i+gap;j&lt;len;j+=gap)<span class="comment">//本质上和插排差不多，只是排序范围上发生了变化，希尔是跳着选则排序对象的</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j]&lt;a[j-gap])<span class="comment">//当前值比上一个对象小</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> tmp=a[j];<span class="comment">//存储当前处理对象</span></span><br><span class="line">                    <span class="type">int</span> k = j-gap;<span class="comment">//准备动手将大于处理对象的数往后移动</span></span><br><span class="line">                    <span class="keyword">while</span>(k&gt;=<span class="number">0</span>&amp;&amp;a[k]&gt;tmp)</span><br><span class="line">                    &#123;</span><br><span class="line">                        a[k+gap] = a[k];</span><br><span class="line">                        k-=gap;</span><br><span class="line">                    &#125;</span><br><span class="line">                    a[k+gap] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;排序后:&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;冒泡排序&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="type">int</span> len = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> idx = a[i];</span><br><span class="line">        <span class="type">bool</span> flag =<span class="literal">false</span>;<span class="comment">//若直至当前循环结束都没交换过说明已经有序，可提前结束</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =len<span class="number">-1</span>;j&gt;i;j--)<span class="comment">//从后往前开始换</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j<span class="number">-1</span>]&gt;a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j<span class="number">-1</span>],a[j]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;排序后:&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="comment">//划分函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> pivot = a[l];<span class="comment">//基准值</span></span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r&amp;&amp;a[r]&gt;=pivot) r--;<span class="comment">//找到比基准小的值放在左边</span></span><br><span class="line">        a[l] = a[r];</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r&amp;&amp;a[l]&lt;=pivot) l++;</span><br><span class="line">        a[r] = a[l];</span><br><span class="line">    &#125;</span><br><span class="line">    a[l] = pivot;<span class="comment">//基准值放到正确位置</span></span><br><span class="line">    <span class="keyword">return</span> l;<span class="comment">//返回基准的最终位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pivotpos = <span class="built_in">partition</span>(a,l,r);</span><br><span class="line">        <span class="built_in">quick_sort</span>(a,l,pivotpos<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">quick_sort</span>(a,pivotpos+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">select_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;选择排序&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> min_idx = i;<span class="comment">//记录最小元素位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =i+<span class="number">1</span>;j&lt;a.<span class="built_in">size</span>();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[min_idx]) min_idx = j;<span class="comment">//更新</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min_idx!=i) <span class="built_in">swap</span>(a[i],a[min_idx]);<span class="comment">//当前i所指元素不是最小值就交换</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="comment">//从小到大排序，构建大根堆</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a,<span class="type">int</span> i,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> parent =i;<span class="comment">//获取父节点</span></span><br><span class="line">    <span class="comment">// for(int child= 2*i;i&lt;=n;i*=2)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     if(i&lt;n&amp;&amp;a[i]&lt;a[i+1])</span></span><br><span class="line">    <span class="comment">//     i++;</span></span><br><span class="line">    <span class="comment">//     if(a[0]&gt;=a[i])</span></span><br><span class="line">    <span class="comment">//     break;</span></span><br><span class="line">    <span class="comment">//     else</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//      a[parent] =a[i];</span></span><br><span class="line">    <span class="comment">//      parent =i;   </span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// a[parent] = a[0];//被筛选接待你插入最终位置</span></span><br><span class="line">    <span class="type">int</span> child = <span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(child&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(child+<span class="number">1</span>&lt;n&amp;&amp;a[child]&lt;a[child+<span class="number">1</span>])</span><br><span class="line">        child++;<span class="comment">//比较左右大小，若左小于右，则较大值为右即child+1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a[parent]&lt;a[child])<span class="comment">//将最大值放到父节点上</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[parent],a[child]);</span><br><span class="line">            parent = child;</span><br><span class="line">        &#125;</span><br><span class="line">        child = child*<span class="number">2</span>+<span class="number">1</span>;<span class="comment">//下坠换行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构建大根堆</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_heap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =a.<span class="built_in">size</span>()/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">down</span>(a,i,a.<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;堆排序&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="built_in">build_heap</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(a[<span class="number">0</span>],a[i]);<span class="comment">//最大位置取出来放到最后</span></span><br><span class="line">        <span class="built_in">down</span>(a,<span class="number">0</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = left, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">temp</span><span class="params">(right - left + <span class="number">1</span>)</span></span>;<span class="comment">//辅助数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<span class="comment">//比较两个区域，把较小值插入辅助数组，另一个不动</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">            temp[k++] = arr[i++];<span class="comment">//插入后往后移动</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[k++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">        temp[k++] = arr[i++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (j &lt;= right) &#123;</span><br><span class="line">        temp[k++] = arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = left, k = <span class="number">0</span>; i &lt;= right; ++i, ++k) &#123;</span><br><span class="line">        arr[i] = temp[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">mergeSort</span>(arr, left, mid);</span><br><span class="line">    <span class="built_in">mergeSort</span>(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="built_in">merge</span>(arr, left, mid, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//归并测试</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_test</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;归并排序&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="type">int</span> l =<span class="number">0</span>,r = a.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">mergeSort</span>(a,l,r);</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//练习题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exercises</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//8.3.3</span></span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="comment">//两边对称冒泡</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num1</span><span class="params">(vector&lt;<span class="type">int</span>&gt;a,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> l =<span class="number">0</span>,r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="type">bool</span> flag =<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            flag= <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;r;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(a[i],a[i+<span class="number">1</span>]);</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            r--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i =r;i&gt;l;i--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&lt;a[i<span class="number">-1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(a[i],a[i<span class="number">-1</span>]);</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//num2</span></span><br><span class="line">    <span class="comment">//快排的思想，找到一个偶数后和后一个数即奇数交换</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num2</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> i =<span class="number">0</span>,j=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j&amp;&amp;a[i]%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j&amp;&amp;a[j]%<span class="number">2</span>!=<span class="number">1</span>) j--;<span class="comment">//向后找到一个奇数元素</span></span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)</span><br><span class="line">                <span class="built_in">swap</span>(a[i],a[j]);</span><br><span class="line">            i++,j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="comment">//多加了步随机</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">num4</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> rand_idx = l+<span class="built_in">rand</span>()%(r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">swap</span>(a[rand_idx],a[l]);</span><br><span class="line">        <span class="type">int</span> pivot = a[l];</span><br><span class="line">        <span class="type">int</span> i =l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =l+<span class="number">1</span>;j&lt;=r;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;pivot)</span><br><span class="line">            <span class="built_in">swap</span>(a[++i],a[j]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(a[i],a[l]);<span class="comment">//将基准元素插入最终位置</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5</span></span><br><span class="line">    <span class="comment">//看解析更清楚</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">num5</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> pivot = a[l];</span><br><span class="line">        <span class="type">int</span> l_temp=l;</span><br><span class="line">        <span class="type">int</span> r_temp = r;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r&amp;&amp;a[r]&gt;=pivot)</span><br><span class="line">                --r;</span><br><span class="line">            a[l] =a[r];</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r&amp;&amp;a[l]&lt;=pivot)</span><br><span class="line">                ++l;</span><br><span class="line">            a[r] = a[l];</span><br><span class="line">        &#125;</span><br><span class="line">        a[l] =pivot;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//算法精髓</span></span><br><span class="line">        <span class="keyword">if</span>(l==k)</span><br><span class="line">        <span class="keyword">return</span> a[l];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;k)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">num5</span>(a,l_temp,l<span class="number">-1</span>,k);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">num5</span>(a,l+<span class="number">1</span>,r_temp,k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;red,white,blue&#125; color;<span class="comment">//枚举数组</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">num6</span><span class="params">(color a[],<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> i =<span class="number">0</span>,j = <span class="number">0</span>,k=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;=k)</span><br><span class="line">        <span class="keyword">switch</span>(a[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> red :<span class="built_in">swap</span>(a[i],a[j]);i++;j++;<span class="keyword">break</span>;<span class="comment">//红色和i交换</span></span><br><span class="line">            <span class="keyword">case</span> white: j++;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> blue: <span class="built_in">swap</span>(a[j],a[k]);k--;<span class="comment">//蓝色和k交换</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.4</span></span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="comment">//链表省略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//5</span></span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">num4_5</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a,<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len%<span class="number">2</span>==<span class="number">0</span>)<span class="comment">//len为偶数，有一个单分支节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[len/<span class="number">2</span>]&gt;a[len])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = len/<span class="number">2</span><span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">                <span class="keyword">if</span>(a[i]&gt;a[i*<span class="number">2</span>]||a[i]&gt;a[<span class="number">2</span>*i]+<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i =len/<span class="number">2</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">                <span class="keyword">if</span>(a[i]&gt;a[i*<span class="number">2</span>]||a[i]&gt;a[i*<span class="number">2</span>+<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a = &#123; <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">5</span>,<span class="number">1</span> &#125;;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">10</span>] = &#123; <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">5</span>,<span class="number">1</span> &#125;;</span><br><span class="line">    <span class="comment">//insert_sort(a);</span></span><br><span class="line">    <span class="comment">// BinaryInsertSort(a);</span></span><br><span class="line">    <span class="comment">// shell_sort(a);</span></span><br><span class="line">    <span class="comment">//bubble_sort(a);</span></span><br><span class="line">    <span class="comment">//quick_sort(a,0,a.size()-1);</span></span><br><span class="line">    <span class="comment">//select_sort(a);</span></span><br><span class="line">    <span class="comment">//heap_sort(a);</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">merge_test</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>2023年3月7日，数据结构一轮复习，完！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;王道数据结构算法实现&quot;&gt;&lt;a href=&quot;#王道数据结构算法实现&quot; class=&quot;headerlink&quot; title=&quot;王道数据结构算法实现&quot;&gt;&lt;/a&gt;王道数据结构算法实现&lt;/h1&gt;&lt;h1 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;header</summary>
      
    
    
    
    <category term="算法日志" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="数据结构与算法" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="刷题日志" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置事项.md</title>
    <link href="http://example.com/2023/01/07/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3-vscode%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2023/01/07/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3-vscode%E9%85%8D%E7%BD%AE/</id>
    <published>2023-01-07T07:11:40.000Z</published>
    <updated>2023-01-07T07:18:37.499Z</updated>
    
    <content type="html"><![CDATA[<p>之前因为Vscode输出中文乱码查了资料不管用最后重装了一次，发现乱码问题出现在Runner Code这个插件上，下面添加解决方法<br>在插件设置Executor Map编辑中修改下列代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ -fexec-charset=GBK -std=c++17 $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,</span><br></pre></td></tr></table></figure><br>但是这么做会导致万能头文件bits/stdc++.h 无法使用<br>若要使用可以将settings.json改为<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;files.defaultLanguage&quot;: &quot;cpp&quot;, // ctrl+N新建文件后默认的语言</span><br><span class="line">    &quot;editor.formatOnType&quot;: true, // 输入时就进行格式化，默认触发字符较少，分号可以触发</span><br><span class="line">    &quot;editor.snippetSuggestions&quot;: &quot;top&quot;, // snippets代码优先显示补全</span><br><span class="line"> </span><br><span class="line">    &quot;code-runner.runInTerminal&quot;: true, // 设置成false会在“输出”中输出，无法输入</span><br><span class="line">    &quot;code-runner.executorMap&quot;: &#123;</span><br><span class="line">        &quot;c&quot;: &quot;cd $dir &amp;&amp; clang $fileName -o $fileNameWithoutExt.exe -Wall -g -Og -static-libgcc -fcolor-diagnostics --target=x86_64-w64-mingw -std=c11 &amp;&amp; $dir$fileNameWithoutExt&quot;,</span><br><span class="line">        &quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt.exe &amp;&amp; $dir$fileNameWithoutExt&quot;// -Wall -g -Og -static-libgcc -fcolor-diagnostics --target=x86_64-w64-mingw -std=c++17 &amp;&amp; $dir$fileNameWithoutExt&quot;</span><br><span class="line">    &#125;, // 设置code runner的命令行</span><br><span class="line">    &quot;code-runner.saveFileBeforeRun&quot;: true, // run code前保存</span><br><span class="line">    &quot;code-runner.preserveFocus&quot;: true, // 若为false，run code后光标会聚焦到终端上。如果需要频繁输入数据可设为false</span><br><span class="line">    &quot;code-runner.clearPreviousOutput&quot;: false, // 每次run code前清空属于code runner的终端消息</span><br><span class="line"> </span><br><span class="line">    &quot;C_Cpp.clang_format_sortIncludes&quot;: true, // 格式化时调整include的顺序（按字母排序）</span><br><span class="line">    &quot;C_Cpp.intelliSenseEngine&quot;: &quot;Default&quot;, // 可以为Default或Tag Parser，后者较老，功能较简单。具体差别参考cpptools扩展文档</span><br><span class="line">    &quot;C_Cpp.errorSquiggles&quot;: &quot;Disabled&quot;, // 因为有clang的lint，所以关掉</span><br><span class="line">    &quot;C_Cpp.autocomplete&quot;: &quot;Disabled&quot;, // 因为有clang的补全，所以关掉</span><br><span class="line"> </span><br><span class="line">    &quot;clang.cflags&quot;: [ // 控制c语言静态检测的参数</span><br><span class="line">        &quot;--target=x86_64-w64-mingw&quot;,</span><br><span class="line">        &quot;-std=c11&quot;,</span><br><span class="line">        &quot;-Wall&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;clang.cxxflags&quot;: [ // 控制c++静态检测时的参数</span><br><span class="line">        &quot;--target=x86_64-w64-mingw&quot;,</span><br><span class="line">        &quot;-std=c++17&quot;,</span><br><span class="line">        &quot;-Wall&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;clang.completion.enable&quot;:true // 效果效果比cpptools要好</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>所谓鱼和熊掌不可兼得，用了这个runner code 的乱码就会出现</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前因为Vscode输出中文乱码查了资料不管用最后重装了一次，发现乱码问题出现在Runner Code这个插件上，下面添加解决方法&lt;br&gt;在插件设置Executor Map编辑中修改下列代码&lt;br&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;t</summary>
      
    
    
    
    <category term="环境搭建" scheme="http://example.com/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="VsCode" scheme="http://example.com/tags/VsCode/"/>
    
    <category term="环境设置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>/编程学习记录</title>
    <link href="http://example.com/2023/01/01/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-python-%E9%BB%91%E9%A9%AC/"/>
    <id>http://example.com/2023/01/01/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-python-%E9%BB%91%E9%A9%AC/</id>
    <published>2023-01-01T09:06:11.000Z</published>
    <updated>2023-01-01T09:08:21.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="黑马程序员Python-学习"><a href="#黑马程序员Python-学习" class="headerlink" title="黑马程序员Python 学习"></a>黑马程序员Python 学习</h1><p>Apache Spark是用于<strong>大规模数据</strong>（large-scala data）处理的<strong>统一（unified）分析引擎</strong>。简单来说，Spark是一款分布式的计算框架，用于调度成百上千的服务器集群，计算TB、PB乃至EB级别的海量数据。</p><h2 id="Spark编程模型"><a href="#Spark编程模型" class="headerlink" title="Spark编程模型"></a>Spark编程模型</h2><p>SparkContext类对象，是PySpark编程中一切功能的入口。<br>PySpark的编程，主要分为如下三大步骤：</p><ol><li>数据输入，通过SparkContext类对象的成员方法完成数据的读取操作，读取后得到RDD类对象。</li><li>数据处理计算，通过RDD类对象的成员方法完成各种数据计算的需求</li><li>数据输出，将处理完成后的RDD对象调用各种成员方法完成、写出文件、转换为list等操作</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建Sparkconf类对象</span></span><br><span class="line">cof = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#基于SparkConf对象创建Sparltext对象</span></span><br><span class="line">sc = SparkContext(conf=cof)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sc.version)</span><br><span class="line"><span class="comment">#停止SparkContxt对象运行</span></span><br><span class="line">sc.stop()</span><br></pre></td></tr></table></figure><h2 id="读取文件并输出内容"><a href="#读取文件并输出内容" class="headerlink" title="读取文件并输出内容"></a>读取文件并输出内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rdd = sc.textFile(<span class="string">&quot;D:/hello.txt&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(rdd.collect())</span><br></pre></td></tr></table></figure><h2 id="对数据进行查找处理的简单案例"><a href="#对数据进行查找处理的简单案例" class="headerlink" title="对数据进行查找处理的简单案例"></a>对数据进行查找处理的简单案例</h2><p>通过简单学习可以看出在处理数据上python确实比其他方便的多啊</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="comment">#设置环境</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>]  = <span class="string">&quot;D:/python/python3.10.6/python.exe&quot;</span></span><br><span class="line"><span class="comment">#创建Sparkconf类对象</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#基于SparkConf对象创建Sparltext对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line">rdd = sc.textFile(<span class="string">&quot;F:/cs资料库/Python/第15章资料/资料/orders.txt&quot;</span>)</span><br><span class="line"><span class="comment">#提取json字符串</span></span><br><span class="line">json_rdd = rdd.flatMap(<span class="keyword">lambda</span> x:x.split(<span class="string">&quot;|&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#将每一个json转为字典</span></span><br><span class="line">dict_rdd = json_rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x:json.loads(x))</span><br><span class="line"><span class="comment">#取出城市和销售额</span></span><br><span class="line">city_with_money = dict_rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x:(x[<span class="string">&#x27;areaName&#x27;</span>], <span class="built_in">int</span>(x[<span class="string">&#x27;money&#x27;</span>])))</span><br><span class="line">city_res_rdd = city_with_money.reduceByKey(<span class="keyword">lambda</span> a,b:a+b)</span><br><span class="line">res1 = city_res_rdd.sortBy(<span class="keyword">lambda</span>  x:x[<span class="number">1</span>],ascending=<span class="literal">False</span>, numPartitions=<span class="number">1</span>)<span class="comment">#按照销售额大小排序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;需求1结果：&quot;</span>,res1.collect())</span><br><span class="line"></span><br><span class="line"><span class="comment">#需求2：全部城市商品售卖目录</span></span><br><span class="line">categroy_rdd = dict_rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x[<span class="string">&#x27;category&#x27;</span>]).distinct()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;需求2结果：&quot;</span>,categroy_rdd.collect())</span><br><span class="line"></span><br><span class="line"><span class="comment">#需求3：查看北京有什么商品</span></span><br><span class="line">Bj_data_rdd= dict_rdd.<span class="built_in">filter</span>(<span class="keyword">lambda</span>  x:x[<span class="string">&#x27;areaName&#x27;</span>]==<span class="string">&#x27;北京&#x27;</span>)</span><br><span class="line">res3 = Bj_data_rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span>  x:x[<span class="string">&#x27;category&#x27;</span>]).distinct()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;需求3结果：&quot;</span>,res3.collect())</span><br><span class="line"><span class="comment">#print(dict_rdd.collect())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#停止SparkContxt对象运行</span></span><br><span class="line">sc.stop()</span><br></pre></td></tr></table></figure><h2 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h2><p>使用spark输出依靠Hadoop,注意如果已经存在文件会报错<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="comment">#设置环境</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;HADOOP_HOME&#x27;</span>] = <span class="string">&quot;F:/Python_hadoop/hadoop-3.0.0&quot;</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>]  = <span class="string">&quot;D:/python/python3.10.6/python.exe&quot;</span></span><br><span class="line"><span class="comment">#创建Sparkconf类对象</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.default.parallelism&quot;</span>,<span class="string">&quot;1&quot;</span>) <span class="comment">#避免分区过多导致输出过多文件</span></span><br><span class="line"><span class="comment">#基于SparkConf对象创建Sparltext对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">rdd.saveAsTextFile(<span class="string">&quot;D:/output1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止SparkContxt对象运行</span></span><br><span class="line">sc.stop()</span><br></pre></td></tr></table></figure></p><p>综合案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="comment">#设置环境</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;HADOOP_HOME&#x27;</span>] = <span class="string">&quot;F:/Python_hadoop/hadoop-3.0.0&quot;</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>]  = <span class="string">&quot;D:/python/python3.10.6/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建Sparkconf类对象</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.default.parallelism&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="comment">#基于SparkConf对象创建Sparltext对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">#读取文件转换成RDD</span></span><br><span class="line">file_rdd = sc.textFile(<span class="string">&quot;F:/cs资料库/Python/第15章资料/资料/search_log.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#需求1：热门搜索时间段top3</span></span><br><span class="line">res1 = file_rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x.split(<span class="string">&quot;\t&quot;</span>)).\</span><br><span class="line">    <span class="built_in">map</span>(<span class="keyword">lambda</span> x:x[<span class="number">0</span>][:<span class="number">2</span>]).\</span><br><span class="line">    <span class="built_in">map</span>(<span class="keyword">lambda</span> x:(x,<span class="number">1</span>)).\</span><br><span class="line">    reduceByKey(<span class="keyword">lambda</span> a,b:a+b).\</span><br><span class="line">    sortBy(<span class="keyword">lambda</span> x:x[<span class="number">1</span>],ascending=<span class="literal">False</span>,numPartitions=<span class="number">1</span>).take(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#上面等价于下面这种写法</span></span><br><span class="line"><span class="comment"># file_rdd.map(lambda x:(x.split(&quot;\t&quot;)[0][:2],1)).\</span></span><br><span class="line"><span class="comment">#     reduceByKey(lambda a,b:a+b).\</span></span><br><span class="line"><span class="comment">#     sortBy(lambda x:x[1],ascending=False,numPartitions=1).take(3)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;需求1：&quot;</span>,res1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#需求2：热门搜索词Top3</span></span><br><span class="line">res2 = file_rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: (x.split(<span class="string">&quot;\t&quot;</span>)[<span class="number">2</span>],<span class="number">1</span>)).\</span><br><span class="line">    reduceByKey(<span class="keyword">lambda</span> a,b:a+b).\</span><br><span class="line">    sortBy(<span class="keyword">lambda</span> x:x[<span class="number">1</span>],ascending=<span class="literal">False</span>,numPartitions=<span class="number">1</span>).\</span><br><span class="line">    take(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;需求2：&quot;</span>,res2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#需求三 统计黑马程序员关键字在什么时段搜索最多</span></span><br><span class="line">res3 = file_rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x.split(<span class="string">&quot;\t&quot;</span>)).\</span><br><span class="line">    <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x[<span class="number">2</span>] == <span class="string">&#x27;黑马程序员&#x27;</span>).\</span><br><span class="line">    <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x[<span class="number">0</span>][:<span class="number">2</span>],<span class="number">1</span>).\</span><br><span class="line">    reduceByKey(<span class="keyword">lambda</span> a, b: a+b).\</span><br><span class="line">    sortBy(<span class="keyword">lambda</span> x: x[<span class="number">1</span>], ascending=<span class="literal">False</span>,numPartitions=<span class="number">1</span>).take(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;需求3：&quot;</span>, res3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#需求4 将数据转换为JSON写到文件中</span></span><br><span class="line">file_rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x.split(<span class="string">&quot;\t&quot;</span>)).\</span><br><span class="line">    <span class="built_in">map</span>(<span class="keyword">lambda</span> x:&#123;<span class="string">&quot;time&quot;</span>:x[<span class="number">0</span>],<span class="string">&quot;user_id&quot;</span>:x[<span class="number">1</span>],<span class="string">&quot;key_word&quot;</span>:x[<span class="number">2</span>],<span class="string">&quot;rank1&quot;</span>:x[<span class="number">3</span>],<span class="string">&quot;rank2&quot;</span>:x[<span class="number">4</span>],<span class="string">&quot;url&quot;</span>:x[<span class="number">5</span>]&#125;).\</span><br><span class="line">    saveAsTextFile(<span class="string">&quot;D:/output_json&quot;</span>)</span><br><span class="line"></span><br><span class="line">sc.stop()</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>在函数嵌套的前提下，内部函数使用了外部函数的变量，并且外部函数返回了内部函数，我们把这个使用外部函数变量的内部函数称为闭包。可以避免全局变量被修改的风险<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用闭包实现存钱取钱小案例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">account_creat</span>(<span class="params">initial_amount = <span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">atm</span>(<span class="params">num,deposit=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> initial_amount</span><br><span class="line">        <span class="keyword">if</span> deposit:</span><br><span class="line">            initial_amount+=num</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;存款:<span class="subst">&#123;num&#125;</span>,账户余额:<span class="subst">&#123;initial_amount&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            initial_amount-=num</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;存款:<span class="subst">&#123;num&#125;</span>,账户余额:<span class="subst">&#123;initial_amount&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> atm</span><br><span class="line">atm = account_creat()</span><br><span class="line">atm(<span class="number">100</span>)</span><br><span class="line">atm(<span class="number">200</span>)</span><br><span class="line">atm(<span class="number">100</span>,deposit=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></p><p>优点，使用闭包可以让我们得到：<br>无需定义全局变量即可实现通过函数，持续的访问、修改某个值<br>闭包使用的变量的所用于在函数内，难以被错误的调用修改</p><p>缺点：<br>由于内部函数持续引用外部函数的值，所以会导致这一部分内存空间不被释放，一直占用内存</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>装饰器其实也是一种闭包， 其功能就是在不破坏目标函数原有的代码和功能的前提下，为目标函数增加新功能。<br>实例写法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我睡觉了&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我起床了&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;zzzzz.....&quot;</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep()</span><br></pre></td></tr></table></figure></p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>设计模式是一种<strong>编程套路</strong>，可以极大的方便程序的开发。最常见、最经典的设计模式，就是我们所学习的面向对象了。除了面向对象外，在编程中也有很多既定的套路可以方便开发，我们称之为设计模式：单例、工厂模式建造者、责任链、状态、备忘录、解释器、访问者、观察者、中介、模板、代理模式等等模式。</p><p><strong>单例模式</strong>（Singleton Pattern）是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。<br>在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。<br>定义: 保证一个类只有一个实例,并提供一个访问它的全局访问点<br>适用场景:当一个类只能有一个实例，而客户可以从一个众所周知的访问点访问它时。</p><p>当需要大量创建一个类的实例的时候， 可以使用<strong>工厂模式</strong>。即，从原生的使用类的构造去创建对象的形式迁移到，基于工厂提供的方法去创建对象的形式。</p><p>•使用工厂类的get_person()方法去创建具体的类对象</p><p>优点：</p><p>•大批量创建对象的时候有统一的入口，易于代码维护</p><p>•当发生修改，仅修改工厂类的创建方法即可</p><p>•符合现实世界的模式，即由工厂来制作产品（对象）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">worker</span>(<span class="title class_ inherited__">person</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">person</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">teacher</span>(<span class="title class_ inherited__">person</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">personfactory</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_person</span>(<span class="params">self,p_type</span>):</span><br><span class="line">        <span class="keyword">if</span> p_type == <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> worker()</span><br><span class="line">        <span class="keyword">elif</span> p_type == <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> student()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> teacher()</span><br><span class="line"></span><br><span class="line">pf = personfactory()</span><br><span class="line">worker = pf.get_person(<span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>现代操作系统比如Mac OS X，UNIX，Linux，Windows等，都是支持“多任务”的操作系统。<br>进程： 就是一个程序，运行在系统之上，那么便称之这个程序为一个运行进程，并分配进程ID方便系统管理。<br>线程：线程是归属于进程的，一个进程可以开启多个线程，执行不同的工作，是进程的实际工作最小单位。</p><p>注意：进程之间是内存隔离的， 即不同的进程拥有各自的内存空间。 线程之间是内存共享的，线程是属于进程的，一个进程内的多个线程之间是共享这个进程所拥有的内存空间的。</p><p>多线程编程案例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sing&gt;&gt;&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;dance&lt;&lt;&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sing_thread=threading.Thread(target=sing)</span><br><span class="line">    dance_thread = threading.Thread(target=dance)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#让线程运行</span></span><br><span class="line">    sing_thread.start()</span><br><span class="line">    dance_thread.start()</span><br></pre></td></tr></table></figure></p><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="服务端开发"><a href="#服务端开发" class="headerlink" title="服务端开发"></a>服务端开发</h3><p><strong>socket</strong> (简称 套接字) 是进程之间通信一个工具，好比现实生活中的插座，所有的家用电器要想工作都是基于插座进行，进程之间想要进行网络通信需要socket。<br>Socket负责进程之间的网络数据传输，好比数据的搬运工。</p><p>2个进程之间通过Socket进行相互通讯，就必须有服务端和客户端Socket服务端：等待其它进程的连接、可接受发来的消息、可以回复消息；Socket客户端：主动连接服务端、可以发送消息、可以接收回复<br>客户端<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建Socket对象</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">socket_server = socket.socket()</span><br><span class="line"><span class="comment">#绑定Ip地址和端口</span></span><br><span class="line">socket_server.bind((<span class="string">&quot;localhost&quot;</span>, <span class="number">8888</span>))</span><br><span class="line"><span class="comment">#监听端口</span></span><br><span class="line">socket_server.listen(<span class="number">1</span>) <span class="comment">#表示接收数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#等待客户端连接</span></span><br><span class="line"><span class="comment">#result = socket_server.accept()</span></span><br><span class="line"><span class="comment"># conn = result[0] #客户端和服务端的连接对象</span></span><br><span class="line"><span class="comment"># address = result[1] #客户端的地址信息</span></span><br><span class="line">conn,address = socket_server.accept() <span class="comment">#等于上面的写法</span></span><br><span class="line"><span class="comment">#accept()是阻塞的方法-等待客户段连接如果没有连接就卡在这里不执行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;接收到了客户端的连接，客户端消息是:<span class="subst">&#123;address&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 接收客户端信息，要使用客户端和服务端本次连接对象，而非socket——sever对象</span></span><br><span class="line">    data : <span class="built_in">str</span>= conn.recv(<span class="number">1024</span>).decode(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;客户端发来的消息是:<span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#发送回复消息</span></span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&quot;请输入回复消息&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> msg == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    conn.send(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭连接</span></span><br><span class="line">conn.close()</span><br><span class="line">socket_server.close()</span><br></pre></td></tr></table></figure><br>服务端<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建Socket对象</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">socket_client = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment">#连接到服务器</span></span><br><span class="line">socket_client.connect((<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">#发送消息</span></span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&quot;请输入发送给服务端的消息:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> msg==<span class="string">&quot;quit&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    socket_client.send(msg.encode(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#接收返回消息</span></span><br><span class="line">    recv_data = socket_client.recv(<span class="number">1024</span>)<span class="comment">#1024是缓冲区的大小</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;服务端回复的消息是:<span class="subst">&#123;recv_data.decode(<span class="string">&#x27;UTF-8&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">socket_client.close()</span><br></pre></td></tr></table></figure></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式，又称规则表达式（Regular Expression），是使用单个字符串来描述、匹配某个句法规则的字符串，常被用来检索、替换那些符合某个模式（规则）的文本。简单来说，正则表达式就是使用：字符串定义规则，并通过规则去验证字符串是否匹配。<br>Python正则表达式，使用re模块，并基于re模块中三个基础方法来做正则匹配。分别是：match、search、findall 三个基础方法<br><strong>元字符匹配</strong><br>点击查看<a href="https://blog.csdn.net/guo_qingxia/article/details/113979135">大佬说明</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;python itheima@@sl;djko1112328sjp@2&#x27;</span></span><br><span class="line">result = re.findall(<span class="string">&#x27;\d&#x27;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><br>相对复杂的案例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#匹配只有字母和数字组成长度6-10位</span></span><br><span class="line">s = <span class="string">&#x27;python itheima@@sl;djko1112328sjp@2&#x27;</span></span><br><span class="line">r = <span class="string">&#x27;^[0-9a-zA-Z]&#123;6,10&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(r,s))</span><br></pre></td></tr></table></figure></p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>这个就不写了，具体应该能在Acwing-基础篇里有，毕竟是算法里比较重要的了还是多练为好。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前是23年1月1日元旦节的下午，艰苦的一年终于要开始了，希望我能坚持下去这一年实现我考上一个好研究生的梦想。在未来这一年里可能不会学除了考研外的东西了，黑马的Python应该还没有鹿丸，等以后有机会再来写吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;黑马程序员Python-学习&quot;&gt;&lt;a href=&quot;#黑马程序员Python-学习&quot; class=&quot;headerlink&quot; title=&quot;黑马程序员Python 学习&quot;&gt;&lt;/a&gt;黑马程序员Python 学习&lt;/h1&gt;&lt;p&gt;Apache Spark是用于&lt;strong</summary>
      
    
    
    
    <category term="学习日志" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="学习日志" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ACwing—算法基础</title>
    <link href="http://example.com/2022/12/25/%E7%AE%97%E6%B3%95-AcWing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/12/25/%E7%AE%97%E6%B3%95-AcWing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</id>
    <published>2022-12-25T12:00:29.000Z</published>
    <updated>2023-03-04T13:17:53.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AcWing算法基础课学习记录"><a href="#AcWing算法基础课学习记录" class="headerlink" title="AcWing算法基础课学习记录"></a>AcWing算法基础课学习记录</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>自学算法确实不能记得很牢啊，学晚不过一年很多基础数据结构都忘了。为了兼顾考研学习花了大价钱149买了y总的算法基础课学习。希望能有不错的收获。虽然叫算法基础课但是其实课程并不是那种数据结构入门的零基础课，许多东西其实都是一般课程里没有的。</p><h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="排序、二分"><a href="#排序、二分" class="headerlink" title="排序、二分"></a>排序、二分</h2><p>快速排序<br>这题不知道为什么我写的就会超时，用模板的就不会，不过都无伤大雅。快排思想就是选择一个对照值将比对照值大的放到一边，比对照值小的放到另一边。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100010</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> i = l<span class="number">-1</span>,j =r+<span class="number">1</span>,k = a[l+r&gt;&gt;<span class="number">1</span>];<span class="comment">//注意如果是int i=l,j=r;可能会产生边界问题</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(a[++i]&lt;k);<span class="comment">//很关键换成i++可能产生边界问题</span></span><br><span class="line">        <span class="keyword">while</span>(a[--j]&gt;k);<span class="comment">//查找右半部分比中间数小的数</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)</span><br><span class="line">        <span class="built_in">swap</span>(a[i],a[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quickSort</span>(a,l,j);</span><br><span class="line">    <span class="built_in">quickSort</span>(a,j+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quickSort</span>(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第k个数<br>其实就是加了个输出而已</p><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">quick_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;q[m<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>归并排序<br>归并的思想就是分治，将大问题换成等分的小问题再来解决处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> q[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid =(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">Merge_sort</span>(a,l,mid);<span class="comment">//递归分为不同等分组</span></span><br><span class="line">    <span class="built_in">Merge_sort</span>(a,mid+<span class="number">1</span>,r);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i =l,k=<span class="number">0</span>,j =mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;a[j])</span><br><span class="line">        &#123;</span><br><span class="line">            q[k] = a[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            q[k] =a[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid) q[k++] =a[i++];<span class="comment">//当一组还有剩余另一组已经为空的时候直接将剩余的加到排序队里就好了</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r) q[k++] =a[j++];</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>, i = l; i &lt;= r; j++, i++) a[i] = q[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,a[<span class="number">1000005</span>];</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">Merge_sort</span>(a,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逆序对的数量<br>用了归并排序来查找逆序对<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000010</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid =(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(a,l,mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(a,mid+<span class="number">1</span>,r);<span class="comment">//排序是为了查找时更加方便</span></span><br><span class="line">    <span class="type">int</span> tmp[r - l + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> i =<span class="number">0</span>,j =l,k =mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=mid&amp;&amp;k&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[j]&lt;=a[k]) tmp[i++] = a[j++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tmp[i++] = a[k++];</span><br><span class="line">            ans+=(mid-j+<span class="number">1</span>);<span class="comment">//这里表示如果大组的A数与小组其中一个数符合逆序意味着A数与小组所有数都能组成逆序对</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=mid) tmp[i++] =a[j++];</span><br><span class="line">    <span class="keyword">while</span>(k&lt;=r) tmp[i++] = a[k++];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x =l,y = <span class="number">0</span>;x&lt;=r;x++,y++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[x] = tmp[y];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">merge_sort</span>(a,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数的范围</p><p>这题思路是用两个二分分别开始和结尾</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (q[mid] &gt;= x) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (q[l] != x) cout &lt;&lt; <span class="string">&quot;-1 -1&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; l &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (q[mid] &lt;= x) l = mid;</span><br><span class="line">                <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cout &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数的三次方<br>这种题用二分能优化时间复杂度到Olngn，y总的这种写法更是简洁<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">double</span> l =<span class="number">-10000</span>,r =<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">while</span>(r - l&gt;<span class="number">1e-8</span>)<span class="comment">//这个1e-8是控制精度用的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> mid =(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(mid*mid*mid&gt;=n) r =mid;</span><br><span class="line"><span class="keyword">else</span> l =mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%1f\n&quot;</span>,l);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h2><p>高精度简而言之就是高位数字之间的运算，细节就是用数组储存每一位数字方便运算，注意从个位数到高位依次放在数组的首位到末位。如123456在数组中是(6、5、4、3、2、1)的样式储存</p><p>高精度加法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;a,vector&lt;<span class="type">int</span>&gt;&amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;c;</span><br><span class="line">    <span class="type">int</span> t =<span class="number">0</span>;<span class="comment">//每位数字总和</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>()||i&lt;b.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;a.<span class="built_in">size</span>()) t+=a[i];</span><br><span class="line">        <span class="keyword">if</span>(i&lt;b.<span class="built_in">size</span>()) t+=b[i];</span><br><span class="line">        </span><br><span class="line">        c.<span class="built_in">push_back</span>(t%<span class="number">10</span>);</span><br><span class="line">        t/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t) c.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a,b;</span><br><span class="line">    string c,d;</span><br><span class="line">    cin&gt;&gt;c&gt;&gt;d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =c.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) a.<span class="built_in">push_back</span>(c[i]-<span class="string">&#x27;0&#x27;</span>);<span class="comment">//数组首位放的是数字的个位，方便位数变大好进位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =d.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) b.<span class="built_in">push_back</span>(d[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> ans = <span class="built_in">add</span>(a,b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =ans.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) cout&lt;&lt;ans[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>高精度减法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;a,vector&lt;<span class="type">int</span>&gt;&amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.<span class="built_in">size</span>()!=b.<span class="built_in">size</span>()) <span class="keyword">return</span> a.<span class="built_in">size</span>()&gt;b.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>(); i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span>(a[i] != b[i])</span><br><span class="line">            <span class="keyword">return</span> a[i] &gt; b[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;a,vector&lt;<span class="type">int</span>&gt;&amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;c;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>,t =<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>()||i&lt;b.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = a[i]-t;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;b.<span class="built_in">size</span>())  t-=b[i];</span><br><span class="line">        c.<span class="built_in">push_back</span>((t+<span class="number">10</span>)%<span class="number">10</span>);<span class="comment">//这个相当于运算了t-b[i]后的情况，如果t&gt;=0则运算后还是 == t的值，否则就是10-t后的值</span></span><br><span class="line">        <span class="keyword">if</span>(t&lt;<span class="number">0</span>) t =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t =<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//if(t) c.push_back(1);</span></span><br><span class="line">    <span class="keyword">while</span>(c.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; c.<span class="built_in">back</span>() == <span class="number">0</span>) c.<span class="built_in">pop_back</span>();  <span class="comment">//去掉前导0</span></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a,b;</span><br><span class="line">    string c,d;</span><br><span class="line">    cin&gt;&gt;c&gt;&gt;d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =c.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) a.<span class="built_in">push_back</span>(c[i]-<span class="string">&#x27;0&#x27;</span>);<span class="comment">//数组首位放的是数字的个位，方便位数变大好进位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =d.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) b.<span class="built_in">push_back</span>(d[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">cmp</span>(a,b)) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> C = <span class="built_in">add</span>(a, b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> C = <span class="built_in">add</span>(b, a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>高精度算法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&amp;a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;ans;</span><br><span class="line">    <span class="type">int</span> t =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;a.<span class="built_in">size</span>()||t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;a.<span class="built_in">size</span>()) t += a[i]*b;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(t%<span class="number">10</span>);</span><br><span class="line">        t/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =ans.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i]==<span class="number">0</span>) ans.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; a;</span><br><span class="line">    string c;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    cin&gt;&gt;c&gt;&gt;d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =c.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) a.<span class="built_in">push_back</span>(c[i]-<span class="string">&#x27;0&#x27;</span>);<span class="comment">//数组首位放的是数字的个位，方便位数变大好进位</span></span><br><span class="line">    <span class="keyword">auto</span> ans = <span class="built_in">mul</span>(a,d);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =ans.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) cout&lt;&lt;ans[i];</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>高进度除法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;a,<span class="type">int</span> b,<span class="type">int</span> &amp;r)</span><span class="comment">//r是余数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) <span class="comment">//与其他不同除法从高位开始算</span></span><br><span class="line">    &#123;</span><br><span class="line">        r = r*<span class="number">10</span>+a[i];</span><br><span class="line">        ans.<span class="built_in">push_back</span>(r/b);</span><br><span class="line">        r%=b; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span>(ans.<span class="built_in">size</span>()&gt;<span class="number">1</span>&amp;&amp;ans.<span class="built_in">back</span>()==<span class="number">0</span>) ans.<span class="built_in">pop_back</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">    string c;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    cin&gt;&gt;c&gt;&gt;d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =c.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) a.<span class="built_in">push_back</span>(c[i]-<span class="string">&#x27;0&#x27;</span>);<span class="comment">//数组首位放的是数字的个位，方便位数变大好进位</span></span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> ans = <span class="built_in">mul</span>(a,d,r);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =ans.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) </span><br><span class="line">    cout&lt;&lt;ans[i];</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;endl&lt;&lt;r&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><p>前缀和——假如原数组: a[1], a[2], a[3], a[4], a[5], …, a[n]；前缀和 Si为数组的前 i项和；即前缀和: S[i] = a[1] + a[2] + a[3] + … + a[i]<br>前缀和可以在O(1)的时间复杂度下求出范围内的数目之和，前提是经过On的数组遍历<br>注意：前缀和下标从1开始，s[0]=0</p><p>前缀和<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> s[N],a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    cin&gt;&gt; a[i]; <span class="comment">// scanf比cin快一倍，比赛技巧</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++) s[i] = s[i<span class="number">-1</span>]+a[i];<span class="comment">//构建前缀和数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l ,r;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        cout&lt;&lt;s[r]-s[l<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>二维矩阵也可以使用前缀和<img src="/2022/12/25/%E7%AE%97%E6%B3%95-AcWing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/image-20221230204137061.png" alt="image-20221230204137061">减去s[i-1,j-1]是因为两次相加后会多出一份重复的s[i-1,j-1]，故需要减去一次</p><p><img src="/2022/12/25/%E7%AE%97%E6%B3%95-AcWing-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/image-20221230204149291.png" alt="image-20221230204149291"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">1010</span>;<span class="comment">//不能开太大否则报错Error: value of 000003a35758f6b3 too large for field of 4 bytes at 00000000000000f3</span></span><br><span class="line"><span class="type">int</span> n,m,q;</span><br><span class="line"><span class="type">int</span> a[N][N],s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            cin&gt;&gt;a[i][j];</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            s[i][j] = s[i][j<span class="number">-1</span>]+s[i<span class="number">-1</span>][j] - s[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i][j];<span class="comment">//固定公式,但也需要理解</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1,y1,x2,y2;</span><br><span class="line">        cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class="line">        <span class="type">int</span> res = s[x2][y2]-s[x1<span class="number">-1</span>][y2]- s[x2][y1<span class="number">-1</span>]+s[x1<span class="number">-1</span>][y1<span class="number">-1</span>];</span><br><span class="line">        cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h3><p>差分也很巧妙啊，就是利用前缀和在O1复杂度内使某一段范围全部加上某个数字。<br>即设范围l~r，从第l项开始是数组全部加x，再对第r个以后的数组全部减x就完成了某一段值加x的操作了。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n,m,q;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span><span class="comment">//相当于标记了从哪里开始加x，从哪里后开始减去x</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[l]+=x;</span><br><span class="line">    b[r+<span class="number">1</span>]-=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i  = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">insert</span>(i,i,a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l,r,x;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r&gt;&gt;x;</span><br><span class="line">        <span class="built_in">insert</span>(l,r,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++) b[i]+=b[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++) cout&lt;&lt;b[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>大佬的极简写法,Acwing加强数据后能过<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,a,b,c,f[<span class="number">1010100</span>]=&#123;&#125;,s[<span class="number">10101010</span>]=&#123;&#125;;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;f[i],s[i]=f[i]-f[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">while</span>(m--)cin&gt;&gt;a&gt;&gt;b&gt;&gt;c,s[a]+=c,s[b+<span class="number">1</span>]-=c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)f[i]=f[i<span class="number">-1</span>]+s[i],cout&lt;&lt;f[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二维差分和二维前缀和差不多，只是处理方向相反，具体点击<a href="https://blog.csdn.net/justidle/article/details/104506724">其他大佬详解</a>思想还是得看图来的快一些<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n,m,q;</span><br><span class="line"><span class="type">int</span> a[N][N],b[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x1,<span class="type">int</span> y1,<span class="type">int</span> x2,<span class="type">int</span> y2,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[x1][y1]+=c;</span><br><span class="line">    b[x2+<span class="number">1</span>][y1]-=c;</span><br><span class="line">    b[x1][y2+<span class="number">1</span>]-=c;</span><br><span class="line">    b[x2+<span class="number">1</span>][y2+<span class="number">1</span>]+=c;<span class="comment">//这一小块以后的多减了一次所以要加上</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cin&gt;&gt;a[i][j];</span><br><span class="line">                <span class="built_in">insert</span>(i,j,i,j,a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1,y1,x2,y2,c;</span><br><span class="line">        cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;c;</span><br><span class="line">        <span class="built_in">insert</span>(x1,y1,x2,y2,c);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            b[i][j]+=b[i<span class="number">-1</span>][j]+b[i][j<span class="number">-1</span>]-b[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            cout&lt;&lt;b[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><p>复杂度O(n)<br>代码模板<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i &amp;&amp; <span class="built_in">check</span>(i, j)) j ++ ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体问题的逻辑</span></span><br><span class="line">&#125;</span><br><span class="line">常见问题分类：</span><br><span class="line">    (<span class="number">1</span>) 对于一个序列，用两个指针维护一段区间</span><br><span class="line">    (<span class="number">2</span>) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作</span><br></pre></td></tr></table></figure><br><a href="https://www.acwing.com/problem/content/description/801/">最长连续不重复子序列</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,a[<span class="number">1000010</span>],s[<span class="number">1000010</span>];</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>,j =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s[a[i]]++;<span class="comment">//记录当前数字，一旦出现2说明重复了</span></span><br><span class="line">        <span class="keyword">while</span>(s[a[i]]&gt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s[a[j]]--;<span class="comment">//将j踢出记录数组并往前移动j</span></span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans,(i-j+<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a href="https://www.acwing.com/problem/content/802/">数组元素的目标和</a><br>双指针，一个从小到大匹配，另一个从大到小匹配<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m,x;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;x;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100010</span>],b[<span class="number">100010</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;m;i++) cin&gt;&gt;b[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>,j = m<span class="number">-1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp; a[i]+b[j]&gt;x) j--;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;=<span class="number">0</span>&amp;&amp;a[i]+b[j]==x) cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;j&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://www.acwing.com/problem/content/2818/">判断子序列</a><br>常规双指针<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000010</span>],b[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;m;i++) cin&gt;&gt; b[i];</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>,flag= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(r&lt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[l]==b[r])</span><br><span class="line">        &#123;     </span><br><span class="line">            l++;</span><br><span class="line">            r++;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;flag&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(l==n)</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        r++;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>;</span><br><span class="line">    </span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>位运算就是直接对整数在内存中的二进制位进行运算<br>C++ 提供了按位与（&amp;）、按位或（| ）、按位异或（^）、取反（~）、左移（&lt;&lt;）、右移（&gt;&gt;）这 6 种位运算符</p><p><a href="https://www.acwing.com/problem/content/803/">二进制中1的个数</a><br>使用lowbit操作，进行，每次lowbit操作截取一个数字最后一个1后面的所有位，每次减去lowbit得到的数字，直到数字减到0，就得到了最终1的个数。<br>lowbit原理<br>根据计算机负数表示的特点，如一个数字原码是10001000，他的负数表示形式是补码，就是反码+1，反码是01110111，加一则是01111000，二者按位与得到了1000，就是我们想要的lowbit操作<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp;- x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            a[i]-=<span class="built_in">lowbit</span>(a[i]);</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;res&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h2><p>离散化本质上是一种哈希，它在保持原序列大小关系的前提下把其映射成正整数。<br>其实算法本质不难的，就是以大化小，然后再用其他方法如前缀和去更好的解决问题。<br>算法模板如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; alls; <span class="comment">// 存储所有待离散化的值</span></span><br><span class="line"><span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()); <span class="comment">// 将所有值排序</span></span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());   <span class="comment">// 去掉重复元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分求出x对应的离散化的值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">// 找到第一个大于等于x的位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>; <span class="comment">// 映射到1, 2, ...n</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><a href="https://www.acwing.com/problem/content/804/">区间和</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">3000010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[N];<span class="comment">//存储坐标插入值</span></span><br><span class="line"><span class="type">int</span> s[N];<span class="comment">//存储a的前缀和</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls;<span class="comment">//存储坐标</span></span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; add,query;<span class="comment">//存储插入和询问操作的数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//二分查找输入的坐标的离散化下标</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r =alls.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        add.<span class="built_in">push_back</span>(&#123;x,y&#125;);</span><br><span class="line">        alls.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> l , r;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        query.<span class="built_in">push_back</span>(&#123;l, r&#125;);</span><br><span class="line">        alls.<span class="built_in">push_back</span>(l);</span><br><span class="line">        alls.<span class="built_in">push_back</span>(r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序去重</span></span><br><span class="line">    <span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>());</span><br><span class="line">    alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>()),alls.<span class="built_in">end</span>());</span><br><span class="line">     <span class="comment">//执行前n次插入操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> item : add) &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">find</span>(item.first);</span><br><span class="line">        a[x] += item.second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//前缀和</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=alls.<span class="built_in">size</span>();i++) </span><br><span class="line">        s[i] = s[i<span class="number">-1</span>]+a[i];</span><br><span class="line">    <span class="comment">//处理后m次询问操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> item : query) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">find</span>(item.first);</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">find</span>(item.second);</span><br><span class="line">        cout&lt;&lt;s[r]-s[l<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h2><p>顾名思义就是把有交集的区间合并为一个<br>模板<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将所有存在交集的区间合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;PII&gt; &amp;segs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;PII&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(segs.<span class="built_in">begin</span>(), segs.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> st = <span class="number">-2e9</span>, ed = <span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> seg : segs)</span><br><span class="line">        <span class="keyword">if</span> (ed &lt; seg.first)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line">            st = seg.first, ed = seg.second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ed = <span class="built_in">max</span>(ed, seg.second);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line"></span><br><span class="line">    segs = res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><a href="https://www.acwing.com/problem/content/805/">区间合并</a><br>这题倒是不算少见，之前用贪心做过<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">1000010</span>;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; a;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; <span class="built_in">merge</span>(vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&amp; a)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> l = <span class="number">-2e9</span>,r = <span class="number">-2e9</span>; <span class="comment">//设置边界参照</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;i.first)<span class="comment">//说明找到了一个新的区间</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;l,r&#125;);</span><br><span class="line">            l = i.first;</span><br><span class="line">            r = i.second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            r = <span class="built_in">max</span>(r,i.second);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l!=<span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;l,r&#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l,r;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        a.<span class="built_in">push_back</span>(&#123;l,r&#125;);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">auto</span> res = <span class="built_in">merge</span>(a);</span><br><span class="line">    cout&lt;&lt;res.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>算法题目里面一般不会用到构造的数据结构，new用起来太慢了在笔试中容易超时，因此还是使用模拟的方法来实现数据结构算法。</p><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>单链表用的最多的是写邻接表—邻接表是图的一种链式存储方法，其数据结构包括两部分：节点和邻接点。多用于存储图和树，记得在树结构中这个属于图的范围。<br>双链表用来最多的是优化某些问题</p><p><a href="https://www.acwing.com/problem/content/828/">单链表</a><br>静态链表使用数组来模拟是因为写起来方便，效率也比new 快了将近100倍<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">1000010</span>;</span><br><span class="line"><span class="comment">// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N], idx;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在链表头插入一个数a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = a,ne[idx] =head,head = idx,idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将x插入到下标为k的点的后面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] =x;</span><br><span class="line">    ne[idx] = ne[k];</span><br><span class="line">    ne[k] =idx;</span><br><span class="line">    idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将下标是k的点后面的点个删掉</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];<span class="comment">//让k的指针指向，k下一个人的下一个人，那中间的那位就被挤掉了。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">init</span>();<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="keyword">if</span>(s ==<span class="string">&#x27;H&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            <span class="built_in">insert</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">             <span class="keyword">if</span> (x == <span class="number">0</span>) head = ne[head];<span class="comment">//删除头节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">remove</span>(x - <span class="number">1</span>);<span class="comment">//注意删除第k个输入后面的数，那函数里放的是下标，k要减去1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="type">int</span> k, x;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(k - <span class="number">1</span>, x);<span class="comment">//同样的，第k个数，和下标不同，所以要减1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head; i != <span class="number">-1</span>; i = ne[i]) cout&lt;&lt;e[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://www.acwing.com/problem/content/829/">双链表</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">100010</span>;</span><br><span class="line"><span class="comment">// head存储链表头，e[]存储节点的值，l[]存储前驱地址，r[]存储下一个地址，idx表示当前指针</span></span><br><span class="line"><span class="comment">//双指针要记住假设当前节点为p,则l[p]表示p的前驱节点位置，l[r[p]]表示p-&gt;next-&gt;pre的意思</span></span><br><span class="line"><span class="type">int</span> e[N], l[N], r[N],idx= <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span><span class="comment">//没加头节点了</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    r[<span class="number">0</span>] =<span class="number">1</span>;</span><br><span class="line">    idx =<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将x插入到下标为k的点的后面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] =x;</span><br><span class="line">    l[idx] = k;</span><br><span class="line">    r[idx] = r[k];</span><br><span class="line">    l[r[k]] = idx;<span class="comment">//让原本k左边的前驱节点指向idx</span></span><br><span class="line">    r[k] =idx;</span><br><span class="line">    idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将下标是k的点后面的点个删掉</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    r[l[k]] = r[k];<span class="comment">//k-&gt;pre-&gt;next = p-&gt;next;</span></span><br><span class="line">    l[r[k]] = l[k];<span class="comment">//k-&gt;next-&gt;pre = p-&gt;pre;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">init</span>();<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       string op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="type">int</span> k, x;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="string">&quot;L&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">0</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&quot;R&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(l[<span class="number">1</span>], x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;D&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            <span class="built_in">remove</span>(k + <span class="number">1</span>);<span class="comment">//第 k 个插入元素对应的索引为 k + 1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;IL&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(l[k + <span class="number">1</span>], x);<span class="comment">// 第 k 个插入元素对应的索引为 k + 1， l[k + 1] 为链表中上一个位置对应的索引</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(k + <span class="number">1</span>, x);<span class="comment">//第 k 个插入元素对应的索引为 k + 1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = r[<span class="number">0</span>]; i != <span class="number">1</span>; i = r[i]) cout&lt;&lt;e[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> stk[N],tt =<span class="number">-1</span>;<span class="comment">//栈不难，用一个数组就能模拟了,tt表示栈顶指针</span></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stk[++tt] = x;<span class="comment">//不能用tt++</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tt--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tt&gt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        string op;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&quot;push&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            <span class="built_in">push</span>(x);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&quot;pop&quot;</span>)</span><br><span class="line">            <span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&quot;empty&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">empty</span>())</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;YES&quot;</span>;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&quot;query&quot;</span>)</span><br><span class="line">            cout&lt;&lt;stk[tt]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/3305/">表达式求值</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储运算数 运算符</span></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; num;</span><br><span class="line">stack&lt;<span class="type">char</span>&gt; op;</span><br><span class="line"><span class="comment">//建立映射来判断运算优先级</span></span><br><span class="line">unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; cmp = &#123;</span><br><span class="line">    &#123;<span class="string">&#x27;+&#x27;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;-&#x27;</span>, <span class="number">1</span>&#125; , &#123;<span class="string">&#x27;*&#x27;</span>, <span class="number">2</span>&#125;, &#123;<span class="string">&#x27;/&#x27;</span>, <span class="number">2</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//模拟一次算术操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eval</span><span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> b = num.<span class="built_in">top</span>();  num.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="type">int</span> a = num.<span class="built_in">top</span>();  num.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="type">char</span> opr = op.<span class="built_in">top</span>();    op.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">if</span>(opr == <span class="string">&#x27;+&#x27;</span>)  x = a + b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(opr == <span class="string">&#x27;-&#x27;</span>) x = a - b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(opr == <span class="string">&#x27;*&#x27;</span>) x= a * b;</span><br><span class="line">    <span class="keyword">else</span>    x = a / b;</span><br><span class="line">    num.<span class="built_in">push</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="type">char</span> c = str[i];</span><br><span class="line">        <span class="comment">//读入运算数</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(c))&#123;</span><br><span class="line">            <span class="type">int</span> j = i, x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>( j &lt; str.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">isdigit</span>(str[j]))&#123;</span><br><span class="line">                <span class="comment">//j++ 迭代不能忘 </span></span><br><span class="line">                x = x *  <span class="number">10</span> + str[j ++] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num.<span class="built_in">push</span>(x);</span><br><span class="line">            <span class="comment">//由于每轮循环有i++,我们需要倒指向最后一个数字</span></span><br><span class="line">            i = j - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( c == <span class="string">&#x27;(&#x27;</span> )&#123;</span><br><span class="line">            <span class="comment">//标记一下，括号内数据</span></span><br><span class="line">            op.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>( c == <span class="string">&#x27;)&#x27;</span> )&#123;</span><br><span class="line">            <span class="comment">//括号的优先级，先算括号</span></span><br><span class="line">            <span class="keyword">while</span>( op.<span class="built_in">size</span>() &amp;&amp; op.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span> )   <span class="built_in">eval</span>();</span><br><span class="line">            <span class="comment">//左括号可以弹出</span></span><br><span class="line">            op.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//得先把乘除法算了再算加减</span></span><br><span class="line">            <span class="comment">//这里必须得带等于号 我们这题都是正整数计算</span></span><br><span class="line">            <span class="comment">// 0 - 5 + 3 </span></span><br><span class="line">            <span class="comment">//如果不算，上式会被错误计算成 -8</span></span><br><span class="line">            <span class="keyword">while</span>( op.<span class="built_in">size</span>() &amp;&amp; cmp[op.<span class="built_in">top</span>()] &gt;= cmp[c])    <span class="built_in">eval</span>();</span><br><span class="line">            <span class="comment">//压入新运算符</span></span><br><span class="line">            op.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清理低优先级操作</span></span><br><span class="line">    <span class="keyword">while</span>(op.<span class="built_in">size</span>())    <span class="built_in">eval</span>();</span><br><span class="line">    cout &lt;&lt; num.<span class="built_in">top</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>模板<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hh 表示队头，tt表示队尾</span></span><br><span class="line"><span class="type">int</span> q[N], hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队尾插入一个数</span></span><br><span class="line">q[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队头弹出一个数,很巧妙，用空间换时间h++就是将队头指针往后移动了，虽然没改变原本队头元素的值，却让队头元素脱离了队列的范围内</span></span><br><span class="line">hh ++ ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队头的值</span></span><br><span class="line">q[hh];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span> (hh &lt;= tt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a href="https://www.acwing.com/problem/content/831/">模拟队列</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> q[N],hh,tt = <span class="number">0</span>;<span class="comment">//hh是队头，tt是队尾</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q[tt++] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    hh++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tt&lt;=hh;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        string op;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&quot;push&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            <span class="built_in">push</span>(x);</span><br><span class="line">        &#125;<span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">if</span>(op ==<span class="string">&quot;empty&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">empty</span>())</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&quot;query&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;q[hh]&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&quot;pop&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><a href="https://www.acwing.com/problem/content/832/">单调栈</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思路清晰，遇到大的就出栈，直至栈空就输出-1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stk[<span class="number">100010</span>],tt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">   <span class="keyword">while</span>(n--)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="type">int</span> x;</span><br><span class="line">       cin&gt;&gt;x;</span><br><span class="line">       <span class="keyword">while</span> (tt &amp;&amp; stk[tt] &gt;= x) tt -- ;<span class="comment">//如果栈顶元素大于当前待入栈元素，则出栈</span></span><br><span class="line">       <span class="keyword">if</span>(!tt) cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">       <span class="keyword">else</span> cout&lt;&lt;stk[tt]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">       stk[++tt]  =x;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://www.acwing.com/problem/content/156/">滑动窗口</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> a[N],q[N];<span class="comment">//a存放内容，q存放坐标</span></span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="comment">//单调队列就是要保持最小值一定在队头</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="type">int</span> hh =<span class="number">0</span>,tt =<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(hh&lt;=tt&amp;&amp;i-k+<span class="number">1</span>&gt;q[hh])</span><br><span class="line">            hh++;<span class="comment">//滑动窗口踢出队头</span></span><br><span class="line">        <span class="keyword">while</span>(hh&lt;=tt&amp;&amp;a[q[tt]]&gt;=a[i]) tt--;<span class="comment">//a的值大于i的值时，弹出</span></span><br><span class="line">        q[++tt] =i;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=k<span class="number">-1</span>) cout&lt;&lt;a[q[hh]]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    hh = <span class="number">0</span>,tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(hh&lt;=tt&amp;&amp;i-k+<span class="number">1</span>&gt;q[hh])</span><br><span class="line">            hh++;<span class="comment">//滑动窗口踢出队头</span></span><br><span class="line">        <span class="keyword">while</span>(hh&lt;=tt&amp;&amp;a[q[tt]]&lt;=a[i]) tt--;<span class="comment">//a的值大于i的值时，弹出</span></span><br><span class="line">        q[++tt] =i;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=k<span class="number">-1</span>) cout&lt;&lt;a[q[hh]]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="大名鼎鼎的KMP"><a href="#大名鼎鼎的KMP" class="headerlink" title="大名鼎鼎的KMP"></a>大名鼎鼎的KMP</h2><p>kmp就是字符串匹配的一种方法，暴力在匹配不成功后需要重头开始匹配，KMP在匹配不成功后会按照相应规则退回到某一位置k，此时k前的字符串一定能匹配成功。<br>这个是输出字符串匹配的起始位置到末尾位置的<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line">string s,p; </span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> ne[N];<span class="comment">//next数组，kmp的匹配回退数组,表示当前位上字符串相同前缀和后缀最高位数j</span></span><br><span class="line"><span class="comment">//通过位数j可以找到字符串回退的最小位置，假设s在第i位和匹配串的k位匹配失败。</span></span><br><span class="line"><span class="comment">//因为后缀和前缀相同保证了i前j位都一定和p串后缀相等，p串后缀和前缀相等，所以i前j位和p串前缀相等，因此只需退回到ne[k]上然后比较k+1和当前i位即可</span></span><br><span class="line"><span class="comment">//可以看作s串匹配错误的前j位就是和p的后缀相同的前缀</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;p&gt;&gt;m&gt;&gt;s;</span><br><span class="line">    <span class="comment">//next数组构造过程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,j = <span class="number">0</span>;i&lt;p.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;p[i]!=p[j]) j = ne[j];</span><br><span class="line">        <span class="keyword">if</span>(p[i] ==p[j]) j++;</span><br><span class="line">        ne[j] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//kmp匹配过程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>,j=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[i]!=p[j]) j = ne[j<span class="number">-1</span>];<span class="comment">//不匹配则按规则回退</span></span><br><span class="line">        <span class="keyword">if</span>(s[i]==p[j])    j++;</span><br><span class="line">        <span class="keyword">if</span>(j==n)</span><br><span class="line">        cout&lt;&lt;i-j+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;i;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://www.acwing.com/problem/content/833/">KMP字符串</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="comment">//char s[N],p[N]; </span></span><br><span class="line">string s,p;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> ne[N];<span class="comment">//next数组，kmp的匹配回退数组,表示当前位上字符串相同前缀和后缀最高位数j</span></span><br><span class="line"><span class="comment">//通过位数j可以找到字符串回退的最小位置，假设s在第i位和匹配串的k位匹配失败。</span></span><br><span class="line"><span class="comment">//因为后缀和前缀相同保证了i前j位都一定和p串后缀相等，p串后缀和前缀相等，所以i前j位和p串前缀相等，因此只需退回到ne[k]上然后比较k+1和当前i位即可</span></span><br><span class="line"><span class="comment">//可以看作s串匹配错误的前j位就是和p的后缀相同的前缀</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; p &gt;&gt; m &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// p[0...0] 的区间内一定没有相等前后缀</span></span><br><span class="line">    ne[<span class="number">0</span>] = <span class="number">-1</span>;<span class="comment">//ne数组里的是下标位置，所以当不存在相同前后缀时为-1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造模板串的 next 数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">-1</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (j != <span class="number">-1</span> &amp;&amp; p[i] != p[j + <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 若前后缀匹配不成功</span></span><br><span class="line">            <span class="comment">// 反复令 j 回退，直至到 -1 或是 s[i] == s[j + 1]</span></span><br><span class="line">            j = ne[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) </span><br><span class="line">        &#123;</span><br><span class="line">            j ++; <span class="comment">// 匹配成功时，最长相等前后缀变长，最长相等前后缀最后一位变大</span></span><br><span class="line">        &#125;</span><br><span class="line">        ne[i] = j; <span class="comment">// 令 ne[i] = j，以方便计算 next[i + 1]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// kmp start !</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>; i &lt; m; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">while</span> (j != <span class="number">-1</span> &amp;&amp; s[i] != p[j + <span class="number">1</span>])</span><br><span class="line">       &#123;</span><br><span class="line">           j = ne[j];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>])</span><br><span class="line">       &#123;</span><br><span class="line">           j ++; <span class="comment">// 匹配成功时，模板串指向下一位</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (j == n - <span class="number">1</span>) <span class="comment">// 模板串匹配完成，第一个匹配字符下标为 0，故到 n - 1</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">// 匹配成功时，文本串结束位置减去模式串长度即为起始位置</span></span><br><span class="line">           cout &lt;&lt; i - j &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 模板串在模式串中出现的位置可能是重叠的</span></span><br><span class="line">           <span class="comment">// 需要让 j 回退到一定位置，再让 i 加 1 继续进行比较</span></span><br><span class="line">           <span class="comment">// 回退到 ne[j] 可以保证 j 最大，即已经成功匹配的部分最长</span></span><br><span class="line">           j = ne[j]; </span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Trie字典树"><a href="#Trie字典树" class="headerlink" title="Trie字典树"></a>Trie字典树</h2><p>字典树也叫前缀树，典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较。</p><p><a href="https://www.acwing.com/problem/content/description/837/">Trie字符串统计</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>],cnt[N];<span class="comment">//son记录字母，cnt记录单词出现数量</span></span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;str[i];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果树中第一次出现就新加一个</span></span><br><span class="line">        <span class="type">int</span> u =str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!son[p][u]) son[p][u] = ++idx;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;str[i];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果树中第一次出现就新加一个</span></span><br><span class="line">        <span class="type">int</span> u =str[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n; cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        string op; cin&gt;&gt;op&gt;&gt;str;</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span>) <span class="built_in">insert</span>(str);</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="built_in">query</span>(str)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a href="https://www.acwing.com/problem/content/145/">最大异或对</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>,M = N*<span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"><span class="type">int</span> son[M][<span class="number">2</span>],cnt[N];<span class="comment">//son记录字母，cnt记录单词出现数量</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = x&gt;&gt;i&amp;<span class="number">1</span>;<span class="comment">//取X的第i位的二进制数是什么</span></span><br><span class="line">        <span class="keyword">if</span>(!son[p][u]) son[p][u] =++idx;<span class="comment">//不能++idx,否则导致第一轮为0</span></span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p =<span class="number">0</span>,res =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = x&gt;&gt;i&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(son[p][!u])<span class="comment">//如果当前层有对应的不相同的数,p就指向当前层数其他位置</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = son[p][!u];</span><br><span class="line">            res=res*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = son[p][u];</span><br><span class="line">            res = res*<span class="number">2</span>+<span class="number">0</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;cnt[i];</span><br><span class="line">        <span class="built_in">insert</span>(cnt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;   </span><br><span class="line">        res=<span class="built_in">max</span>(res,<span class="built_in">query</span>(cnt[i]));  <span class="comment">///search(a[i])查找的是a[i]值的最大与或值</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>并查集是用来管理元素分组的算法。并查集可以高效的对元素进行分组（合并在一起），并且能快速的查询两个元素是否属于同一组。当许多组元素需要合并在一起时，只需将各组元素的老大合并在一起即可，也就是<strong>让其中一个根指向另一个根</strong>，就使得两棵树合并成了一棵树，也就把两个组合并为了一个组。当我们要查询两个元素是否属于同一个组时，我们需要<strong>沿着各个节点往上向树的根进行查询</strong>，如果最终发现两个元素的根相同，那么他们就属于同一个组。反之，则不属于同一个组。并查集还有路径压缩的优化—将查询到的集合直接指向根节点，下次查询时只需O(1)的复杂度即可</p><p>模板<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)朴素并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N]; <span class="comment">//存储每个点的祖宗节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)维护size的并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N], size[N];</span><br><span class="line">    <span class="comment">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        size[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    size[<span class="built_in">find</span>(b)] += size[<span class="built_in">find</span>(a)];</span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)维护到祖宗节点距离的并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N], d[N];</span><br><span class="line">    <span class="comment">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u = <span class="built_in">find</span>(p[x]);</span><br><span class="line">            d[x] += d[p[x]];</span><br><span class="line">            p[x] = u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        d[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">    d[<span class="built_in">find</span>(a)] = distance; <span class="comment">// 根据具体问题，初始化find(a)的偏移量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><a href="https://www.acwing.com/problem/content/838/">合并集合</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>,M = N*<span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span> <span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x]!=x) p[x] =  <span class="built_in">find</span>(p[x]);<span class="comment">//压缩节点,很漂亮的递归操作</span></span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="type">int</span> n,m;</span><br><span class="line">   cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    p[i] = i;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">while</span>(m--)</span><br><span class="line">   &#123;</span><br><span class="line">    string op;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;op&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    cout&lt;&lt;op&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="string">&quot;M&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p[<span class="built_in">find</span>(a)]  =<span class="built_in">find</span>(b);<span class="comment">//合并树</span></span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(a)==<span class="built_in">find</span>(b))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="[837. 连通块中点的数量 - AcWing题库](https://www.acwing.com/problem/content/839/">连通块中点的数量</a>)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>,M = N*<span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> p[N], p_size[N];<span class="comment">//size存放的是根节点相同的点的数目</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span> <span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x]!=x) p[x] =  <span class="built_in">find</span>(p[x]);<span class="comment">//压缩节点,很漂亮的递归操作,不符合条件就往上找</span></span><br><span class="line">    <span class="keyword">return</span> p[x];<span class="comment">//只用根节点的值才会等于x</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="type">int</span> n,m;</span><br><span class="line">   cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       p[i] = i;</span><br><span class="line">       p_size[i] = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">while</span>(m--)</span><br><span class="line">   &#123;</span><br><span class="line">    string op;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;op;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;op&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(op==<span class="string">&quot;C&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(a)==<span class="built_in">find</span>(b)) <span class="keyword">continue</span>;<span class="comment">//特判，如果根节点一样就不操作</span></span><br><span class="line">        p_size[<span class="built_in">find</span>(b)]+=p_size[<span class="built_in">find</span>(a)];<span class="comment">//更新连通块中点的数目</span></span><br><span class="line">        p[<span class="built_in">find</span>(a)]  =<span class="built_in">find</span>(b);<span class="comment">//合并树</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&quot;Q1&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(a)==<span class="built_in">find</span>(b))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a;</span><br><span class="line">        cout&lt;&lt;p_size[<span class="built_in">find</span>(a)]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a href="https://www.acwing.com/problem/content/242/">食物链</a><br>很有含金量的一题<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>,M = N*<span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> p[N],d[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span> <span class="params">(<span class="type">int</span> x)</span><span class="comment">//三类环形，因此可以使用到根节点的距离来判断类别，模0是同类，模1吃模0的，模2吃模1的，模0吃模2的</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x]!=x)<span class="comment">//p[x]里装的是父节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">find</span>(p[x]);<span class="comment">//找到根节点</span></span><br><span class="line">        d[x] += d[p[x]];<span class="comment">//d[x]表示到父节点的距离，加上父节点到根节点的距离</span></span><br><span class="line">        p[x] = t;<span class="comment">//压缩</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="type">int</span> n,m,res=<span class="number">0</span>;</span><br><span class="line">   cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    p[i] = i;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">while</span>(m--)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="type">int</span> op;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;op&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;n||b&gt;n) res++;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> px = <span class="built_in">find</span>(a), py = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(px==py&amp;&amp;(d[a]-d[b])%<span class="number">3</span>)<span class="comment">//距离之差模3存在说明不是同类</span></span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(px!=py)<span class="comment">//不是同一个块就合并</span></span><br><span class="line">            &#123;</span><br><span class="line">                p[px] = py;<span class="comment">//将x合并到y中</span></span><br><span class="line">                d[px] = d[b] - d[a];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(px==py&amp;&amp;(d[a] - d[b] - <span class="number">1</span>) % <span class="number">3</span>)<span class="comment">//距离之差多一相当于a吃b，所以减去1模3后存在就不是a吃b的关系了</span></span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (px != py)</span><br><span class="line">                &#123;</span><br><span class="line">                    p[px] = py;</span><br><span class="line">                    d[px] = d[b] + <span class="number">1</span> - d[a];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">   cout&lt;&lt;res;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆就是一棵完全二叉树，用数组储存。根节点一定比左右节点大或小。<br>根节点为x，则2x为左儿子，2x+1是右儿子<br>模板<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span></span><br><span class="line"><span class="comment">// ph[k]存储第k个插入的点在堆中的位置</span></span><br><span class="line"><span class="comment">// hp[k]存储堆中下标是k的点是第几个插入的</span></span><br><span class="line"><span class="type">int</span> h[N], ph[N], hp[N], size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换两个点，及其映射关系</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap_swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(ph[hp[a]],ph[hp[b]]);</span><br><span class="line">    <span class="built_in">swap</span>(hp[a], hp[b]);</span><br><span class="line">    <span class="built_in">swap</span>(h[a], h[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (u != t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, t);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (u / <span class="number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, u / <span class="number">2</span>);</span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n)建堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span>; i; i -- ) <span class="built_in">down</span>(i);<span class="comment">//可以用错位相减来推断时间复杂度</span></span><br><span class="line"><span class="comment">//因为是完全二叉树，所以n/2开始代表从第一个非叶子节点开始，类似长满荷花要三十天，有一半荷花的时候是第29天一样</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><a href="https://www.acwing.com/problem/content/840/">堆排序</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>,M = N*<span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = x;</span><br><span class="line">    <span class="keyword">if</span>(x*<span class="number">2</span>&lt;=len&amp;&amp;h[x*<span class="number">2</span>]&lt;h[t]) t = x*<span class="number">2</span>;<span class="comment">//如果左节点存子并且数比根节点小更新最小点</span></span><br><span class="line">    <span class="keyword">if</span>(x*<span class="number">2</span>+<span class="number">1</span>&lt;=len&amp;&amp;h[x*<span class="number">2</span>+<span class="number">1</span>]&lt;h[t]) t = x*<span class="number">2</span>+<span class="number">1</span>;<span class="comment">//同上</span></span><br><span class="line">    <span class="keyword">if</span>(t!=x)<span class="comment">//如果不满足根节点最小就要让根节点和最小点交换</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(h[x],h[t]);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="type">int</span> n,m;</span><br><span class="line">   cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">   len = n;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">   cin&gt;&gt;h[i];</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i =n/<span class="number">2</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">   <span class="built_in">down</span>(i);</span><br><span class="line">   <span class="keyword">while</span>(m--)</span><br><span class="line">   &#123;</span><br><span class="line">    cout&lt;&lt;h[<span class="number">1</span>]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="comment">//删除头节点—将尾节点覆盖再down更新一遍后删除尾节点即可</span></span><br><span class="line">    h[<span class="number">1</span>] = h[len];</span><br><span class="line">    len--;</span><br><span class="line">    <span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="[839. 模拟堆 - AcWing题库](https://www.acwing.com/problem/content/841/">模拟堆</a>)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>,M = N*<span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> h[N],ph[N],hp[N];<span class="comment">//ph和hp互为映射，ph[k] = i来指明，第k个数字在h[]中对应的i是多少,即ph存放的是在堆中的下标</span></span><br><span class="line"><span class="comment">//但是对于ph[k_1] = a和ph[k_2] = b来说，a和b是它们存放的值，不能通过值来找下标，也就是找不k_1,k_2是多少，于是引入hp[a] = k_2，hp[b] = k_2，则可以实现反向的操作</span></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap_swap</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span><span class="comment">//交换要保证存放在堆中的下标和数值索引也一起交换</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(ph[hp[a]] ,ph[hp[b]]);<span class="comment">//交换两个对应ph的值,因为ph[hp[a]]为hp[a] = i，所以ph[k] = i的意思</span></span><br><span class="line">    <span class="built_in">swap</span>(hp[a],hp[b]);</span><br><span class="line">    <span class="built_in">swap</span>(h[a],h[b]);<span class="comment">//一般只用交换节点就行，这里是题目要求</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = x;</span><br><span class="line">    <span class="keyword">if</span>(x*<span class="number">2</span>&lt;=len&amp;&amp;h[x*<span class="number">2</span>]&lt;h[t]) t = x*<span class="number">2</span>;<span class="comment">//如果左节点存子并且数比根节点小更新最小点</span></span><br><span class="line">    <span class="keyword">if</span>(x*<span class="number">2</span>+<span class="number">1</span>&lt;=len&amp;&amp;h[x*<span class="number">2</span>+<span class="number">1</span>]&lt;h[t]) t = x*<span class="number">2</span>+<span class="number">1</span>;<span class="comment">//同上</span></span><br><span class="line">    <span class="keyword">if</span>(x!=t)<span class="comment">//如果不满足根节点最小就要让根节点和最小点交换</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(x,t);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x/<span class="number">2</span>&amp;&amp;h[x/<span class="number">2</span>]&gt;h[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(x/<span class="number">2</span>,x);</span><br><span class="line">        x /=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="type">int</span> n,m = <span class="number">0</span>;</span><br><span class="line">   cin&gt;&gt;n;</span><br><span class="line">   <span class="keyword">while</span>(n--)</span><br><span class="line">   &#123;</span><br><span class="line">    string op;</span><br><span class="line">    cin&gt;&gt;op;</span><br><span class="line">    <span class="type">int</span> k,x;</span><br><span class="line">    <span class="keyword">if</span>(op == <span class="string">&quot;I&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        len++;</span><br><span class="line">        m++;</span><br><span class="line">        ph[m] = len;hp[len] = m;</span><br><span class="line">        h[len] = x;</span><br><span class="line">        <span class="built_in">up</span>(len);<span class="comment">//将插入的数往上移动到合适的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op ==<span class="string">&quot;PM&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;h[<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&quot;DM&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(<span class="number">1</span>,len);<span class="comment">//删除逻辑就是将尾节点覆盖头节点后删除尾节点再重新构建堆，因为尾部好删除</span></span><br><span class="line">        len--;</span><br><span class="line">        <span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&quot;D&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;k;</span><br><span class="line">        k = ph[k];</span><br><span class="line">        <span class="built_in">heap_swap</span>(k,len);</span><br><span class="line">        len--;</span><br><span class="line">        <span class="built_in">up</span>(k);</span><br><span class="line">        <span class="built_in">down</span>(k);<span class="comment">//down和up二选一自动执行</span></span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;k&gt;&gt;x;</span><br><span class="line">        k = ph[k];</span><br><span class="line">        h[k] =x ;</span><br><span class="line">        <span class="built_in">up</span>(k);</span><br><span class="line">        <span class="built_in">down</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Hash哈希表"><a href="#Hash哈希表" class="headerlink" title="Hash哈希表"></a>Hash哈希表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>) 拉链法</span><br><span class="line">    <span class="type">int</span> h[N], e[N], ne[N], idx;<span class="comment">//每个h[i]上都是一个链表，想象成小学按班级排队一样</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向哈希表中插入一个数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">        e[idx] = x;</span><br><span class="line">        ne[idx] = h[k];</span><br><span class="line">        h[k] = idx ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在哈希表中查询某个数是否存在</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[k]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">            <span class="keyword">if</span> (e[i] == x)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) 开放寻址法</span><br><span class="line">    <span class="type">int</span> h[N];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> t = (x % N + N) % N;</span><br><span class="line">        <span class="keyword">while</span> (h[t] != null &amp;&amp; h[t] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            t ++ ;</span><br><span class="line">            <span class="keyword">if</span> (t == N) t = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/description/842/">模拟散列表</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拉链法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100003</span>,M = N*<span class="number">30</span>;<span class="comment">//100003是有讲究的，100003是100000后第一个质数，这样的远离0的质数可以最小概率引起哈希冲突</span></span><br><span class="line"><span class="type">int</span> h[N],e[N],ne[N],idx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k =(x%N+N)%N;<span class="comment">//如果插入是负数，则会返回正数的模，类似模了个绝对值</span></span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = h[k];</span><br><span class="line">    h[k] =idx++;<span class="comment">//插入后更新h[k]上的链表头指针</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k =(x%N+N)%N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[k];i!=<span class="number">-1</span>;i =ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i]==x)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,x;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);<span class="comment">//相当于初始化数组所有位为-1</span></span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        string op;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&quot;I&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            <span class="built_in">insert</span>(x);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(x))</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//开放寻址法N一般为数据范围的两到三倍，flag是不在范围内的数据用于判断位置是否为空</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200003</span>,flag = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"> <span class="comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k =(x%N+N)%N;</span><br><span class="line">    <span class="keyword">while</span>(h[k]!=flag&amp;&amp;h[k]!=x)</span><br><span class="line">    &#123;</span><br><span class="line">        k++;</span><br><span class="line">        <span class="keyword">if</span>(k==N)</span><br><span class="line">        k = <span class="number">0</span>;<span class="comment">//走到头了重新开始找</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,x;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> h);<span class="comment">//相当于按字节初始化数组所有位为-1</span></span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        string op;</span><br><span class="line">        cin&gt;&gt;op&gt;&gt;x;</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">find</span>(x);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&quot;I&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            h[k] = x;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(h[k]!=flag)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a href="https://www.acwing.com/problem/content/843/">字符串哈希</a><br>适用于快速判断字符串是否相等的情况<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思路就像设定一个特殊的密码方式一样，例如(12-10)/1 = 2；（12*10-10*10）/1*10 =2一样，故可以判断这两个区间上的值相等</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>,k = <span class="number">131</span>;<span class="comment">//p就是设定好的密码方式，设定为131通常更好</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line">ULL h[N],p[N];<span class="comment">//如果超过范围就相当于取模了</span></span><br><span class="line"></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;str+<span class="number">1</span>;</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        h[i] = h[i<span class="number">-1</span>]*k+str[i];</span><br><span class="line">        p[i] = p[i<span class="number">-1</span>]*k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> r1,l1,r2,l2;</span><br><span class="line">        cin&gt;&gt;r1&gt;&gt;l1&gt;&gt;r2&gt;&gt;l2;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">get</span>(r1,l1)==<span class="built_in">get</span>(r2,l2))</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="搜索与图论"><a href="#搜索与图论" class="headerlink" title="搜索与图论"></a>搜索与图论</h1><p>邻接表的模板<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点</span></span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一条边a-&gt;b</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br></pre></td></tr></table></figure></p><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><p><strong>深度优先搜索算法</strong>（Depth First Search，简称DFS）：一种用于遍历或搜索树或图的算法。 沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所在边都己被探寻过或者在搜寻时结点不满足条件，搜索将回溯到发现节点v的那条边的起始节点。整个进程反复进行直到所有节点都被访问为止。属于盲目搜索,最糟糕的情况算法时间复杂度为O(n)。<br>dfs不具有最短性。</p><p><a href="[842. 排列数字 - AcWing题库](https://www.acwing.com/problem/content/description/844/">排列数字</a>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> path[N];</span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//判断是否被用过</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        cout&lt;&lt;path[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])</span><br><span class="line">        &#123;</span><br><span class="line">        path[x] = i;</span><br><span class="line">        st[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(x+<span class="number">1</span>);</span><br><span class="line">        st[i] =<span class="literal">false</span>;<span class="comment">//回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/845/">n-皇后问题</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> dg[N],udg[N],col[N];<span class="comment">//col是行，dg是从左向右的对角线，udg是从右向左的对角线</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="built_in">puts</span>(g[i]);</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!col[i]&amp;&amp;!dg[x+i]&amp;&amp;!udg[n-x+i])<span class="comment">//直线y=x+b-》b = y-x可推，另一条也是，只是为了防止负数加了个n</span></span><br><span class="line">        &#123;</span><br><span class="line">            g[x][i]=<span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            col[i] = dg[x+i] = udg[n-x+i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(x+<span class="number">1</span>);</span><br><span class="line">            col[i] = dg[x+i] = udg[n-x+i] = <span class="literal">false</span>;<span class="comment">//回溯</span></span><br><span class="line">            g[x][i]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            g[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//法2</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> row[N],dg[N*<span class="number">2</span>],udg[N*<span class="number">2</span>],col[N];<span class="comment">//col是列，dg是从左向右的对角线，udg是从右向左的对角线</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y==n) y=<span class="number">0</span>,x++;</span><br><span class="line">    <span class="keyword">if</span>(x==n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s==n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="built_in">puts</span>(g[i]);</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    g[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    <span class="comment">//不放</span></span><br><span class="line">    <span class="built_in">dfs</span>(x,y+<span class="number">1</span>,s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//放</span></span><br><span class="line">    <span class="keyword">if</span>(!row[x]&amp;&amp;!col[y]&amp;&amp;!dg[x+y]&amp;&amp;!udg[x-y+n])</span><br><span class="line">    &#123;</span><br><span class="line">        row[x] = col[y] = dg[x+y] = udg[x-y+n] = <span class="literal">true</span>;</span><br><span class="line">        g[x][y] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(x,y+<span class="number">1</span>,s+<span class="number">1</span>);</span><br><span class="line">        g[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        row[x] = col[y] = dg[x+y] = udg[x-y+n] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><p><a href="https://www.acwing.com/problem/content/846/">走迷宫</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> g[N][N], d[N][N];<span class="comment">//g记录题目，d记录是否走过</span></span><br><span class="line"><span class="comment">//bfs的思想就是一层一层扩散，第一个发现答案的自然就是符合要求的最小答案了</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;PII&gt; q;</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//开始</span></span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;<span class="comment">//方向</span></span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t= q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x =t.first+dx[i],y = t.second+dy[i];</span><br><span class="line">            <span class="keyword">if</span>(x&gt;=<span class="number">0</span>&amp;&amp;x&lt;n&amp;&amp;y&gt;=<span class="number">0</span>&amp;&amp;y&lt;m&amp;&amp;g[x][y]==<span class="number">0</span>&amp;&amp;d[x][y]==<span class="number">-1</span>)<span class="comment">//符合条件就往不同方向扩散</span></span><br><span class="line">            &#123;</span><br><span class="line">                d[x][y] = d[t.first][t.second]+<span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;x,y&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[n<span class="number">-1</span>][m<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">             cin &gt;&gt; g[i][j];</span><br><span class="line">             d[i][j] = <span class="number">-1</span>;<span class="comment">//初始化</span></span><br><span class="line">        &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">bfs</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a href="https://www.acwing.com/problem/content/847/">八数码</a>非常好的一道bfs题，传统的bfs，但是考察了二维坐标到一维坐标的转换，是个很好的算法技巧。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line">unordered_map&lt;string,<span class="type">int</span>&gt; cnt;<span class="comment">//哈希表保存每一次数据</span></span><br><span class="line">string s;</span><br><span class="line">queue&lt;string&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[s] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;<span class="comment">//移动坐标</span></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        string t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(t== <span class="string">&quot;12345678x&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;cnt[t]&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> now = cnt[t];<span class="comment">//取得当前的数据方便修改</span></span><br><span class="line">        <span class="type">int</span> pos = t.<span class="built_in">find</span>(<span class="string">&#x27;x&#x27;</span>);<span class="comment">//获取x的地址</span></span><br><span class="line">        <span class="type">int</span> a = pos/<span class="number">3</span>,b = pos%<span class="number">3</span>;<span class="comment">//转换坐标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = a+dx[i],y = b+dy[i];<span class="comment">//扩散</span></span><br><span class="line">            <span class="keyword">if</span>(x&gt;=<span class="number">0</span>&amp;&amp;y&gt;=<span class="number">0</span>&amp;&amp;x&lt;=<span class="number">2</span>&amp;&amp;y&lt;=<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(t[pos], t[<span class="number">3</span> * x + y]);<span class="comment">//实现字符串中的交换</span></span><br><span class="line">                <span class="keyword">if</span>(cnt.<span class="built_in">find</span>(t)==cnt.<span class="built_in">end</span>())<span class="comment">//如果是一条新的数据就加入到哈希表中</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cnt[t]= now+<span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(t);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">swap</span>(t[pos], t[<span class="number">3</span> * x + y]);<span class="comment">//回溯</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        cin&gt;&gt;c;</span><br><span class="line">        s+=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="树与图的深度优先遍历"><a href="#树与图的深度优先遍历" class="headerlink" title="树与图的深度优先遍历"></a>树与图的深度优先遍历</h2><p>模板<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[u] = <span class="literal">true</span>; <span class="comment">// st[u] 表示点u已经被遍历过</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j]) <span class="built_in">dfs</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a href="https://www.acwing.com/problem/content/848/"> 树的重心</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = N * <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="type">int</span> ans = N;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<span class="comment">//h储存的是a这条链表上的头节点，ne存储列表的索引值，e存放数据</span></span><br><span class="line">    <span class="comment">//插入的时候，像链表的头插法一样，e的第idx位存储数据，ne第idx位存放的是第a条链表的头节点，即h[a]，</span></span><br><span class="line">    <span class="comment">//然后更新这条链表上的头节点的下标值即h[a]=idx++；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//树的结构输出出来是这样的</span></span><br><span class="line"><span class="comment">// 1:-&gt;4-&gt;7-&gt;2  表示1连着4，7，2这几个结点</span></span><br><span class="line"><span class="comment">// 2:-&gt;5-&gt;8-&gt;1</span></span><br><span class="line"><span class="comment">// 3:-&gt;9-&gt;4</span></span><br><span class="line"><span class="comment">// 4:-&gt;6-&gt;3-&gt;1</span></span><br><span class="line"><span class="comment">// 5:-&gt;2</span></span><br><span class="line"><span class="comment">// 6:-&gt;4</span></span><br><span class="line"><span class="comment">// 7:-&gt;1</span></span><br><span class="line"><span class="comment">// 8:-&gt;2</span></span><br><span class="line"><span class="comment">// 9:-&gt;3</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> size = <span class="number">0</span>,sum =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u];i!=<span class="number">-1</span>;i = ne[i])<span class="comment">//找到这条链上的某一点，遍历这条链</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!st[j])</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="type">int</span> s = <span class="built_in">dfs</span>(j);</span><br><span class="line">        size = <span class="built_in">max</span>(size,s);<span class="comment">// 记录最大联通子图的节点数</span></span><br><span class="line">        sum +=s;<span class="comment">//以j为根的树的节点数，用来推出前面断开的总的节点数，因为图的特性就是只有一条前驱多个后继</span></span><br><span class="line">        <span class="comment">//所以除了总数-后继所有的结点数之和等于剩下唯一一个分支的节点总数和</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    size = <span class="built_in">max</span>(size,n-sum);</span><br><span class="line">    ans = <span class="built_in">min</span>(ans,size);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="built_in">add</span>(a,b),<span class="built_in">add</span>(b,a);<span class="comment">//无向表互联</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="树与图的广度优先遍历"><a href="#树与图的广度优先遍历" class="headerlink" title="树与图的广度优先遍历"></a>树与图的广度优先遍历</h2><p><a href="https://www.acwing.com/problem/content/849/">图中点的层次</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = N * <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> d[N];<span class="comment">//标记用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<span class="comment">//h储存的是a这条链表上的头节点，ne存储列表的索引值，e存放数据</span></span><br><span class="line">    <span class="comment">//插入的时候，像链表的头插法一样，e的第idx位存储数据，ne第idx位存放的是第a条链表的头节点，即h[a]，</span></span><br><span class="line">    <span class="comment">//然后更新这条链表上的头节点的下标值即h[a]=idx++；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//树的结构输出出来是这样的</span></span><br><span class="line"><span class="comment">// 1:-&gt;4-&gt;7-&gt;2  表示1连着4，7，2这几个结点</span></span><br><span class="line"><span class="comment">// 2:-&gt;5-&gt;8-&gt;1</span></span><br><span class="line"><span class="comment">// 3:-&gt;9-&gt;4</span></span><br><span class="line"><span class="comment">// 4:-&gt;6-&gt;3-&gt;1</span></span><br><span class="line"><span class="comment">// 5:-&gt;2</span></span><br><span class="line"><span class="comment">// 6:-&gt;4</span></span><br><span class="line"><span class="comment">// 7:-&gt;1</span></span><br><span class="line"><span class="comment">// 8:-&gt;2</span></span><br><span class="line"><span class="comment">// 9:-&gt;3</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span><span class="comment">//类似二叉树的层序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">memset</span>(d, <span class="number">-1</span> ,<span class="keyword">sizeof</span> d);</span><br><span class="line">   queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">   d[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">   q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =h[t];i!=<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(d[j]==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            d[j] = d[t]+<span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> d[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="built_in">add</span>(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="built_in">bfs</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>拓扑排序的实现原理<br>定义两个辅助数组结构分别用来存放各顶点入度和记录拓扑排序的顶点序号。从第一个无入度的顶点开始，将所有无入度的顶点依次输出并从已有图中摘除，同时将此结点与其他结点所依附的边摘除，最终输出的顶点序列就是拓扑排序序列，此处需要注意的是：有些有向无环图的拓扑排序序列的结果并不唯一<br><strong>简而言之就是</strong><br>一个有向图，如果图中有入度为 0 的点，就把这个点删掉，同时也删掉这个点所连的边。<br>一直进行上面出处理，如果所有点都能被删掉，则这个图可以进行拓扑排序。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// d[i] 存储点i的入度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (!d[i])</span><br><span class="line">            q[ ++ tt] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++ ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (-- d[j] == <span class="number">0</span>)</span><br><span class="line">                q[ ++ tt] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果所有点都入队了，说明存在拓扑序列；否则不存在拓扑序列。</span></span><br><span class="line">    <span class="keyword">return</span> tt == n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>一个有向无环图，一定至少存在一入度为0的点，有鸽巢原理可证，设有n个点单向，若走到第n+1时,则说明必定有一个点重复。</p><p><a href="https://www.acwing.com/problem/content/850/">有向图的拓扑序列</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = N * <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> e[N],ne[N],h[N],idx,d[N],q[N];<span class="comment">//d[N]用来存储每个点的入度,q[N]是模拟队列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b;ne[idx] =h[a];h[a] =idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh=<span class="number">0</span>,tt=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!d[i]) q[++tt] = i;<span class="comment">//找到一个度为0的点 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(hh&lt;=tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh++];<span class="comment">//包含了取队首元素和出队操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i =h[t];i!=<span class="number">-1</span>;i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(--d[j]==<span class="number">0</span>)<span class="comment">//就是删除t指向的数的边，入度也就自动减少了</span></span><br><span class="line">            q[++tt] = j;<span class="comment">//入度为0加入队列</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tt==n<span class="number">-1</span>;<span class="comment">//进过队了就完成了，否则表示出现了环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="built_in">add</span>(a,b);</span><br><span class="line">        d[b]++;<span class="comment">//入度变化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">topsort</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        cout&lt;&lt;q[i]&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//排序后结果就是q出队的顺序，由于是数组模拟队列，所以从第一位开始到hh前一位的数据就是答案</span></span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span> cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Dijkstra迪杰斯特拉最短路"><a href="#Dijkstra迪杰斯特拉最短路" class="headerlink" title="Dijkstra迪杰斯特拉最短路"></a>Dijkstra迪杰斯特拉最短路</h2><p>有点贪心的意思，就是不断找到当前点能到的点里的最小点，再不断重复直到最后就能找到最小路<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;//万能头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> g[N][N];<span class="comment">//存放图</span></span><br><span class="line"><span class="type">int</span> dist[N];<span class="comment">//保存源点到其余各个节点的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);<span class="comment">//dist一开始所有的值都是无穷，表示没找到最小路</span></span><br><span class="line">    dist[<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//源点到源点的距离为 0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[j]&amp;&amp;(t==<span class="number">-1</span>||dist[t]&gt;dist[j]))<span class="comment">//找到一个未确定最小值且距离离原点最短的点</span></span><br><span class="line">            t = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>;j&lt;=n;j++)<span class="comment">//更新找到的点的最小值</span></span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j],dist[t]+g[t][j]);</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dist[n]==<span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//如果最后值是无穷说明没找到最短路</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> dist[n];   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> g);<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        g[a][b] = <span class="built_in">min</span>(g[a][b],c);<span class="comment">//迪杰斯特拉算法不能有负权边，所以最小是0</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">dijstra</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查找距离最近的点的操作是On次方，可以用堆来优化查找后复杂度降为O1，至此整个可以优化为Omlogn复杂度，m是边数<br>使用堆优化的迪杰斯特拉算法，直接抄大佬的了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;<span class="comment">//堆里存储距离和节点编号</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;<span class="comment">//节点数量和边数</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;<span class="comment">//邻接表存储图</span></span><br><span class="line"><span class="type">int</span> dist[N];<span class="comment">//存储距离</span></span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//存储状态</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);<span class="comment">//距离初始化为无穷大</span></span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<span class="comment">//小根堆</span></span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);<span class="comment">//插入距离和节点编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();<span class="comment">//取距离源点最近的点</span></span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ver = t.second, distance = t.first;<span class="comment">//ver:节点编号，distance:源点距离ver 的距离</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (st[ver]) <span class="keyword">continue</span>;<span class="comment">//如果距离已经确定，则跳过该点</span></span><br><span class="line">        st[ver] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[ver]; i != <span class="number">-1</span>; i = ne[i])<span class="comment">//更新ver所指向的节点距离</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[ver] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[ver] + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[j], j&#125;);<span class="comment">//距离变小，则入堆</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="built_in">add</span>(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">dijkstra</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="[AcWing 850. Dijkstra求最短路 II - AcWing](https://www.acwing.com/activity/content/problem/content/919/">Dijkstra求最短路 II</a>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span><span class="comment">//堆的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;<span class="comment">//堆里存储距离和节点编号</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m;<span class="comment">//节点数量和边数</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;<span class="comment">//邻接矩阵存储图,w是存储权</span></span><br><span class="line"><span class="type">int</span> dist[N];<span class="comment">//存储距离</span></span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//存储状态</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b,w[idx] = c,ne[idx] = h[a],h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">djs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; heap;<span class="comment">//小根堆</span></span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);<span class="comment">//插入距离和节点</span></span><br><span class="line">    <span class="keyword">while</span>(heap.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> ver = t.second,distance =t.first;<span class="comment">//ver:节点编号，distance:源点距离ver 的距离</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(st[ver]) <span class="keyword">continue</span>;<span class="comment">//已经有确定值了，就跳过</span></span><br><span class="line">        st[ver] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[ver];i!= <span class="number">-1</span>;i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j]&gt;dist[ver]+w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[ver] + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[j],j&#125;);<span class="comment">//找到更小的就入堆</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dist[n]==<span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">djs</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="bellman-ford求最短路"><a href="#bellman-ford求最短路" class="headerlink" title="bellman-ford求最短路"></a>bellman-ford求最短路</h2><p> 基本原理：逐遍的对图中每一个边去迭代计算起始点到其余各点的最短路径，执行N-1遍，最终得到起始点到其余各点的最短路径。（N为连通图结点数）<br> <a href="https://www.acwing.com/activity/content/problem/content/922/">有边数限制的最短路 </a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>, M = <span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123; <span class="comment">//使用结构体存储边，不用定义一大堆数组去加边</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="type">int</span> w;</span><br><span class="line">&#125; edges[M];<span class="comment">//把每个边保存下来即可</span></span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">int</span> back[N];<span class="comment">//备份数组防止串联</span></span><br><span class="line"><span class="type">int</span> n, m, k;<span class="comment">//k代表最短路径最多包涵k条边</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bellman_ford</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist); <span class="comment">//dist初始化位无穷，八字节3f3f3f3f大于1e9</span></span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;<span class="comment">//k次循环</span></span><br><span class="line">        <span class="built_in">memcpy</span>(back, dist, <span class="keyword">sizeof</span> dist);<span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;<span class="comment">//遍历所有边，而dijkstra是遍历所有顶点n*n</span></span><br><span class="line">            <span class="type">int</span> a = edges[j].a, b = edges[j].b, w = edges[j].w;</span><br><span class="line">            dist[b] = <span class="built_in">min</span>(dist[b], back[a] + w);</span><br><span class="line">            <span class="comment">//使用backup:避免给a更新后立马更新b, 这样b一次性最短路径就多了两条边出来</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,w;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;w;</span><br><span class="line">        edges[i] = &#123;a,b,w&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bellman_ford</span>();</span><br><span class="line">    <span class="keyword">if</span>(dist[n]&gt;<span class="number">0x3f3f3f3f</span>/<span class="number">2</span>) cout&lt;&lt;<span class="string">&quot;impossible&quot;</span>;<span class="comment">//避免两点都无穷大，权为其他数字导致最后结果为无穷大-某个数不等于无穷大的情况</span></span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;dist[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="spfa求最短路"><a href="#spfa求最短路" class="headerlink" title="spfa求最短路"></a>spfa求最短路</h2><p><a href="https://www.acwing.com/problem/content/853/">spfa求最短路</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> h[N], e[N], w[N], ne[N], idx;<span class="comment">//邻接表，存储图</span></span><br><span class="line"><span class="type">int</span> st[N];<span class="comment">//标记顶点是不是在队列中</span></span><br><span class="line"><span class="type">int</span> dist[N];<span class="comment">//保存最短路径的值</span></span><br><span class="line"><span class="type">int</span> q[N], hh, tt = <span class="number">-1</span>;<span class="comment">//队列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span>&#123;<span class="comment">//图中添加边和边的端点</span></span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    q[++tt]  =<span class="number">1</span>;</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    st[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tt&gt;=hh)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = q[hh++];</span><br><span class="line">        st[a] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[a];i!=<span class="number">-1</span>;i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> b = e[i],c = w[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[b]&gt;dist[a]+c)</span><br><span class="line">            &#123;</span><br><span class="line">                dist[b] = dist[a]+c;</span><br><span class="line">                <span class="keyword">if</span>(!st[b])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[++tt] = b;</span><br><span class="line">                    st[b] =<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);<span class="comment">//初始化邻接表</span></span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);<span class="comment">//初始化距离</span></span><br><span class="line">    <span class="type">int</span> n, m;<span class="comment">//保存点的数量和边的数量</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;<span class="comment">//读入每条边和边的端点</span></span><br><span class="line">        <span class="type">int</span> a, b, w;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; w;</span><br><span class="line">        <span class="built_in">add</span>(a, b, w);<span class="comment">//加入到邻接表</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">spfa</span>();</span><br><span class="line">    <span class="keyword">if</span>(dist[n] == <span class="number">0x3f3f3f3f</span> )<span class="comment">//如果到n点的距离是无穷，则不能到达 </span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;impossible&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; dist[n];<span class="comment">//否则能到达，输出距离</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Floyd求最短路"><a href="#Floyd求最短路" class="headerlink" title="Floyd求最短路"></a>Floyd求最短路</h2><p>简单粗暴</p><p><a href="[854. Floyd求最短路 - AcWing题库](https://www.acwing.com/problem/content/856/">Floyd求最短路</a>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>, INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="type">int</span> d[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k =<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            d[i][j] = <span class="built_in">min</span>(d[i][j],d[i][k]+d[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i==j) d[i][j] =<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> d[i][j] = INF;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">        d[x][y] = <span class="built_in">min</span>(d[x][y], z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">floyd</span>();</span><br><span class="line">    <span class="keyword">while</span>(k--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="type">int</span> t = d[a][b];</span><br><span class="line">        <span class="keyword">if</span>(t&gt;INF/<span class="number">2</span>) cout&lt;&lt;<span class="string">&quot;impossible&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;t&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prim算法求最小生成树"><a href="#Prim算法求最小生成树" class="headerlink" title="Prim算法求最小生成树"></a>Prim算法求最小生成树</h2><p>类似迪杰斯特拉算法，采用的都是贪心的思想</p><p><a href="[858. Prim算法求最小生成树 - AcWing题库](https://www.acwing.com/problem/content/860/">Prim算法求最小生成树</a>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接照搬海绵宝宝大佬的题解了，写的很详细</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> g[N][N];<span class="comment">//存储图</span></span><br><span class="line"><span class="type">int</span> dt[N];<span class="comment">//存储各个节点到生成树的距离</span></span><br><span class="line"><span class="type">int</span> st[N];<span class="comment">//节点是否被加入到生成树中</span></span><br><span class="line"><span class="type">int</span> pre[N];<span class="comment">//节点的前去节点</span></span><br><span class="line"><span class="type">int</span> n, m;<span class="comment">//n 个节点，m 条边</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dt,<span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dt));<span class="comment">//初始化距离数组为一个很大的数（10亿左右）</span></span><br><span class="line">    <span class="type">int</span> res= <span class="number">0</span>;</span><br><span class="line">    dt[<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//从 1 号节点开始生成 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//每次循环选出一个点加入到生成树</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)<span class="comment">//每个节点一次判断</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[j] &amp;&amp; (t == <span class="number">-1</span> || dt[j] &lt; dt[t]))<span class="comment">//如果没有在树中，且到树的距离最短，则选择该点</span></span><br><span class="line">                t = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2022.6.1 发现测试用例加强后，需要判断孤立点了</span></span><br><span class="line">        <span class="comment">//如果孤立点，直返输出不能，然后退出</span></span><br><span class="line">        <span class="keyword">if</span>(dt[t] == <span class="number">0x3f3f3f3f</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;impossible&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        st[t] = <span class="number">1</span>;<span class="comment">// 选择该点</span></span><br><span class="line">        res += dt[t];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//更新生成树外的点到生成树的距离</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dt[i] &gt; g[t][i] &amp;&amp; !st[i])<span class="comment">//从 t 到节点 i 的距离小于原来距离，则更新。</span></span><br><span class="line">            &#123;</span><br><span class="line">                dt[i] = g[t][i];<span class="comment">//更新距离</span></span><br><span class="line">                pre[i] = t;<span class="comment">//从 t 到 i 的距离更短，i 的前驱变为 t.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getPath</span><span class="params">()</span><span class="comment">//输出各个边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt; <span class="number">1</span>; i--)<span class="comment">//n 个节点，所以有 n-1 条边。</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; pre[i] &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; endl;<span class="comment">// i 是节点编号，pre[i] 是 i 节点的前驱节点。他们构成一条边。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(g));<span class="comment">//各个点之间的距离初始化成很大的数</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;<span class="comment">//输入节点数和边数</span></span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, w;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; w;<span class="comment">//输出边的两个顶点和权重</span></span><br><span class="line">        g[a][b] = g[b][a] = <span class="built_in">min</span>(g[a][b],w);<span class="comment">//存储权重</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">prim</span>();<span class="comment">//求最下生成树</span></span><br><span class="line">    <span class="comment">//getPath();//输出路径</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>动态规划所处理的问题是一个多阶段决策问题，一般由初始状态开始，通过对中间阶段决策的选择，达到结束状态。这些决策形成了一个决策序列，同时确定了完成整个过程的一条活动路线(通常是求最优的活动路线)。如图所示。动态规划的设计都有着一定的模式，一般要经历以下几个步骤。</p><p>初始状态→│决策１│→│决策２│→…→│决策ｎ│→结束状态</p><p><a href="[2. 01背包问题 - AcWing题库](https://www.acwing.com/problem/content/2/">01背包问题</a>)二维写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N= <span class="number">1005</span>;</span><br><span class="line"><span class="type">int</span> v[N];</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> m, n;</span><br><span class="line">  cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span>(j&lt;v[i])</span><br><span class="line">          &#123;</span><br><span class="line">              f[i][j] = f[i<span class="number">-1</span>][j];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> f[i][j] =<span class="built_in">max</span>(f[i<span class="number">-1</span>][j],f[i<span class="number">-1</span>][j-v[i]]+w[i]);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; f[m][n] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一维写法，注意要从大到小遍历,具体看<a href="[动态规划专题——背包问题_动态规划 背包_Iareges的博客-CSDN博客](https://blog.csdn.net/raelum/article/details/128996521">大佬的解释</a>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N], v[N];</span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= w[i]; j--)</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - w[i]] + v[i]);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; dp[m] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="[3. 完全背包问题 - AcWing题库](https://www.acwing.com/problem/content/3/">完全背包问题</a>)正常dp二维写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j] = f[i<span class="number">-1</span>][j];<span class="comment">//不选</span></span><br><span class="line">            <span class="keyword">if</span>(j&gt;=v[i])<span class="comment">//选</span></span><br><span class="line">                f[i][j] =<span class="built_in">max</span>(f[i<span class="number">-1</span>][j],f[i][j-v[i]]+w[i]);<span class="comment">//注意和一维相似但不同。</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体不同看</p><p>f[i , j ] = max( f[i-1,j] , f[i-1,j-v]+w ,  f[i-1,j-2<em>v]+2</em>w , f[i-1,j-3<em>v]+3</em>w , …..)<br>f[i , j-v]= max(            f[i-1,j-v]   ,  f[i-1,j-2<em>v] + w , f[i-1,j-3</em>v]+2*w , …..)<br>由上两式，可得出如下递推关系：<br>                        f[i][j]=max(f[i,j-v]+w , f[i-1] [j]) </p><p>一维写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =v[i];j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">                f[j] =<span class="built_in">max</span>(f[j],f[j-v[i]]+w[i]);<span class="comment">//不用考虑从大到小遍历，因为这里表达式时f[i][j-v[i]],不同于01背包的f[i-1][j-v[i]]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="[4. 多重背包问题 I - AcWing题库](https://www.acwing.com/problem/content/4/">多重背包问题 I</a>)</p><p>多重背包问题暴力写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 110</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> v[N],w[N],s[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)  cin&gt;&gt;v[i]&gt;&gt;w[i]&gt;&gt;s[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k =<span class="number">0</span>;k&lt;=s[i]&amp;&amp;k*v[i]&lt;=j;k++)</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j],f[i<span class="number">-1</span>][j-v[i]*k]+w[i]*k);</span><br><span class="line">                </span><br><span class="line">    cout&lt;&lt;f[n][m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多重背包问题优化</p><p>这个二进制优化思路相当好，原本枚举需要一个一个数，使用二进制的话可以极大降低枚举的次数。如找到1023，一个一个数要1023次，但是从1+2+4+8…+512这么数就只用了常数项次数。</p><p>证明：1+2 = 3，可以表示0~3，1+2+4可以表示0~7，1+2+4+8可以表示0~15….</p><p>这么做的目的本质上就是压缩查找范围，也就能达到优化的目的了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">12010</span>, M = <span class="number">2010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> v[N], w[N]; <span class="comment">//逐一枚举最大是N*logS</span></span><br><span class="line"><span class="type">int</span> f[M]; <span class="comment">// 体积&lt;M</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>; <span class="comment">//分组的组别</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,s;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;s;</span><br><span class="line">        <span class="type">int</span> k =<span class="number">1</span>;<span class="comment">// 组别里面的个数</span></span><br><span class="line">        <span class="keyword">while</span>(k&lt;=s)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            v[cnt]=a*k; <span class="comment">//整体体积</span></span><br><span class="line">            w[cnt] = b * k; <span class="comment">// 整体价值</span></span><br><span class="line">            s-=k;</span><br><span class="line">            k*=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s)<span class="comment">//如果s还有剩余就再加一组</span></span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            v[cnt] = a*s;</span><br><span class="line">            w[cnt] = b*s;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    n = cnt ; <span class="comment">//枚举次数正式由个数变成组别数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//一维01背包优化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =m;j&gt;=v[i];j--)</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j],f[j-v[i]]+w[i]);</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;f[m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AcWing算法基础课学习记录&quot;&gt;&lt;a href=&quot;#AcWing算法基础课学习记录&quot; class=&quot;headerlink&quot; title=&quot;AcWing算法基础课学习记录&quot;&gt;&lt;/a&gt;AcWing算法基础课学习记录&lt;/h1&gt;&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="算法日志" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="数据结构与算法" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="Acwing" scheme="http://example.com/tags/Acwing/"/>
    
    <category term="刷题日志" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(第六章)完结篇</title>
    <link href="http://example.com/2022/12/20/408-%E8%AE%A1%E7%BD%91-6/"/>
    <id>http://example.com/2022/12/20/408-%E8%AE%A1%E7%BD%91-6/</id>
    <published>2022-12-20T12:18:48.000Z</published>
    <updated>2022-12-22T12:33:21.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><h3 id="6-1应用层概述"><a href="#6-1应用层概述" class="headerlink" title="6.1应用层概述"></a>6.1应用层概述</h3><p>应用层是计算机网络体系结构的最顶层，是设计和建立计算机网络的最终目的</p><h3 id="6-2客户-服务器方式-C-S方式-和对等方式-P2P方式"><a href="#6-2客户-服务器方式-C-S方式-和对等方式-P2P方式" class="headerlink" title="6.2客户/服务器方式(C/S方式)和对等方式(P2P方式)"></a>6.2客户/服务器方式(C/S方式)和对等方式(P2P方式)</h3><p>客户和服务器是指通信中涉及的两个应用进程，客户是服务请求方，<strong>服务器是服务提供方</strong>；<strong>服务器总是运行状态并等待客户的服务请求。服务汽油固定端口号（HTTP服务器默认端口号80），而运行服务器的主机也有固定的IP</strong>。</p><p>基于C/S方式的应用服务通常是服务集中型，由于一对多服务因此常会出现服务器计算机跟不上众多客户机请求的情况，为此常用<strong>计算机群集构建一个强大的虚拟服务器</strong>。</p><p>对等—在P2P中<strong>没有固定的服务请求者和服务提供者</strong>。分布在网络边缘各端系统中的应用进程是对等的，被称为对等方。<strong>对等方之间直接通信。</strong></p><p>基于p2p的应用是<strong>服务分散型</strong>的，p2p最突出的特性是<strong>可扩展性</strong>，<strong>系统性能不会因规模的增大而降低，具有成本上的优势。</strong></p><h3 id="6-3动态主机配置协议DHCP"><a href="#6-3动态主机配置协议DHCP" class="headerlink" title="6.3动态主机配置协议DHCP"></a>6.3动态主机配置协议DHCP</h3><p>DHCP提供了有一种机制称为即插即用联网。机制<strong>允许一台计算机加入新网络时可自动获取IP地址等网络配置信息而不用手工参与</strong>。</p><p>DHCP报文在运输层使用udp协议封装</p><p>DHCP客户在未获取到IP地址时使用地址0.0.0.0</p><h3 id="6-4域名系统DNS"><a href="#6-4域名系统DNS" class="headerlink" title="6.4域名系统DNS"></a>6.4域名系统DNS</h3><p>因特网采用层次树状结构的域名结构</p><p>顶级域名TLD分为国家顶级域名nTLD、通用顶级域名gTLD、反向域arpa，国家顶级域名下注册二级域名均由该国家自行设定。</p><p>DNS使用<strong>分布在各地的域名服务器</strong>来实现域名到IP地址的转换</p><p><strong>域名服务器可以划分为四种不同类型：根域名服务器-通常并不直接对域名进行解析而是返回该域名所属顶级域名的顶级域名服务器的IP地址、顶级域名服务器-负责管理在该顶级域名服务器注册的所有二级域名、权限域名服务器-负责管理某个区的域名、本地域名服务器-起着代理作用，会将该报文转发到上述的域名服务器的等级结构中，也叫默认域名服务器。**</strong></p><p>域名解析过程—递归查询、迭代查询<img src="/2022/12/20/408-%E8%AE%A1%E7%BD%91-6/image-20221220170225517.png" alt="image-20221220170225517"></p><p>为了提高DNS查询效率，并减轻根域名服务器的负荷和减少因特网上DNS查询报文数量，在域名服务器和主机中广泛使用了<strong>高速缓存</strong>。</p><p>DNS报文使用运输层的UDP协议进行封装，<strong>运输层端口号为53.</strong></p><h3 id="6-5-文件传送协议FTP"><a href="#6-5-文件传送协议FTP" class="headerlink" title="6.5 文件传送协议FTP"></a>6.5 文件传送协议FTP</h3><p>因特网上使用最广泛的文件传送协议—FTP提供交互式访问，<strong>允许客户指明文件的类型与格式并允许文件具有存取权限，FTP屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件。</strong></p><p> FTP客户与服务器要建立以下两个并行的TCP连接：1.<strong>控制连接</strong>-在整个会话期一直保持打开，用于传送FTP相关控制命令 2.<strong>数据连接</strong>-用于文件传输在每次文件传输时才建立，传输结束就关闭。 <strong>默认情况下FTP使用TCP 21端口进行控制连接，TCP 20端口进行数据连接，主动方式使用TCP 20端口，被动方式由服务器和客户端自行决定。</strong></p><h3 id="6-6电子邮件"><a href="#6-6电子邮件" class="headerlink" title="6.6电子邮件"></a>6.6电子邮件</h3><p>电子邮件系统采用<strong>客户/服务器方式</strong>，由<strong>用户代理、邮件服务器和电子邮件所需的协议</strong>构成<img src="/2022/12/20/408-%E8%AE%A1%E7%BD%91-6/image-20221221160031680.png" alt="image-20221221160031680"></p><p>简单邮件转发协议SMTP工作原理<img src="/2022/12/20/408-%E8%AE%A1%E7%BD%91-6/image-20221221160254725.png" alt="image-20221221160254725"></p><p>一个电子邮件由信封和内容两部分，内容由首部和主体两部分构成。</p><p><strong>SMTP协议只能传送ASCII码文本数据</strong>，不能传送可执行文件或其他二进制对象。</p><p>常见邮件读取协议：邮局协议POP—<strong>用户只能下载并删除方式或下载并保留方式下载到用户计算机，不允许用户在邮件服务器上管理文件</strong>。因特网邮件访问协议IMAP—<strong>用户在自己计算机上可以操控邮件服务器中的邮箱</strong>。这两种协议都采用<strong>基于TCP连接的客户/服务器方式</strong></p><p>基于万维网的电子邮件—通过浏览器登录邮件服务器万维网网站。</p><h3 id="6-7万维网www"><a href="#6-7万维网www" class="headerlink" title="6.7万维网www"></a>6.7万维网www</h3><p>万维网<strong>并非某种特殊网络，而是运行在因特网上的一个分布式应用</strong>，利用网页之间的<strong>超链接</strong>将不同网站的网页连接成一张逻辑上的</p><p>浏览器最重要的部分式渲染引擎也就是浏览器内核</p><p>万维网使用同一资源定位符URL来指明资源位置</p><p>URL组成<img src="/2022/12/20/408-%E8%AE%A1%E7%BD%91-6/image-20221221162603758.png" alt="image-20221221162603758"></p><p>HTML—描述网页结构和内容，CSS描述网页样式，JS控制网页行为</p><p>HTTP/1.0采用非持续连接方式，每请求一个文档就要有两倍的RTT的开销，HTTP/1.1采用持续连接方式,还可以流水线工作。</p><p>HTTP是<strong>面向文本</strong>的，每一个字段都是ASCII码串，每个字段长度不确定<img src="/2022/12/20/408-%E8%AE%A1%E7%BD%91-6/image-20221221163254755.png" alt="image-20221221163254755"></p><p>浏览器使用cookie在服务器上记录用户信息</p><p>万维网缓存又叫Web缓存，位于中间系统上的Web缓存又叫代理服务器，Web缓存把最近一些请求和响应暂存在本地磁盘中，当新请求到达时，若新请求到达时，<strong>若发现这个请求与暂时存放的请求相同就返回暂存的响应，而不需要按URL的地址再次去因特网访问该资源。</strong></p><p>至此计算机网络课程结束！目前时把计网课程大概浏览了一遍，唉道阻且长呀。接下来这几天差不多花七天时间把Linux看完吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第六章&quot;&gt;&lt;a href=&quot;#第六章&quot; class=&quot;headerlink&quot; title=&quot;第六章&quot;&gt;&lt;/a&gt;第六章&lt;/h2&gt;&lt;h3 id=&quot;6-1应用层概述&quot;&gt;&lt;a href=&quot;#6-1应用层概述&quot; class=&quot;headerlink&quot; title=&quot;6.1应用</summary>
      
    
    
    
    <category term="考研复习" scheme="http://example.com/categories/%E8%80%83%E7%A0%94%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(第五章)</title>
    <link href="http://example.com/2022/12/20/408-%E8%AE%A1%E7%BD%91-5/"/>
    <id>http://example.com/2022/12/20/408-%E8%AE%A1%E7%BD%91-5/</id>
    <published>2022-12-20T12:18:48.000Z</published>
    <updated>2022-12-20T12:23:15.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><h3 id="5-1运输层概述"><a href="#5-1运输层概述" class="headerlink" title="5.1运输层概述"></a>5.1运输层概述</h3><p>如何为运行在不同主机上的应用进程提供直接的通信服务时运输层的任务，运输层直接为应用进程间的逻辑通信提供服务。</p><h3 id="5-2运输层端口号、复用与分用的概念"><a href="#5-2运输层端口号、复用与分用的概念" class="headerlink" title="5.2运输层端口号、复用与分用的概念"></a>5.2运输层端口号、复用与分用的概念</h3><p>运行在计算机的进程使用<strong>进程标识符PID标记</strong>，不同操作系统不同格式进程标识符，为了不同操作系统进程之间通信必须使用<strong>统一方法对 TCP/IP体系的应用进程标识。</strong><br>TCP/IP体系运输层使用<strong>端口号</strong>来区分不同进程-端口号使用16比特表示，取值范围0~65535；<strong>端口号只有本地意义，即只是为了表示本计算机应用层的各进程，不同计算机的相通端口号没有联系。</strong><br>发送方复用和接收方分用—UDP和TCP都得封装为IP<img src="/2022/12/20/408-%E8%AE%A1%E7%BD%91-5/image-20221219152354194.png" alt="image-20221219152354194"></p><p>常用协议熟知端口号<img src="/2022/12/20/408-%E8%AE%A1%E7%BD%91-5/image-20221219152500645.png" alt="image-20221219152500645"></p><h3 id="5-3UDP和TCP对比"><a href="#5-3UDP和TCP对比" class="headerlink" title="5.3UDP和TCP对比"></a>5.3UDP和TCP对比</h3><p>UDP—用户数据报协议，无需连接，支持单薄，多播及广播；面向应用报文的；提供无连接不可靠传输服务(适用于实时应用)；首部仅有八字节</p><p>TCP—传输控制协议，面向连接，只支持单播；面向字节流的；提供面向连接的可靠服务(适用于要求可靠的服务)；首部最小20字节最大60字节。</p><h3 id="5-4-TCP流量控制"><a href="#5-4-TCP流量控制" class="headerlink" title="5.4 TCP流量控制"></a>5.4 TCP流量控制</h3><p>流量控制-让发送方的发送频率不要太块，要让接收方来得及接收</p><p> 利用滑动窗口来实现流量控制—TCP利用自己<strong>接收窗口</strong>大小来限制发送方发送窗口大；发送方接收到<strong>零窗口通知</strong>后启动<strong>持续计时器</strong>，计时器超时向接收方发送<strong>零窗口探测报文</strong>。</p><h3 id="5-5-TCP的拥塞控制"><a href="#5-5-TCP的拥塞控制" class="headerlink" title="5.5 TCP的拥塞控制"></a>5.5 TCP的拥塞控制</h3><p>拥塞—在某段时间对网络某i资源的需求超过了该资源所能提供的可用部分，网络性能就会变坏。出现拥塞而不控制会导致整个网络吞吐量随输入负荷的增大而下降。使用满开始、拥塞避免、快重传和快恢复四种算法解决。</p><p>发送方维护一个拥塞窗口cwnd的状态变量，值为网络拥塞程度，动态变化。<strong>维护原则</strong>：只要没出现拥塞，拥塞窗口就大一点，出现拥塞，窗口就减少一点；<strong>判断拥塞出现依据</strong>：发生超时重传；<strong>发送方将拥塞窗口作为发送窗口swnd</strong>。</p><p>当维护一个慢开始门限ssthresh状态变量：</p><ul><li>当cwnd小于ssthresh，使用慢开始算法；大于时停止慢开始采用拥塞避免算法；等于时可以任意使用二者之一。</li></ul><p>慢开始算法-每个传输轮次结束后拥塞窗口逐渐加大，不断×2</p><p>拥塞避免算法-每次拥塞窗口线性加一，每当重传计时器超时时，ssthresh更新为cwnd值的一半，cwnd值减少为1并重新开始慢开始算法。</p><p>为了避免个别报文段丢失而导致误判拥塞造成降低传输效率，快重传算法可以让发送方尽早知道个别报文段丢失。快重传—<strong>发送方尽快重传</strong>而不是等超时计时器超是再重传：要求接收方<strong>立即发送确认</strong>，即使收到失序报文段也要发出对已收到的报文段的<strong>重复确认</strong>，发送方一旦收到<strong>三个连续重复确认</strong>则将相应报文段<strong>立即重传</strong>。</p><p>发送方一旦收到三个确认重复，便不启动慢开始算法而是执行快恢复算法—发送方将慢开始门限值和cwnd值调整为当前窗口的一半，开始执行拥塞避免算法。</p><h3 id="5-6-TCP超时重传时间选择"><a href="#5-6-TCP超时重传时间选择" class="headerlink" title="5.6 TCP超时重传时间选择"></a>5.6 TCP超时重传时间选择</h3><p>超时重传时间RTO理论上应略大于往返时间RTT，但是有很多情况要考虑所以不能一概而论。</p><p>RFC6298建议使用下式计算RTO：</p><p><img src="/2022/12/20/408-%E8%AE%A1%E7%BD%91-5/image-20221219170825674.png" alt="image-20221219170825674"></p><p>  <strong>出现超时重传时，新RTO值为2倍旧RTO值</strong></p><h3 id="5-7-TCP可靠传输实现"><a href="#5-7-TCP可靠传输实现" class="headerlink" title="5.7 TCP可靠传输实现"></a>5.7 TCP可靠传输实现</h3><p>TCP基于以字节为单位的滑动窗口来实现可靠传输。</p><p>发送方的发送窗口并不总是和接收方的接收窗口一样大，对于不按序到达的数据TCP会先临时存放再接收窗口中，在按序交付上层应用进程。</p><p>TCP要求接收方必须有累计确认和捎带确认机制，接收方不应过分推迟发送确认</p><p>TCP通信是全双工通信。</p><h3 id="5-8TCP的余数连接管理"><a href="#5-8TCP的余数连接管理" class="headerlink" title="5.8TCP的余数连接管理"></a>5.8TCP的余数连接管理</h3><p>TCP运输连接三阶段—1.建立TCP连接 2.数据传输 3.释放TCP连接</p><p><strong>TCP三次握手</strong>建立连接—客户端发送TCP连接请求(SYN=1,seq=x)；服务器收到后发送针对TCP连接请求的确认（SYN =1 ACK =1 seq =y ack =x+1）；客户端收到后发送针对TCP连接请求的确认的确认 ACK =1 seq =x+1 ack =y+1），完成连接的建立开始传输数据。为了防止已失效的连接请求报文段突然又传送到了TCP服务器而导致错误，因此三次握手是必须的。</p><p><strong>TCP四次握手</strong>释放连接—客户端发送TCP连接释放(FIN =1 ACK =1 seq= u  ack =v) 服务器收到后发送TCP普通确认(ACK =1  seq =v ack =u+1) 然后通知应用进程，被动关闭后服务器发送TCP连接释放(FIN =1 ACK =1 seq =w  ack =u+1) 客户端收到后发送TCP普通确认(ACK=1 seq =u+1 ack=w+1) 并在等待2MSL后关闭，服务器收到后关闭。 MSL—最长报文段寿命，RFC793建议为2分钟</p><p> TCP服务器进程每收到一次TCP客户进程的数据就重新设置并启动<strong>保活计时器</strong>(2小时定时)。若保活定时器周期内未收到TCP客户进程发来的数据，则<strong>当保活计时器到时后，TCP服务器进程向TCP客户进程发送一个探测报文段</strong>，后每75秒发送一次，若发送10个后仍无响应则服务器认为客户进程主机出现故障便关闭连接。</p><h3 id="5-9TCP报文段首部格式"><a href="#5-9TCP报文段首部格式" class="headerlink" title="5.9TCP报文段首部格式"></a>5.9TCP报文段首部格式</h3><p>TCP报文段由<strong>首部</strong>和<strong>数据载荷</strong>构成  </p><p><a href="https://www.jianshu.com/p/a19c336c5114">具体格式</a>查看大佬的文章</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第五章&quot;&gt;&lt;a href=&quot;#第五章&quot; class=&quot;headerlink&quot; title=&quot;第五章&quot;&gt;&lt;/a&gt;第五章&lt;/h2&gt;&lt;h3 id=&quot;5-1运输层概述&quot;&gt;&lt;a href=&quot;#5-1运输层概述&quot; class=&quot;headerlink&quot; title=&quot;5.1运输</summary>
      
    
    
    
    <category term="考研复习" scheme="http://example.com/categories/%E8%80%83%E7%A0%94%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(第四章)</title>
    <link href="http://example.com/2022/12/20/408-%E8%AE%A1%E7%BD%91-4/"/>
    <id>http://example.com/2022/12/20/408-%E8%AE%A1%E7%BD%91-4/</id>
    <published>2022-12-20T12:18:48.000Z</published>
    <updated>2022-12-20T12:21:47.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="4-1网络层概述"><a href="#4-1网络层概述" class="headerlink" title="4.1网络层概述"></a>4.1网络层概述</h3><p>主要任务-<strong>实现网络互连</strong>进而<strong>实现数据包在个网络之间的传输</strong></p><h3 id="4-2网络层提供的服务"><a href="#4-2网络层提供的服务" class="headerlink" title="4.2网络层提供的服务"></a>4.2网络层提供的服务</h3><p><img src="/2022/12/20/408-%E8%AE%A1%E7%BD%91-4/image-20221216163751712.png" alt="image-20221216163751712"></p><h3 id="4-3IPv4"><a href="#4-3IPv4" class="headerlink" title="4.3IPv4"></a>4.3IPv4</h3><p>IPv4地址是每台主机的每一个接口的<strong>唯一的32比特的标识符</strong>，采用<strong>点分十进制</strong>表示方法—每八位分成一组，每组转化为十进制，组与组之间用点分割。</p><p>除二取余法：将十进制每一次除2，记录余数，余数串反过来就是二进制数</p><p>不同类别IPv4地址：A类(八位网络号固定首位0，24位主机号)、B类(16位网络号固定首位10，16位主机号)、C类(24位网络号固定首位110，9位主机号)、D类(固定首位1110，多播地址)、E类(固定首位1111，保留号)，只有ABC类而分配给主机路由器</p><p>总结：小于127为A类，128~191为B类，192~223为C类，三种情况不能指派：1.A类网络号0和127；2.主机号为全0，这是网络地址；3，主机号为全1，这是广播地址</p><p><img src="/2022/12/20/408-%E8%AE%A1%E7%BD%91-4/image-20221216170713858.png" alt="image-20221216170713858"></p><p>32比特二点子网掩码可以表明分类IP地址的主机号部分 用了几个比特作为子网号。子网掩码用连续的比特1对应网络号和子网号</p><p>默认子网掩码是指在为划分子网的情况下使用的子网掩码—总结为每一类主机号全为0</p><p><strong>无分类编址</strong>来结局IP紧张问题，<strong>无分类域间路由选择CIDR</strong>—消除了传统ABC类地址以及划分子网的概念，可以更有效地分配IPv4地址空间。CIDR使用斜线记法，在斜线后面写上网络前缀所占的比特数量</p><p>路由聚合(构造超网)-网络前缀越长，地址块越小路由越具体。 方法-找共同前缀。</p><p> IPv4的应用规划—定长的子网掩码FLSM（使用同一个子网掩码来划分子网，子网划分方式不灵活：只能划分出2的n次方个子网，每个子网分配IP地址数量相同容易浪费）2.变长的子网掩码VLSM（使用不同子网掩码来划分子网，可以按需分配，每个子网分配的IP地址数量可以不同，减少浪费)</p><h3 id="4-4-IP数据报的发送和转发过程"><a href="#4-4-IP数据报的发送和转发过程" class="headerlink" title="4.4 IP数据报的发送和转发过程"></a>4.4 IP数据报的发送和转发过程</h3><p><strong>主机发送IP数据报</strong>-判断目的主机是否与自己在同一个网络，若在同一网络，属于<strong>直接交付</strong>；否则属于<strong>间接交付</strong>，传输给主机所在网络的默认网关。</p><p><strong>路由器转发IP数据包</strong>-1.检查IP数据报首部是否出错，出错直接丢弃并报告源主机；2.根据IP数据报的目的地址在路由表中查找匹配的条目，找到则转发给条目中指示的吓一跳，否则丢弃并报告。</p><h3 id="4-5静态路由配置及其可能产生的路由环路问题"><a href="#4-5静态路由配置及其可能产生的路由环路问题" class="headerlink" title="4.5静态路由配置及其可能产生的路由环路问题"></a>4.5静态路由配置及其可能产生的路由环路问题</h3><p>静态路由配置指用户或网络管理员使用路由器的相关命令给路由器<strong>人工配置路由表</strong>，方式简单开销小，但不能即使适应网络状态（流量、拓扑等）的变化。</p><p>网络故障、 聚合了不存在的网络、配置错误会导致产生路由环路的错误</p><p>路由条目类型—直连网络、静态路由(人工配置)、动态路由(路由选择协议)</p><p>特殊的静态路由条目—默认理由(目的网络为0.0.0.0，地址掩码为0.0.0.0)、特定主机路由(目的网络为特定主机的IP地址，地址掩码为255.255.255.255)、黑洞路由(下一跳为null0)</p><h3 id="4-6路由选择协议"><a href="#4-6路由选择协议" class="headerlink" title="4.6路由选择协议"></a>4.6路由选择协议</h3><p>因特网采用路由选择协议特点：自适应、分布式、分层次</p><p>路由信息协议RIP—使用跳数来衡量到达目的网络的距离，<strong>等于16时相当于不可达</strong>，只适用于小型互联网。RIP认为好路由是所通过路由器数量最少的路由。更新规则如下：<img src="/2022/12/20/408-%E8%AE%A1%E7%BD%91-4/image-20221218152902345.png" alt="image-20221218152902345">RIP存在坏消息传播慢的问题。</p><p>开放最短路径优先OSPF—使用迪杰斯特拉最短路径算法，基于链路状态不会产生路由环路，不限制网络规模收敛速度快。通过交互问候分组建立邻居关系 <img src="/2022/12/20/408-%E8%AE%A1%E7%BD%91-4/image-20221218155100982.png" alt="image-20221218155100982" style="zoom: 150%;"></p><p>边界网关协议BGP<img src="/2022/12/20/408-%E8%AE%A1%E7%BD%91-4/image-20221218161541787.png" alt="image-20221218161541787"></p><h3 id="4-7-IPv4数据报首部格式"><a href="#4-7-IPv4数据报首部格式" class="headerlink" title="4.7 IPv4数据报首部格式"></a>4.7 IPv4数据报首部格式</h3><p>内容还挺多的，<img src="/2022/12/20/408-%E8%AE%A1%E7%BD%91-4/image-20221218164546610.png" alt="image-20221218164546610"></p><p>具体复习看<a href="https://blog.csdn.net/m0_47988201/article/details/122895189?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167135313616800192245955%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167135313616800192245955&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-122895189-null-null.142^v68^control,201^v4^add_ask,213^v2^t3_esquery_v2&amp;utm_term=IPv4%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%A0%BC%E5%BC%8F&amp;spm=1018.2226.3001.4187">大佬总结</a>吧</p><h3 id="4-8-网际控制报文协议ICMP"><a href="#4-8-网际控制报文协议ICMP" class="headerlink" title="4.8 网际控制报文协议ICMP"></a>4.8 网际控制报文协议ICMP</h3><p>主机或路由器使用ICMP发送<strong>差错报告报文</strong>和<strong>询问报文</strong>，ICMP被封装在IP数据报中发送。<br>差错报告报文—1.终点不可达 2.源点抑制 3.时间超过 4.参数问题 5.改变路由(重定向)<br>不发送差错报告报文的的情况：1.对ICMP差错报文不发送2.对第一个分片的数据报片的所有后续数据报片不发送3.对具有多播地址的数据报不发送4.对具有特殊地址（如127.0.0.0或0.0.0.0）的数据包不发送<br>ICMP询问报文—回送请求和回答、时间戳请求和回答<br>ICMP应用—分组网间探测PING、跟踪路由traceroute</p><h3 id="4-9虚拟专用网VPN与网络地址转换NAT"><a href="#4-9虚拟专用网VPN与网络地址转换NAT" class="headerlink" title="4.9虚拟专用网VPN与网络地址转换NAT"></a>4.9虚拟专用网VPN与网络地址转换NAT</h3><p><strong>VPN—利用公网的因特网作为本机构各专用网之间的通信载体</strong>；同意机构不同部门的内部网络构成VPN称为<strong>内联网VPN</strong>，有时一个机构VPN需要某些外部机构参加进来这样的叫做<strong>外联网VPN</strong>；VPN要保证传输数据的安全性，会将原始的内部数据进行加密，在将其封装成为在因特网上发送到外部的数据报。</p><p>NAT—是<strong>应用大量内部专用地址的专用网络用户共享少量外部全球地址</strong>来访问因特网上的主机和资源以此缓解IP地址空间耗尽的问题。利用<strong>运输层端口号和IP地址一起进行转换</strong>使一个全球IP地址使多个拥有本地地址的主机同时和因特网上的主机通信，这种转换技术叫网络地址与端口号转换NAPT(类似不同小孩抢一个手机玩)，因此<strong>外网主动与内网主机进行通信时遇到NAT会出现问题</strong>，这也带来了一定安全性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第四章&quot;&gt;&lt;a href=&quot;#第四章&quot; class=&quot;headerlink&quot; title=&quot;第四章&quot;&gt;&lt;/a&gt;第四章&lt;/h2&gt;&lt;h3 id=&quot;4-1网络层概述&quot;&gt;&lt;a href=&quot;#4-1网络层概述&quot; class=&quot;headerlink&quot; title=&quot;4.1网络</summary>
      
    
    
    
    <category term="考研复习" scheme="http://example.com/categories/%E8%80%83%E7%A0%94%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(第三章)</title>
    <link href="http://example.com/2022/12/16/408-%E8%AE%A1%E7%BD%91-3/"/>
    <id>http://example.com/2022/12/16/408-%E8%AE%A1%E7%BD%91-3/</id>
    <published>2022-12-16T09:34:32.000Z</published>
    <updated>2022-12-16T09:38:22.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="3-1-数据链路层概述"><a href="#3-1-数据链路层概述" class="headerlink" title="3.1 数据链路层概述"></a>3.1 数据链路层概述</h3><p>链路-从一个结点到相邻结点的一段物理线路，中间没有任何其他交换结点</p><p>数据链路-把实现通信协议的硬件和软件加到链路上</p><p>数据链路层以帧为单位传输和处理数据</p><p>三个重要问题：封装成帧、差错检测、可靠传输-实现发送方发什么，接收方就能收到什么称为可靠传输</p><h3 id="3-2-封装成帧"><a href="#3-2-封装成帧" class="headerlink" title="3.2 封装成帧"></a>3.2 封装成帧</h3><p>封装成帧是指数据链路层给上层交付的协议数据单位添加帧头和帧尾使之成为帧。帧头和帧尾包含有重要的控制信息，作用之一是帧定界。</p><p>透明传输-<strong>数据链路层对上层交付的传输数据没有任何限制</strong></p><p>为了提高传输效率应使帧的数据部分长度尽可能大些，每种数据链路层协议都规定了帧的数据部分的长度上限</p><h3 id="3-3差错检测"><a href="#3-3差错检测" class="headerlink" title="3.3差错检测"></a>3.3差错检测</h3><p>比特传输出现差错：1变为0，0变为1是<strong>比特差错</strong></p><p><strong>误码率BER</strong>-在一段时间内，传输错误的比特占传输比特总数的比率</p><p>奇偶校验-在待发数据后面添加一位奇偶校验位，是整个数据(包括所添加的校验位在内)中‘1’的个数位奇数(奇校验)或偶数(偶校验)，如果有<strong>奇数</strong>个位发生误码，会导致<strong>奇偶性发生变化</strong>，表示出现误码，偶数个位不能检查出误码</p><p>循环冗余校验CRC-收发双方约定好一个生成多项式G(x)；发送方基于带发送数据和生成多项式计算出差错检测码<strong>(冗余码)</strong>,将其添加到待传输数据的后面一起传输；接收方通过生成多项式来计算1收到的数据是否产生了误码。</p><p><img src="/2022/12/16/408-%E8%AE%A1%E7%BD%91-3/image-20221212162457637.png" alt="image-20221212162457637"></p><p>计算方法：1.<strong>构造被除数</strong>-待发送信息后面添加生成多项式最高次数个0；2.<strong>构造除数</strong>-生成多项式系数构成的比特串；3.做除法(进行二进制异或运算)；4.检查余数-余数位数与生成多项式最高次数相同，若位数不够则在前面补0</p><h3 id="3-4可靠传输的基本概念"><a href="#3-4可靠传输的基本概念" class="headerlink" title="3.4可靠传输的基本概念"></a>3.4可靠传输的基本概念</h3><p>FCS字段-检错码</p><p>不可靠传输服务-检测到误码时仅仅丢弃有误码的帧</p><p>可靠传输服务-想办法实现发送端发送什么，接收端就收到什么</p><p>从整个计网体系来看，传输差错还包括<strong>分组差错、分组失序和分组重复</strong></p><p>可靠传输服务不局限于数据链路层：网际层-IP向上层提供无连接、不可靠传输服务，运输层-TCP提供面向连接的可靠服务，UDP提供无连接不可靠传输服务</p><h3 id="3-5可靠传输的实现机制"><a href="#3-5可靠传输的实现机制" class="headerlink" title="3.5可靠传输的实现机制"></a>3.5可靠传输的实现机制</h3><p><strong>停止-等待协议SW</strong>：</p><p>1.为了避免发送方一直等待接收方ACK或NAK，启动超时计时器，到了重传时间则重传数据分组，称为<strong>超时重传</strong>。</p><p>2.为了<strong>避免分组重复</strong>，必须给每个分组带上序号,<strong>只需用一个比特编号</strong>表示和上次不同即可</p><p> 3.信道利用率U =Td(发送时延)/(Td+RTT(往返时间)+Ta),RTT远大于发送时延时信道利用率非常低</p><p><strong>回退N帧协议GBN</strong></p><p>1.概念：<strong>采用三个比特给分组编号，发送窗口尺寸Wt取值为1到2的三次方-1，接收窗口尺寸Wr为1.</strong>发送数据时发送窗口Wt个数据，到接收方按照每次Wr个接收,发送数据也将从Wt中依次减少并且删除缓存，下一批数据依次进入发送窗口，有点类似滑动窗口.</p><p>接收方不一定要对数据分组逐个发送确认，而是可以在<strong>收到几个数据分组后对按序到达的最有一个分组发送确认</strong>，ACKn表示序号为n及以前的所有数据已正确接收，即使确认分组丢失发送方也可能不必重传。</p><p>出现差错时，接收方抛弃所有数据，发送重复的ACKn，发送方收到后重新发送数据，实现回退n帧的效果。</p><p>发送窗口尺寸超过上限将导致接收方无法分辨新旧数据分组，导致分组重复</p><p><strong>选择重传协议SR</strong></p><p>接收窗口WR大于1，以便<strong>接收方先收下失序到达但无误码并且序号落在接收窗口的那些数据分组</strong>，等所缺分组收齐后再送交上层。为了是发送方仅重传出现差错的分组，接收方必须对每个正确接收到的数据分组逐一确认，只有再按序接收数据分组后接收窗口才能滑动。发送方类似未按序到达的确认分组要记录，防止超时重发。</p><h3 id="3-5点对点协议PPP"><a href="#3-5点对点协议PPP" class="headerlink" title="3.5点对点协议PPP"></a>3.5点对点协议PPP</h3><p>点对点协议时目前使用最广泛的点对点数据链路层协议</p><p> 帧格式<img src="/2022/12/16/408-%E8%AE%A1%E7%BD%91-3/image-20221213155341243.png" alt="image-20221213155341243"></p><p>透明传输—<strong>面向字节的异步链路**</strong>采用在数据部分插入转义字符的字节填充发，如发送数据中出现7D转为7E+5D，接收后再专回来；<strong>面对比特的同步链路**</strong>采用插入比特0的比特填充法，如发送方发现5个连续的比特1，则立刻填充1个比特0，发送方同理删除</p><p><img src="/2022/12/16/408-%E8%AE%A1%E7%BD%91-3/image-20221213155955174.png" alt="image-20221213155955174"></p><h3 id="3-6-媒体接入控制"><a href="#3-6-媒体接入控制" class="headerlink" title="3.6 媒体接入控制"></a>3.6 媒体接入控制</h3><p>基本概念-共享信道要着重考虑的一个问题就是如何协调多个发送和接收站点对一个共享传输媒体的占用，即媒体接入控制MAC</p><p>信道复用-复用就是通过一条物理线路同时传输多路用户的信号，当网络中传输媒体的传输容量大于读条单一信道传输的总通信量时，可利用复用技术在一条物理线路上建立多条通信信道来充分利用传输媒体的带宽。</p><p>频分复用FDM、时分复用TDM、波分复用WDM、码分复用CDM</p><p>码分复用中每一比特时间再划分为m个短的间隔称为码片，使用CDMA的每一个站被指派唯一一个的m bit码片序列，一个站如果要发送比特1就发送他自己的m bit码片序列，发送比特0则发送码片序列的反码。分配给每个站的码片序列必须各不相同，并且必须相互正交。</p><p>判断是否正交：<img src="/2022/12/16/408-%E8%AE%A1%E7%BD%91-3/image-20221213163554385.png" alt="image-20221213163554385"></p><p>CD协议——工作原理：动态接入控制—随机接入：<strong>多址接入MA</strong>-多个站连接在一条总线上竞争使用总线；<strong>载波监听CS</strong>-每个站在发送帧前检测总线上是否有其他站点在发生，空闲则发送，否则继续检测等待总线转为空闲96比特时间然后发送；<strong>碰撞检测CD</strong>每一个正在发送帧的站便发送边检测碰撞，发现出现碰撞理科停止发送，一段随机时间后再次发送。</p><p>CD协议——以太网的争用期：以太网端到端往返传播时延2ε称为争用期或碰撞窗口，过了争用期还没检测到碰撞则肯定不会发生碰撞；以太网发送帧的主机越多往返传播时延越大，碰撞概率越大，因此共享式以太网不能连接太多的主机，使用总线也不能太长。</p><p>CD协议——最小帧长-争用期×数据传播速率，对于10Mbps的传统以太网规定最小帧长为64字节即512比特(512比特时间即为争用期)，确保主机可在帧发送完之前就检测到该帧的发送过程中是否遭遇了碰撞；在争用期内检测到碰撞时发送的数据一定小于64字节，因此小于64字节的帧都是无效帧</p><p>CD协议——最大帧长依据协议不同</p><p>阶段二进制指数规避算法<img src="/2022/12/16/408-%E8%AE%A1%E7%BD%91-3/image-20221213173112887.png" alt="image-20221213173112887"></p><p>若多次发生碰撞表明较多主机参与竞争信道，利用规避算法可<strong>使重传需要推迟的平均时间随重传次数而增大</strong>（动态规避），因而减小发生碰撞的概率；当重传达16次仍不成功，说明打算发送帧主机太多，则抛弃该帧向高层报告</p><p>CD协议——信道利用率<img src="/2022/12/16/408-%E8%AE%A1%E7%BD%91-3/image-20221213173431285.png" alt="image-20221213173431285"></p><p>在无线局域网中，不能使用碰撞检测CD，因为对硬件要求非常高，并且由于无线电波传播的特殊性（存在隐蔽站问题），进行碰撞检测的意义也不大。因此802.11无线局域网使用CSMA/CA协议</p><p>由于不可能 避免所有碰撞，并且无线信道误码率较高，802.11标准还使用了数据链路层确认机制(停止-等待协议)</p><p>802.11的MAC层标准定义了两种媒体接入控制方式：分布式协调功能DCF，点协调功能PCF</p><p><strong>帧间间隔IFS</strong>-802.11规定所有站点必须在持续检测到信道空闲一段指定时间后才能发送帧；帧间间隔的长短取决于该站点要发送的帧的类型-高优先级帧需要等待的时间较短，低优先级帧等待时间长。常见帧间间隔如下-短帧间间隔SIFS(28us)，DCF帧间间隔DIFS（128us)</p><p>CSMA/CA<strong>工作原理</strong>（1）先检测信道（进行载波侦听）。（2）目的站若正确收到此帧，则经过时间间隔SIFS后，向源站发送确认帧ACK。（3）所有其他站都设置网络分配向量NAV，表明在这段时间内信道忙，不能发送数<br>据。（4）当确认帧ACK结束时，NAV（信道忙）也就结束了。在经历了帧间间隔之后，<br>接着会出现一段空闲时间，叫做争用窗口，表示在这段时间内有可能出现各站点争用信道<br>的情况。（5）争用信道比较复杂，因为有关站点要执行退避算法。</p><p>CSMA/CA<strong>退避算法</strong>-在有站点正在发送帧时，其他要发送的站点随机缠产生一段退避时间，退避时间内检测信道是否空闲，存在其他站点再次占用时则冻结剩余退避时间，直至退避时间结束并且信道空闲时发送。</p><p>CSMA/CA信道预约-802.11标准允许要发送数据站点对信道进行预约，即在发送数据帧之前先发送请求发送RTS帧，在收到响应允许发送CTS帧后，就可发送数据帧。</p><p>CSMA/CA虚拟载波监听-除RTS帧和CTS帧会携带通信需要持续的时间，数据帧也能携带通信需要持续的时间；利用虚拟载波监听机制，<strong>站点只要监听到RTS帧、CTS帧或数据帧中的任何一个，就能知到信道被占用的持续时间</strong>，因此能减少隐蔽站带来的碰撞问题。</p><h3 id="3-7-MAC地址、IP地址和ARP地址"><a href="#3-7-MAC地址、IP地址和ARP地址" class="headerlink" title="3.7 MAC地址、IP地址和ARP地址"></a>3.7 MAC地址、IP地址和ARP地址</h3><p>MAC地址式以太网的MAC子层所使用的地址，IP地址是TCP/IP体系结构网际层所使用的地址；ARP协议属于TCP/IP体系结构的网际层，作用是·一直设备分配的IP，使用ARP协议可以通过IP获取到设备MAC地址</p><p>每个主机发送的帧中必须携带标识发送主机和接受主机的地址即MAC地址（硬件地址）,严格来说MAC地址是对网络上个接口的唯一标识，而不是对网络上各设备的唯一标识。</p><p>MAC地址格式表示-六组十六进制</p><p>单播MAC地址-有发送方和接收方地址，广播MAC地址-只有发送方地址都能收到，多播MAC地址-首位十六进制不能整除2则为多播地址，拥有该多播组的接收方能收到，否则丢弃</p><p>IP地址-因特网上主机和路由器所使用的地址，用于标识网络编号和主机编号。在数据包转发过程中<strong>源IP地址和目的IP地址</strong>保持不变，<strong>源MAC地址和目的MAC地址随链路改变</strong>。</p><p>ARP协议-在发送数据前通过发送ARP报文广播获取接收方MAC地址和IP地址，只能在一段链路上或一个网络上使用，不能跨网络使用。</p><h3 id="3-8集线器与交换机"><a href="#3-8集线器与交换机" class="headerlink" title="3.8集线器与交换机"></a>3.8集线器与交换机</h3><p>使用集线器的以太网在逻辑上任是一个总线网，使用的还是CSMA/CD协议，集线器只在物理层工作，一般有少量的容错能力和网络管理能力</p><p>使用集线器HUB可以在物理层扩展以太网</p><p>以太网交换机有多个接口，一般以全双工方式工作，能同时联通多对几口是多对主机能同时通信，无碰撞（不适用CSMA/cd协议）。以太网交换机工作在数据链路层，受到帧后再帧交换表中查询帧的目的MAC地址对应接口好，然后转发该帧。帧的两种转发方式：存储转发，直通转发 。</p><p>区别：集线器单播帧会发给所有主机，交换机只会发给目的主机；两个主机同时发送数据时集线器会产生碰撞再将碰撞提示发送给其他主机，交换机会缓存数据再发送。扩展后结果也差不多，因此交换机可以隔离碰撞域，集线器会扩大碰撞域。</p><h3 id="3-9以太网交换机自学习和转发帧流程"><a href="#3-9以太网交换机自学习和转发帧流程" class="headerlink" title="3.9以太网交换机自学习和转发帧流程"></a>3.9以太网交换机自学习和转发帧流程</h3><p>因为MAC地址与交换机接口对应关系不是永久的，所以交换机表会定期删除已学习的记录</p><p>学习过程<img src="/2022/12/16/408-%E8%AE%A1%E7%BD%91-3/image-20221215161428831.png" alt="image-20221215161428831"></p><h3 id="3-10以太网交换机的生成树协议STP"><a href="#3-10以太网交换机的生成树协议STP" class="headerlink" title="3.10以太网交换机的生成树协议STP"></a>3.10以太网交换机的生成树协议STP</h3><p> 添加冗余链路可以提高以太网可靠性，但是也会形成网络环路引起广播风暴、主机收到重复广播帧、交换机的帧交换表震荡</p><p>因此使用生成树协议STP来避免网络环路的问题，交换机能自动计算并构建一个逻辑上没有闭环的网络，并且确保连接整个网络，当物理拓扑发生变化时，交换机都将进行生成树的重新计算。</p><h3 id="3-11虚拟局域网VLAN"><a href="#3-11虚拟局域网VLAN" class="headerlink" title="3.11虚拟局域网VLAN"></a>3.11虚拟局域网VLAN</h3><p>使用一个或多个以太网交换机互连起来的交换式以太网，其所有站点都属于一个广播域，广播域过大会引起广播风暴(发送ARP广播请求时会像所有主机发送导致浪费网络资源和个主机CPU资源)，难以管理和维护，潜在的安全问题。</p><p>分割广播域的方法-使用路由器分割</p><p>虚拟局域网VLAN是一种将局域网内设备划分成与物理位置无关的逻辑组技术，这些逻辑组有某些共同的需求。</p><p>IEEE 802.1Q帧对以太网MAC帧格式进行了扩展，插入了4字节的VLAN标记。VLAN标记<strong>最后12比特</strong>称为<strong>VLAN标识符VID</strong>(标记了以太网帧属于哪一个VLAN)，有效值为1~4094，802.1Q帧是由交换机来处理的，而不是用户主机来处理，收到<strong>普通以太网</strong>帧时会插入4字节VLAN标记转变为802.1Q帧，简称<strong>打标签</strong>。转发是删除VLAN标记</p><p>交换机端口类型-Access、Trunk、Hybrid</p><p>互联的Trunk端口PVID值不等，可能造成转发错误</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第三章&quot;&gt;&lt;a href=&quot;#第三章&quot; class=&quot;headerlink&quot; title=&quot;第三章&quot;&gt;&lt;/a&gt;第三章&lt;/h2&gt;&lt;h3 id=&quot;3-1-数据链路层概述&quot;&gt;&lt;a href=&quot;#3-1-数据链路层概述&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="考研复习" scheme="http://example.com/categories/%E8%80%83%E7%A0%94%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>网站合集</title>
    <link href="http://example.com/2022/12/13/%E5%AE%9D%E8%97%8F%E5%90%88%E9%9B%86-%E5%A5%BD%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    <id>http://example.com/2022/12/13/%E5%AE%9D%E8%97%8F%E5%90%88%E9%9B%86-%E5%A5%BD%E7%AB%99%E6%8E%A8%E8%8D%90/</id>
    <published>2022-12-13T12:35:55.000Z</published>
    <updated>2022-12-20T12:17:23.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>为了方便查找部分常用网站以及考虑到能在不同设备上找到这些网站。</p><h2 id="艺术设计类网站"><a href="#艺术设计类网站" class="headerlink" title="艺术设计类网站"></a>艺术设计类网站</h2><div class="note info modern"><p>艺术设计类网站</p></div><p><a href="https://www.behance.net/">Behane</a>一个世界级的设计师灵感网站<br><a href="https://www.zcool.com.cn/">站酷</a>国内的设计灵感分享网站<br><a href="https://huaban.com/login">花瓣</a> 同上国内较大的艺术插画设计分享网站<br><a href="https://www.iconfont.cn/?spm=a313x.7781069.1998910419.d4d0a486a">阿里巴巴矢量图标库</a>优质图标获取<br><a href="https://www.pexels.com/zh-cn/">pexels</a>相当不错的摄影图片素材网站，简约方便<br><a href="https://www.pinterest.jp/">pinteresst</a>拥有大量图片的素材网站，类型丰富，需翻墙<br><a href="https://igoutu.cn/illustrations">ouch</a>矢量插画素材网站，情形脱俗<br><a href="https://unsplash.com/">Unsplash</a> 摄影素材网站<br><a href="[The Stocks 3 | Best royalty free stock photos, videos, mockups, icons and fonts!](https://thestocks.im/">The Stocks</a>)设计素材整合网站，需要梯子<br><a href="http://zhongguose.com/#xinglan">中国色</a>很简约直观的颜色网站<br><a href="https://mixkit.co/">mixkit</a>视频素材网站，包括音效，需翻墙<br><a href="https://www.goto-mars.com/people/aLYqyNvYvd">旁门左道导航</a>虽然起家于PPT，但也是个很好的艺术设计网站导航<br><a href="http://www.stickpng.com/">sticks png</a>免扣素材网站，需翻墙<br><a href="https://pngimg.com/">pngimg</a>同样是免扣素材网站，类型多<br><a href="https://wallhaven.cc/">wallhaven</a>很不错的壁纸网站，清晰度可以选择并且免费下载，甚至包括4k图片<br><a href="https://33.agilestudio.cn/">33台词</a>根据台词找电影片段<br><a href="https://www.ear0.com/">耳聆网</a>声音素材<br><a href="https://www.lookae.com/">lookAE</a>PR/AE模板很多但是没有分类</p><h2 id="影视动漫网站"><a href="#影视动漫网站" class="headerlink" title="影视动漫网站"></a>影视动漫网站</h2><div class="note default simple"><p>影视动漫类网站</p></div><p><a href="https://ddys.tv/">低端影视</a>简约界面，超清资源，美中不足的是资源不多，都是近两年的热门。<br><a href="https://www.kpkuang.org/">看片狂人</a>相对不错的影视资源网站，但是都有这类网站的通病：要么速度慢，要么不清晰，这个至少广告少。<br><a href="https://www.libvio.com/">libvio</a>资源丰富，清晰度高，速度快，但是时不时会崩溃。<br><a href="https://www.meijuwo.net/">美剧窝</a>站如其名，中规中矩<br><a href="https://subhd.tv/zu/7">电波字幕组</a>美英剧字幕组良心资源，或许站点会换<br><a href="https://www.hoho.tv/">小宝影视</a>海外华人影视推荐，资源目前来看算很丰富的了，速度清晰度都无可挑剔。</p><p><a href="http://zikeke8.com/">紫可可</a>动漫网站，资源算丰富，但是不保证清晰度高，大部分不错<br><a href="https://www.copymanga.site/">拷贝漫画</a>优秀的漫画资源网站，相当优秀<br><a href="https://www.acgbox.link/#term-155">ACG盒子</a>ACG类资源整合网站，包括漫画、动漫、轻小说游戏等相关资源网站，甚至还包括某些不可告人的秘密。</p><h2 id="游戏MOD模拟器类"><a href="#游戏MOD模拟器类" class="headerlink" title="游戏MOD模拟器类"></a>游戏MOD模拟器类</h2><div class="note success simple"><p>游戏MOD模拟器类</p></div><p><a href="https://www.op.gg/champions">OP.gg</a>LOL资料网站<br><a href="https://www.nexusmods.com/">NEXUS MODS</a> 全球最大mod资源网站，需翻墙<br><a href="http://www.xiaoviemc.vip/">小vie的日常</a> 一位大佬的游戏模拟器博客分享网站<br>XXXX520相当多的资源游戏资源分享，包含switch模拟器资源。<br><a href="http://43.129.165.218/">某淘宝店家平台</a> 页面简陋，资源中规中矩<br><a href="https://rutracker.org/forum/index.php">Rutrackerorg</a>知名俄罗斯盗版资源网站,需翻墙</p><h2 id="神奇の妙妙工具"><a href="#神奇の妙妙工具" class="headerlink" title="神奇の妙妙工具"></a>神奇の妙妙工具</h2><div class="note primary modern"><p>神奇の妙妙工具</p></div><p><a href="https://greasyfork.org/zh-CN">Greasy Fork</a>插件资源网站<br><a href="https://dash.ibcn.space/user">IBCN</a>还不错的梯子，就是最近价格有点高了<br><a href="https://ikuuu.ltd/">IKUUU</a>目前用的，不错<br><a href="https://bbs.tampermonkey.net.cn/forum.php">油猴中文网</a> 之前刷课插件大神自己弄的脚本网站，虽然成立了不到两年，但是未来可期<br><a href="https://bbs.tampermonkey.net.cn/forum.php">炫猿</a> 相当多种类资源的导航，无敌<br><a href="https://www.tboxn.com/">Tbox导航</a>感觉还不错的导航，资源也很全面<br><a href="http://dd.pandownload.top/index.htm">Pandownload</a>网盘下载资源</p><h2 id="路漫漫其修远兮"><a href="#路漫漫其修远兮" class="headerlink" title="路漫漫其修远兮"></a>路漫漫其修远兮</h2><div class="note success modern"><p>学海？苦海！</p></div><p><a href="https://wantwords.net/">反向词典</a> 清华大佬开发的万词王新版<br><a href="http://dir.scmor.com/">SCMOR</a> 学术资料搜索导航，希望以后能经常用到<br><a href="http://www.pac8.top/#/recharge">酷喵题库</a>很好用的题库，简单便宜主要是搜的算是最全面的了<br>Zlibrary 全球最大电子图书馆，目前垮台了。</p><h2 id="编程类"><a href="#编程类" class="headerlink" title="编程类"></a>编程类</h2><div class="note success flat"><p>编程相关</p></div><h3 id="游戏引擎类"><a href="#游戏引擎类" class="headerlink" title="游戏引擎类"></a>游戏引擎类</h3><p><a href="https://docs.unrealengine.com/5.0/zh-CN/">虚幻官方文档</a> 基础文档，必看但是肯定是不够的<br><a href="https://docs.unrealengine.com/5.0/zh-CN/">CgGo</a>虚幻素材资源网站，相对还算不错<br><a href="https://docs.unrealengine.com/5.0/zh-CN/">mixamo</a>人物骨骼动画，基本动作都有，需翻墙<br><a href="https://sketchfab.com/store">Sketchfab</a>3d模型购买网站，模型确实全呀，就是好的都太贵了，记得使用E盘的小工具<br><a href="https://quixel.com/megascans/home">Quixel</a> 贴图素材，巨无敌清晰，需翻墙。</p><h3 id="通用资源"><a href="#通用资源" class="headerlink" title="通用资源"></a>通用资源</h3><p><a href="https://algo.itcharge.cn/">算法通关手册</a>北航大佬的力扣算法学习单，以python为主<br><a href="https://csdiy.wiki/">CS自学指南</a>北大大佬的计算机学习指南，门槛相对较高，希望以后我能看得懂吧。<br><a href="https://summer-ospp.ac.cn/#/homepage?diff=%E5%9F%BA%E7%A1%80%2FBasic">开源之夏</a>中科院软件所的项目社区活动，感觉挺牛B的，就是我有点看不懂。<br><a href="https://visualgo.net/en">VisualGo</a>数据结构模型实现展示<br><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">DSV</a>同上<br><a href="https://c.runoob.com/">菜鸟工具</a>小工具导航，如CSS颜色代码对照，进制转换啥的，挺全面的。<br><a href="https://www.byhy.net/">白月黑羽</a>一位大神的在线学习网站，主要是Python，也有MySql等其他的<br><a href="https://www.writebug.com/">Write—Bug</a>项目共享学习网站<br><a href="https://www.code-nav.cn/resources">编程导航</a>鱼皮大佬的编程资源分享网站<br><a href="https://www.sqlfather.com/">SQL之父</a>鱼皮大佬的SQL数据模拟生成器<br><a href="https://mofanpy.com/tutorials/python-basic/interactive-python/">莫烦Python</a>大佬的交互式学习Python网站<br><a href="http://jyywiki.cn/OS/2022/">操作系统设计与实现</a>南京大学蒋炎岩老师的课，我觉得是国内课堂的天花板，理论与实践的结合堪称一绝，只可惜没有前置知识听了一半听不下去了，希望以后能补回来。<br><a href="[【Qt】Qt6系列教程汇总_沧海一笑-dj的博客-CSDN博客_qt6教程](https://blog.csdn.net/dengjin20104042056/article/details/115174639?ops_request_misc=%7B%22request%5Fid%22%3A%22165664613416782395339126%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=165664613416782395339126&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-115174639-null-null.142^v29^control,185^v2^control&amp;utm_term=qt6&amp;spm=1018.2226.3001.4187">QT6教程CSDN</a>)大佬分享的QT六学习汇总<br><a href="[QWidgetDemo: Qt编写的一些开源的demo，支持Qt4、Qt5、Qt6，支持任意系统，预计会有100多个，一直持续更新完善，代码简洁易懂注释详细，每个都是独立项目，非常适合初学者，代码随意传播使用，拒绝打赏和捐赠，欢迎留言评论！ (gitee.com">QtDemo</a>](<a href="https://gitee.com/feiyangqingyun/QWidgetDemo))大佬写的QtDemo分享">https://gitee.com/feiyangqingyun/QWidgetDemo))大佬写的QtDemo分享</a><br><a href="[Dashboard - EdClub (typingclub.com">EdClub</a>](<a href="https://www.typingclub.com/sportal/))打字练习，相当好一步一步入门，有机会多练练">https://www.typingclub.com/sportal/))打字练习，相当好一步一步入门，有机会多练练</a><br><a href="https://www.educoder.net/shixuns">头歌实践平台</a>感觉还不错的实验模拟平台<br><a href="https://chat.openai.com/auth/login">ChatGPT</a>AI聊天，用的时候记得开无痕浏览用3237那个号，需翻墙</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初衷&quot;&gt;&lt;a href=&quot;#初衷&quot; class=&quot;headerlink&quot; title=&quot;初衷&quot;&gt;&lt;/a&gt;初衷&lt;/h2&gt;&lt;p&gt;为了方便查找部分常用网站以及考虑到能在不同设备上找到这些网站。&lt;/p&gt;
&lt;h2 id=&quot;艺术设计类网站&quot;&gt;&lt;a href=&quot;#艺术设计类网站</summary>
      
    
    
    
    <category term="资源合集" scheme="http://example.com/categories/%E8%B5%84%E6%BA%90%E5%90%88%E9%9B%86/"/>
    
    
    <category term="资源分享" scheme="http://example.com/tags/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>外挂标签配置</title>
    <link href="http://example.com/2022/12/12/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3-hexo%E9%85%8D%E7%BD%AE-%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/12/12/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3-hexo%E9%85%8D%E7%BD%AE-%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE%E9%85%8D%E7%BD%AE/</id>
    <published>2022-12-12T11:36:12.000Z</published>
    <updated>2022-12-12T11:46:58.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外挂标签设置"><a href="#外挂标签设置" class="headerlink" title="外挂标签设置"></a>外挂标签设置</h1><p>配置1<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><div class="note simple"><p>默认 提示块标籤</p></div></p><div class="note default simple"><p>default 提示块标籤</p></div><div class="note primary simple"><p>primary 提示块标籤</p></div><div class="note success simple"><p>success 提示块标籤</p></div><div class="note info simple"><p>info 提示块标籤</p></div><div class="note warning simple"><p>warning 提示块标籤</p></div><div class="note danger simple"><p>danger 提示块标籤</p></div><p>配置2<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><br><div class="note modern"><p>默认 提示块标籤</p></div></p><div class="note default modern"><p>default 提示块标籤</p></div><div class="note primary modern"><p>primary 提示块标籤</p></div><div class="note success modern"><p>success 提示块标籤</p></div><div class="note info modern"><p>info 提示块标籤</p></div><div class="note warning modern"><p>warning 提示块标籤</p></div><div class="note danger modern"><p>danger 提示块标籤</p></div><p>配置3：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></p><div class="note flat"><p>默认 提示块标籤</p></div><div class="note default flat"><p>default 提示块标籤</p></div><div class="note primary flat"><p>primary 提示块标籤</p></div><div class="note success flat"><p>success 提示块标籤</p></div><div class="note info flat"><p>info 提示块标籤</p></div><div class="note warning flat"><p>warning 提示块标籤</p></div><div class="note danger flat"><p>danger 提示块标籤</p></div><p>查询自<a href="https://www.huyw96.com/posts/1f69cb6c/">一位大佬的博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;外挂标签设置&quot;&gt;&lt;a href=&quot;#外挂标签设置&quot; class=&quot;headerlink&quot; title=&quot;外挂标签设置&quot;&gt;&lt;/a&gt;外挂标签设置&lt;/h1&gt;&lt;p&gt;配置1&lt;br&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    <category term="Blog配置" scheme="http://example.com/categories/Blog%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="教程" scheme="http://example.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(第二章)</title>
    <link href="http://example.com/2022/12/12/408-%E8%AE%A1%E7%BD%91-2/"/>
    <id>http://example.com/2022/12/12/408-%E8%AE%A1%E7%BD%91-2/</id>
    <published>2022-12-12T05:00:38.000Z</published>
    <updated>2022-12-16T09:38:44.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="j第二章"><a href="#j第二章" class="headerlink" title="j第二章"></a>j第二章</h2><h3 id="2-1物理层的基本概念"><a href="#2-1物理层的基本概念" class="headerlink" title="2.1物理层的基本概念"></a>2.1物理层的基本概念</h3><p>​    物理层协议主要任务：机械特性-指明接口所用接线器的形状和尺寸、引脚数目和排序、固定和锁定装置；电气特效-指明在接口电缆的各条线上出现的电压范围；功能特性-指明某条线上出现的某一电平表示何种意义；过程特性-指明对于不同功能的各种可能事件的出现顺序。</p><h3 id="2-2物理层下面的传输媒体"><a href="#2-2物理层下面的传输媒体" class="headerlink" title="2.2物理层下面的传输媒体"></a>2.2物理层下面的传输媒体</h3><p>​    导引型传输媒体：同轴电缆、双绞线、光纤、电力线</p><p>​    非导引型传输媒体： 无线电波、微波、红外线、可见光</p><h3 id="2-3传输方式"><a href="#2-3传输方式" class="headerlink" title="2.3传输方式"></a>2.3传输方式</h3><p>​    串行传输-一次一比特传输，并行传输-一次多比特，成本高，计算机内部采用并行传输</p><p>​    同步传输-字节之间时间间隔固定，需要保证双方时钟同步<img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91-2/image-20221211165219604-16708371237401.png" alt="image-20221211165219604"></p><p>​    异步传输-字节之间异步，字节中每个比特仍然要同步</p><p>​    单向通信、双向交替（半双工）通信、双向同时通信（全双工）</p><h3 id="2-4编码与调制"><a href="#2-4编码与调制" class="headerlink" title="2.4编码与调制"></a>2.4编码与调制</h3><p>​    码元-在使用时间域的波形表示数字信号时，代表不同离散数值的基本波形</p><p>​    不归零编码-整个码元时间内电平不会发生变化，需要额外的传输线传输时钟信号</p><p>​    归零编码-每个码元都会归零一次<img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91-2/image-20221211171012113-16708371237402.png" alt="image-20221211171012113"></p><p>​    曼彻斯特编码-马原中间时刻的跳变即表示时钟，又表示数据，数据是1，是0自行假设判断<img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91-2/image-20221211171102570-16708371237403.png" alt="image-20221211171102570"></p><p>​    差分曼彻斯特编码-跳变仅表示时钟，码元开始处电平是否发生变化表示数据，发生变化表示0，不发生变化表示1</p><p>​    数字基带信号：<img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91-2/image-20221211171342091-16708371237404.png" alt="image-20221211171342091"></p><p>混合调制</p><h3 id="2-5信道的极限容量"><a href="#2-5信道的极限容量" class="headerlink" title="2.5信道的极限容量"></a>2.5信道的极限容量</h3><p>​    为了避免码间串扰，码元传输速率是有上限的。<img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91-2/image-20221211172343769-16708371237405.png" alt="image-20221211172343769"></p><p>香农公式<img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91-2/image-20221211172415943-16708371237406.png" alt="image-20221211172415943"></p><p>数据传输速率 = 波特率(码元传输速率)× 每个码元携带信息量</p><h3 id="习题总结："><a href="#习题总结：" class="headerlink" title="习题总结："></a>习题总结：</h3><p><img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91-2/image-20221212150936848.png" alt="image-20221212150936848"></p><p>题目明显不是一看就能会了的水平了需要熟练掌握奈式准则和香农公式以及其他相关定义才行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;j第二章&quot;&gt;&lt;a href=&quot;#j第二章&quot; class=&quot;headerlink&quot; title=&quot;j第二章&quot;&gt;&lt;/a&gt;j第二章&lt;/h2&gt;&lt;h3 id=&quot;2-1物理层的基本概念&quot;&gt;&lt;a href=&quot;#2-1物理层的基本概念&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="考研复习" scheme="http://example.com/categories/%E8%80%83%E7%A0%94%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(第一章)</title>
    <link href="http://example.com/2022/12/12/408-%E8%AE%A1%E7%BD%91/"/>
    <id>http://example.com/2022/12/12/408-%E8%AE%A1%E7%BD%91/</id>
    <published>2022-12-12T05:00:38.000Z</published>
    <updated>2022-12-12T14:37:18.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络（湖科大教书匠版）"><a href="#计算机网络（湖科大教书匠版）" class="headerlink" title="计算机网络（湖科大教书匠版）"></a><strong>计算机网络</strong>（湖科大教书匠版）</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1-2概述"><a href="#1-2概述" class="headerlink" title="1.2概述"></a>1.2概述</h3><ul><li><p>ISP-因特网服务提供者，因特网通过ISP连接</p></li><li><p>因特网标准化工作</p></li><li><p>因特网的组成：</p><p>边缘部分：所有连接在因特网的主机组成，这部分是用户直接使用，用来进行通信和资源共享。<br>核心部分：由大量网络和连接这些网络的路由器组成，这部分是为边缘部分提供服务的。</p></li><li><p>网络、互联网和因特网：</p><p>网络有若干个节点和连接这些节点的链路组成</p><p>多个网络通过路由器互连起来构成了互联网</p><p>因特网是世界上最大的互联网络</p></li></ul><h3 id="1-3-三种交换：电路交换、分组交换、报文交换"><a href="#1-3-三种交换：电路交换、分组交换、报文交换" class="headerlink" title="1.3 三种交换：电路交换、分组交换、报文交换"></a>1.3 三种交换：电路交换、分组交换、报文交换</h3><ul><li><p>电路交换：</p><p>电话交换机接通电话的方式称为电路交换</p><p>三个步骤：1.建立连接（分配通信资源）2.通话（一直占用通信资源）3.释放连接（归还通信资源）</p><p>用于传输计算机数据时效率低</p></li><li><p>分组交换：</p><p>在分组交换中没有专用的电路来传输数据。相反，我们可以通过添加一个标头，在数据准备好的任何时候发送一块数据，它就是分组或数据包（packet）。标头里包含了数据包的目标地址。</p><p>分组交换网络由终端、链路和分组交换机组成。</p></li><li><p>三种交换的对比</p><p><img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91/image-20221208150426666.png" alt="image-20221208150426666" style="zoom:200%;"></p></li></ul><h3 id="1-4计算机网络定义和分类"><a href="#1-4计算机网络定义和分类" class="headerlink" title="1.4计算机网络定义和分类"></a>1.4计算机网络定义和分类</h3><ul><li><p>计算机网络的定义：</p><p>计算机网络主要是由一些通用的、可编程的硬件互连而成的，而这些硬件并非专门用来实现某一特等目的。这些可编程的硬件能用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用。</p></li><li><p>计算机网络的分类可按交换技术、使用者、传输介质分类</p></li><li><p>覆盖范围分类：广域网WAN、城域网MAN、局域网LAN、个域网PAN</p></li></ul><h3 id="1-5计算机网络的性能指标"><a href="#1-5计算机网络的性能指标" class="headerlink" title="1.5计算机网络的性能指标"></a>1.5计算机网络的性能指标</h3><p>​    比特：计算机数据量的单位，8bit = 1 Byte字节，KB = 2^10B</p><p>​    速率：链接在计算机网络上的主机在数字信道上传输比特的速率也称为比特率或数据率，kb\s = 10^3 b\s(bps)</p><p>​    带宽：信号所包含的各种不同频率成分所占据的频率范围，用来表示网络通信线路能够传送数据的能力，因此表示在单位时间内从网络中的某一点到另一点所能通过·1的最高数据率；单位与速率单位相同</p><p>​    吞吐量：在单位时间内通过某个网络（或信道、接口）的数据量，受网络带宽或额定速率的限制，吞吐量常用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能通过网络；吞吐量受网络带宽或额定速率限制</p><p>​    时延：发送时延、传播时延、处理时延构成</p><ul><li><img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91/image-20221208152200902.png" alt="image-20221208152200902" style="zoom:200%;"></li><li><p><img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91/image-20221208152212157.png" alt="image-20221208152212157" style="zoom:200%;"></p></li><li><p>​    处理时延往往不记</p></li></ul><p>时延带宽积：传播时延和带宽的乘积、链路的实验带宽积又称为以比特为单位的链路长度.</p><p>往返时间RTT：英特网信息不仅有单项交互而是双向交互的</p><p>利用率：信道利用率-表示信道百分之几的时间是被利用的，网络利用率-全网络的信道利用率加权，利用率并非越高越好，也不能使其太低</p><p>丢包率：分组丢失率，指在一定时间内，传输过程中丢失分组数量与总分组数量的比率，丢失原因：分组误码、网络阻塞</p><h3 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h3><p>​    常见计算机体系结构：</p><p>​    OSI体系结构<img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91/image-20221208165624357.png" alt="image-20221208165624357"></p><p>​    TCP/IP体系结构  <img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91/image-20221208165830508.png" alt="image-20221208165830508"></p><p>每一层涉及协议</p><p><img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91/image-20221210171358239.png" alt="image-20221210171358239" style="zoom:200%;"></p><p>​    原理体系结构<img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91/image-20221208171215034.png" alt="image-20221208171215034" style="zoom:200%;"></p><p>​    应用进程间基于往网络的通信过程：<strong>进程</strong>构建一个Http请求报文，往下每一层封装后发送给<strong>路由器</strong>，路由器往上解封装了解要发送地址，再往下封装发到接受方，<strong>接收方</strong>往上层层解封装再生成相应HTTP回应报文往下层层封装再发回去。</p><p>专用术语介绍：</p><ol><li><p>实体：任何可发送或接受信息的硬件或软件进程，对等实体-收发双方相同层次中的实体</p></li><li><p>协议：控制两个对等实体进行逻辑通信的规则和集合，协议三要素：语法、语义、同步</p></li><li><p>服务：在协议控制下，两个对等实体间的逻辑通信使得本层能够向上一层提供服务，要实现本层协议还需要使用下一层所提供的服务，协议是<strong>水平的</strong>，服务是<strong>垂直的</strong>，下面的协议对上面的实体是<strong>透明的</strong></p></li><li><p>服务访问点—在同一系统中相邻两层的实体交换信息的逻辑接口，用于区分不同服务类型</p></li><li><p>协议数据单元PDU—对等层次之间传送的顺举报称为该层的协议数据单元；服务数据单元SDU-同一系统内层与层之间交换的数据包称为服务数据单元；多个SDU可以合成一个PDU，一个SDU也可以划分为几个PDU</p></li></ol><p>   ​    </p><p>​            <img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91/image-20221208174058445.png" alt="image-20221208174058445" style="zoom:200%;"></p><p>习题总结：练习答案计算机体系结构-BACDC 时延-</p><p>绝大部分涉及计算机网络体系结构的真题都能做对，但是后续应该需要将OSI和TCP结构都得背下来才行。 时延类题需要注意发送时延指的是信号后端刚刚离开第一台主机的时间，传播时延指的是另一台主机收到信号末端的时间，n个信号发送时延乘n，传播时延不变。</p><p><img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91/image-20221210174137590.png" alt="image-20221210174137590"></p><p><img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91/image-20221211155125199.png" alt="image-20221211155125199" style="zoom:200%;"></p><p><img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91/image-20221211160339520.png" alt="image-20221211160339520"></p><p><img src="/2022/12/12/408-%E8%AE%A1%E7%BD%91/image-20221211161659428.png" alt="image-20221211161659428"></p><p>这题注意要加上头部分为1000个分组，因此发送时延为1M×8/100mbps = 80ms，至少经过两个交换机，每个分组发送时延为1000×8/100mbps = 0.08ms，总时间为80+0.08×2 = 80.16ms</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机网络（湖科大教书匠版）&quot;&gt;&lt;a href=&quot;#计算机网络（湖科大教书匠版）&quot; class=&quot;headerlink&quot; title=&quot;计算机网络（湖科大教书匠版）&quot;&gt;&lt;/a&gt;&lt;strong&gt;计算机网络&lt;/strong&gt;（湖科大教书匠版）&lt;/h1&gt;&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="考研复习" scheme="http://example.com/categories/%E8%80%83%E7%A0%94%E5%A4%8D%E4%B9%A0/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>刷题日志</title>
    <link href="http://example.com/2022/12/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2022/12/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2022-12-10T12:32:22.000Z</published>
    <updated>2022-12-25T12:06:40.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2022年12月7日回文数字"><a href="#2022年12月7日回文数字" class="headerlink" title="2022年12月7日回文数字"></a>2022年12月7日<a href="https://www.luogu.com.cn/problem/P2010">回文数字</a></h2><p>我的答案：思路是将日期转化为数字在判断是否回文<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N  100005</span></span><br><span class="line"><span class="type">int</span> month[<span class="number">12</span>]=&#123;<span class="number">31</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">huiwen</span><span class="params">(string a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>,r = a.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[l]==a[r])</span><br><span class="line">        &#123;</span><br><span class="line">            l++;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> a,b,ans;</span><br><span class="line">   cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">   <span class="type">int</span> y1 = a/<span class="number">10000</span>,y2 = b/<span class="number">10000</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i =y1;i&lt;=y2;i++)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;<span class="number">12</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k&lt;=month[j];k++)</span><br><span class="line">        &#123;</span><br><span class="line">            string m,r;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;<span class="number">10</span>)</span><br><span class="line">             m = <span class="string">&#x27;0&#x27;</span>+<span class="built_in">to_string</span>(j);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">             m =<span class="built_in">to_string</span>(j);</span><br><span class="line">            <span class="keyword">if</span>(k&lt;<span class="number">10</span>)</span><br><span class="line">            r = <span class="string">&#x27;0&#x27;</span>+<span class="built_in">to_string</span>(k);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            r = <span class="built_in">to_string</span>(k);</span><br><span class="line"></span><br><span class="line">            string time = <span class="built_in">to_string</span>(i)+m+r;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;stoi(time)&lt;&lt;&quot; &quot;;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">huiwen</span>(time))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">stoi</span>(time)&gt;=a&amp;&amp;<span class="built_in">stoi</span>(time)&lt;=b)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout&lt;&lt;time&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   cout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>大神解答：只通过模拟月日，判断是否条件范围内并且是回文即可<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N  100005</span></span><br><span class="line"><span class="type">int</span> i,j,n,m,a,b,c,sum,ans;</span><br><span class="line"><span class="type">int</span> s[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)<span class="comment">//枚举月和日 </span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=s[i];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            c=(j%<span class="number">10</span>)*<span class="number">1000</span>+</span><br><span class="line">              (j/<span class="number">10</span>)*<span class="number">100</span>+</span><br><span class="line">              (i%<span class="number">10</span>)*<span class="number">10</span>+</span><br><span class="line">              (i/<span class="number">10</span>);<span class="comment">//算出前四位。</span></span><br><span class="line">            sum=c*<span class="number">10000</span>+i*<span class="number">100</span>+j;<span class="comment">//算出整个日期 </span></span><br><span class="line">            <span class="keyword">if</span> (sum&lt;n||sum&gt;m) <span class="keyword">continue</span>;</span><br><span class="line">            ans++;<span class="comment">//统计 </span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>奇怪的是我的答案和大神的部分输出输入都相同，不知为何会在结果上报错，有的可能是没考虑到闰年的情况。</p><h2 id="12月9日洛谷-P1036选数"><a href="#12月9日洛谷-P1036选数" class="headerlink" title="12月9日洛谷 P1036选数"></a>12月9日<a href="https://www.luogu.com.cn/problem/P1036">洛谷 P1036选数</a></h2><p>看到题其实思路很清晰，就是用DFS，但掌握的不是很好，想写一个用容器的，奈何水平有限呀。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N  100005</span></span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">int</span> a[<span class="number">25</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> a)</span><span class="comment">//判断是否为素数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">2</span>;i*i&lt;a;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a%i==<span class="number">0</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> sum,<span class="type">int</span> flag)</span><span class="comment">//x表示本次dfs开始的下标，sum表示当前总数和，flag控制顺序降重</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isprime</span>(sum))</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =flag;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(x+<span class="number">1</span>,sum+a[i],i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="12月10日洛谷P1464-Function"><a href="#12月10日洛谷P1464-Function" class="headerlink" title="12月10日洛谷P1464 Function "></a>12月10日<a href="https://www.luogu.com.cn/problem/P1464">洛谷P1464 Function </a></h2><p>这题看着题目复杂其实只用写个递归函数即可，但是需要注意格式<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> W(x,y,z) (w_cnt[x][y][z] ? w_cnt[x][y][z] : w_cnt[x][y][z] = w(x,y,z))</span></span><br><span class="line"><span class="type">int</span> w_cnt[<span class="number">25</span>][<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">w</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;=<span class="number">0</span> || b&lt;=<span class="number">0</span> || c&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; <span class="number">20</span> || b &gt; <span class="number">20</span> || c &gt; <span class="number">20</span>) <span class="keyword">return</span> <span class="built_in">W</span>(<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span>(a &lt; b &amp;&amp; b &lt; c) <span class="keyword">return</span> <span class="built_in">W</span>(a,b,c<span class="number">-1</span>)+<span class="built_in">W</span>(a,b<span class="number">-1</span>,c<span class="number">-1</span>) - <span class="built_in">W</span>(a,b<span class="number">-1</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">W</span>(a<span class="number">-1</span>,b,c)+<span class="built_in">W</span>(a<span class="number">-1</span>,b<span class="number">-1</span>,c)+<span class="built_in">W</span>(a<span class="number">-1</span>,b,c<span class="number">-1</span>) - <span class="built_in">W</span>(a<span class="number">-1</span>,b<span class="number">-1</span>,c<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">-1</span> &amp;&amp; b==<span class="number">-1</span> &amp;&amp; c==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">      cout&lt;&lt;<span class="string">&quot;w(&quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot;, &quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot;, &quot;</span>&lt;&lt;c&lt;&lt;<span class="string">&quot;) = &quot;</span>&lt;&lt;<span class="built_in">w</span>(a,b,c)&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="12月11日P5534-【XR-3】等差数列"><a href="#12月11日P5534-【XR-3】等差数列" class="headerlink" title="12月11日P5534 【XR-3】等差数列"></a>12月11日<a href="https://www.luogu.com.cn/problem/P5534">P5534 【XR-3】等差数列</a></h2><p>题目很简单，但是我一开始读题读错了，以为是求等差数列的低级项，其实只用套数学公式即可<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">dengcha</span><span class="params">(<span class="type">long</span> <span class="type">long</span>  a,<span class="type">long</span> <span class="type">long</span> cnt,<span class="type">long</span> <span class="type">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt==<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">return</span> (<span class="built_in">dengcha</span>(a+d,cnt<span class="number">-1</span>,d));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> a,b,c;</span><br><span class="line">   cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">   <span class="type">int</span> d = b-a;</span><br><span class="line">   <span class="comment">//cout&lt;&lt;dengcha(a,c,d)&lt;&lt;endl;</span></span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> ans = (<span class="built_in">dengcha</span>(a,c,d)+a)*c/<span class="number">2</span>;</span><br><span class="line">   cout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="P1192-台阶问题"><a href="#P1192-台阶问题" class="headerlink" title="P1192 台阶问题"></a><a href="https://www.luogu.com.cn/problem/P1192">P1192 台阶问题</a></h2><p>同样是一看就有思路的题，经典动态规划题目，就是多了个取模的操作<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n,k;</span><br><span class="line">  cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">  <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">100000</span>)</span></span>;</span><br><span class="line">  dp[<span class="number">0</span>] = dp[<span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//动态规划边界条件</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>;j&lt;=k;j++)<span class="comment">//可以选择迈开的步数是1~k</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=j) <span class="comment">//楼梯阶数大等于步数才能算一次</span></span><br><span class="line">        dp[i] = (dp[i]+dp[i-j])%<span class="number">100003</span>;<span class="comment">//这一层是由上一层跨1，2，。。。，j步到的，</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;dp[n]%<span class="number">100003</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="12月12日P1025-NOIP2001-提高组-数的划分"><a href="#12月12日P1025-NOIP2001-提高组-数的划分" class="headerlink" title="12月12日P1025 [NOIP2001 提高组] 数的划分"></a>12月12日<a href="https://www.luogu.com.cn/problem/P1025">P1025 [NOIP2001 提高组] 数的划分</a></h2><p>有点难度，但感觉之前在leecode上做过，我用了dfs，看了大佬的做法应该还可以用动态规划<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k,sum;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=t/k;++i) <span class="built_in">dfs</span>(i,k<span class="number">-1</span>,t-i);<span class="comment">//剪枝</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,k,n);</span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="12月13日P4994-终于结束的起点"><a href="#12月13日P4994-终于结束的起点" class="headerlink" title="12月13日P4994 终于结束的起点"></a>12月13日<a href="https://www.luogu.com.cn/problem/P4994#submit">P4994 终于结束的起点</a></h2><p>这题思路也不算太难，就是用求斐波那契数列再加个取模的操作，需要注意的是要用long long，否则会溢出<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">fb</span><span class="params">(<span class="number">10000002</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">f</span><span class="params">(<span class="type">long</span> <span class="type">long</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fb[i]) <span class="keyword">return</span> fb[i];</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">0</span>||i==<span class="number">1</span>) <span class="keyword">return</span> fb[i] = <span class="number">1</span>%x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> fb[i] =(<span class="built_in">f</span>(i<span class="number">-1</span>)+<span class="built_in">f</span>(i<span class="number">-2</span>))%x;<span class="comment">//斐波那契数列多加了个取模</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> i =<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span>(<span class="built_in">f</span>(i)!=<span class="number">0</span>||<span class="built_in">f</span>(i+<span class="number">1</span>)!=<span class="number">1</span>)</span><br><span class="line">     i++;</span><br><span class="line">    cout&lt;&lt;i+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="12月15日P1003-NOIP2011-提高组-铺地毯"><a href="#12月15日P1003-NOIP2011-提高组-铺地毯" class="headerlink" title="12月15日P1003 [NOIP2011 提高组] 铺地毯"></a>12月15日<a href="https://www.luogu.com.cn/problem/P1003">P1003 [NOIP2011 提高组] 铺地毯</a></h2><p>一开始我打算使用模拟暴力解决，但是Memory Limit Exceeded超出内存限制了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> idx[<span class="number">10005</span>][<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(idx, <span class="number">-1</span>, <span class="built_in">sizeof</span>(idx));</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="type">int</span> a,b,g,k;</span><br><span class="line">       cin&gt;&gt;a&gt;&gt;b&gt;&gt;g&gt;&gt;k;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = a;i&lt;a+g;i++)</span><br><span class="line">       &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = b;j&lt;b+k;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                idx[i][j] = i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    cout&lt;&lt;idx[x][y];</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看了大神的解答发现其实不用模拟，用四个数组分别记录左下角坐标a,b，横坐标g,纵坐标k,然后看x，y是否再这四个值生成的矩形范围内，是的话ans = 层数+1(ans初始值为-1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> idx[<span class="number">10005</span>][<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> a[n],b[n],g[n],k[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;g[i]&gt;&gt;k[i];  <span class="comment">//记录每一层的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="type">int</span> ans =<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;=a[i]&amp;&amp;y&gt;=b[i]&amp;&amp;x&lt;=a[i]+g[i]&amp;&amp;y&lt;=b[i]+k[i])<span class="comment">//如果在这个矩形范围内</span></span><br><span class="line">        ans = i+<span class="number">1</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">   cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12月16日P1067-NOIP2009-普及组-多项式输出"><a href="#12月16日P1067-NOIP2009-普及组-多项式输出" class="headerlink" title="12月16日P1067 [NOIP2009 普及组] 多项式输出"></a>12月16日<a href="https://www.luogu.com.cn/problem/P1067">P1067 [NOIP2009 普及组] 多项式输出</a></h2><p>思路很简单，就是模拟，但是要考虑几种特殊情况如-1和1的情况。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,x;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =n;i&gt;=<span class="number">0</span>;i--)<span class="comment">//注意要大于等于0</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=n&amp;&amp;x&gt;<span class="number">0</span>) cout&lt;&lt;<span class="string">&quot;+&quot;</span>;<span class="comment">//是首位的话不加+号</span></span><br><span class="line">            <span class="keyword">if</span>(x&gt;<span class="number">1</span>||x&lt;<span class="number">-1</span>||i==<span class="number">0</span>) cout&lt;&lt;x;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">-1</span>&amp;&amp;i) cout&lt;&lt;<span class="string">&quot;-&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;x^&quot;</span>&lt;&lt;i;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;x&quot;</span>;<span class="comment">//特殊情况</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="12月17日P1328-NOIP2014-提高组-生活大爆炸版石头剪刀布"><a href="#12月17日P1328-NOIP2014-提高组-生活大爆炸版石头剪刀布" class="headerlink" title="12月17日P1328 [NOIP2014 提高组] 生活大爆炸版石头剪刀布"></a>12月17日<a href="https://www.luogu.com.cn/problem/P1328">P1328 [NOIP2014 提高组] 生活大爆炸版石头剪刀布</a></h2><p>模拟就完事了，但是麻烦的是得分数组需要列举出来，直接抄的大佬的了<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> vs[<span class="number">5</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;&#125;; <span class="comment">//得分表的处理 </span></span><br><span class="line"><span class="type">int</span> n,na,nb;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;na&gt;&gt;nb;</span><br><span class="line"><span class="type">int</span> a[na],b[nb];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;na;i++)</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;nb;i++)</span><br><span class="line">cin&gt;&gt;b[i];</span><br><span class="line"><span class="type">int</span> x,y =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    x+=vs[a[i%na]][b[i%nb]];<span class="comment">//由于按照数组循环所以取模</span></span><br><span class="line">    y+=vs[b[i%nb]][a[i%na]];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;y&lt;&lt;endl;</span><br></pre></td></tr></table></figure></p><h2 id="12月18日P1563-NOIP2016-提高组-玩具谜题"><a href="#12月18日P1563-NOIP2016-提高组-玩具谜题" class="headerlink" title="12月18日P1563 [NOIP2016 提高组] 玩具谜题"></a>12月18日<a href="https://www.luogu.com.cn/problem/P1563">P1563 [NOIP2016 提高组] 玩具谜题</a></h2><p>还是很有难度的，一开始想写双向链表了但是发现多少点忘了这些东西了，但是看了看题解没想到其实不用那么复杂，但是这个逆时针的写法确实还是没怎么遇到过。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    vector&lt;string&gt;a;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string c;</span><br><span class="line">        <span class="type">int</span> d;</span><br><span class="line">        cin&gt;&gt;d&gt;&gt;c;</span><br><span class="line">        a.<span class="built_in">push_back</span>(c);</span><br><span class="line">        b.<span class="built_in">push_back</span>(d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> point=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">       </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(b[point]!=x)<span class="comment">//观察归规律，如果方向和左右一样就是顺时针，否则为逆时针</span></span><br><span class="line">        point = (point+y)%n;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        point =(point-y%n+n)%n;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;a[point];</span><br></pre></td></tr></table></figure></p><h2 id="12月19日P1042-NOIP2003-普及组-乒乓球"><a href="#12月19日P1042-NOIP2003-普及组-乒乓球" class="headerlink" title="12月19日P1042 [NOIP2003 普及组] 乒乓球"></a>12月19日<a href="https://www.luogu.com.cn/problem/P1042">P1042 [NOIP2003 普及组] 乒乓球</a></h2><p>模拟，但是一次性读入大量数据确实是个盲点，得好好记一下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">1000010</span>];<span class="comment">//用vector不方便一次性读入大量数据</span></span><br><span class="line"><span class="type">int</span> cnt =<span class="number">0</span>;<span class="comment">//记录总共有多少数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27;W&#x27;</span>) a++;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27;L&#x27;</span>) b++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((a&gt;=n||b&gt;=n)&amp;&amp;<span class="built_in">abs</span>(a-b)&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            cout&lt;&lt;a&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">            a=b=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新的一轮刚开始，或上一局没有打完</span></span><br><span class="line">    cout&lt;&lt;a&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;ch&amp;&amp;ch!=<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;W&#x27;</span>||ch==<span class="string">&#x27;L&#x27;</span>)&#123;</span><br><span class="line">          str[cnt++]=ch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">show</span>(<span class="number">11</span>);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">show</span>(<span class="number">21</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="12月20日P1179-NOIP2010-普及组-数字统计"><a href="#12月20日P1179-NOIP2010-普及组-数字统计" class="headerlink" title="12月20日P1179 [NOIP2010 普及组] 数字统计"></a>12月20日<a href="https://www.luogu.com.cn/problem/P1179">P1179 [NOIP2010 普及组] 数字统计</a></h2><p>入门题，很简单直接c++ 字符串count秒了<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> m,n;</span><br><span class="line">   cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">   <span class="type">int</span> ans =<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=m;i&lt;=n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">auto</span> a = <span class="built_in">to_string</span>(i);</span><br><span class="line">       <span class="type">int</span> x = <span class="built_in">count</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">       ans+=x;</span><br><span class="line">   &#125;</span><br><span class="line">   cout&lt;&lt;ans;</span><br></pre></td></tr></table></figure></p><h2 id="12月21日P2615-NOIP2015-提高组-神奇的幻方"><a href="#12月21日P2615-NOIP2015-提高组-神奇的幻方" class="headerlink" title="12月21日P2615 [NOIP2015 提高组] 神奇的幻方"></a>12月21日<a href="https://www.luogu.com.cn/problem/P2615">P2615 [NOIP2015 提高组] 神奇的幻方</a></h2><p>思路清晰，直接模拟。细节还是得多注意哦<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,a[<span class="number">40</span>][<span class="number">40</span>],x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> cnt =<span class="number">1</span>;</span><br><span class="line">    a[<span class="number">0</span>][n/<span class="number">2</span>] =<span class="number">1</span> ;</span><br><span class="line">    x =<span class="number">0</span>,y =n/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">2</span>;i&lt;=n*n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;y!=n<span class="number">-1</span>) a[n<span class="number">-1</span>][y+<span class="number">1</span>] =i,x =n<span class="number">-1</span>,y++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(y==n<span class="number">-1</span>&amp;&amp;x!=<span class="number">0</span>) a[x<span class="number">-1</span>][<span class="number">0</span>] =i,x--,y =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;y==n<span class="number">-1</span>) a[x+<span class="number">1</span>][y] =i,x++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x!=<span class="number">0</span>&amp;&amp;y!=n<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[x<span class="number">-1</span>][y+<span class="number">1</span>] ==<span class="number">0</span>&amp;&amp;x<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;y+<span class="number">1</span>&lt;=n) a[x<span class="number">-1</span>][y+<span class="number">1</span>] =i,x=x<span class="number">-1</span>,y =y+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> a[x+<span class="number">1</span>][y] =i,x++;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;a[i][j];</span><br><span class="line">            <span class="keyword">if</span>(j == n<span class="number">-1</span>) cout&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="12月23日P1059-NOIP2006-普及组-明明的随机数"><a href="#12月23日P1059-NOIP2006-普及组-明明的随机数" class="headerlink" title="12月23日P1059 [NOIP2006 普及组] 明明的随机数"></a>12月23日<a href="https://www.luogu.com.cn/problem/P1059">P1059 [NOIP2006 普及组] 明明的随机数</a></h2><p>set直接秒了，看来stl容器还是忘了不少<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line">   cin&gt;&gt;n;</span><br><span class="line">   set&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="type">int</span> b;</span><br><span class="line">       cin&gt;&gt;b;</span><br><span class="line">       a.<span class="built_in">insert</span>(b);</span><br><span class="line">   &#125;    </span><br><span class="line">   cout&lt;&lt;a.<span class="built_in">size</span>();</span><br><span class="line">   cout&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i:a)</span><br><span class="line">   cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure></p><p><a href="[P1068 [NOIP2009 普及组\] 分数线划定 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn">P1068 [NOIP2009 普及组] 分数线划定</a>](<a href="https://www.luogu.com.cn/problem/P1068">https://www.luogu.com.cn/problem/P1068</a>))<br>题目很有特色，构造结构体来解题是我第一次见，确实比哈希表方便些<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">grace</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;<span class="comment">//考号</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(grace a,grace b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.a&gt;b.a) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a.a==b.a&amp;&amp;a.b&lt;b.b)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">grace fen[<span class="number">5000</span>];  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="type">int</span> n,m;</span><br><span class="line">     cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">     cin&gt;&gt;fen[i].b&gt;&gt;fen[i].a;</span><br><span class="line">     <span class="built_in">sort</span>(fen,fen+n,cmp);</span><br><span class="line">     <span class="type">int</span> last =fen[m*<span class="number">3</span>/<span class="number">2</span><span class="number">-1</span>].a;</span><br><span class="line">     <span class="type">int</span> cnt =<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">     <span class="keyword">if</span>(fen[i].a&gt;=last) cnt++;</span><br><span class="line">     cout&lt;&lt;last&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;cnt&lt;&lt;endl;<span class="comment">//不能用m = m*1.5来代替last</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">     &#123;</span><br><span class="line">        cout&lt;&lt;fen[i].b&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;fen[i].a&lt;&lt;endl;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="12月24日P1051-NOIP2005-提高组-谁拿了最多奖学金"><a href="#12月24日P1051-NOIP2005-提高组-谁拿了最多奖学金" class="headerlink" title="12月24日P1051 [NOIP2005 提高组] 谁拿了最多奖学金"></a>12月24日<a href="https://www.luogu.com.cn/problem/P1051">P1051 [NOIP2005 提高组] 谁拿了最多奖学金</a></h2><p>题目挺简单的，但是写法借鉴了大神的，更加简洁<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,score1,score2,sum=<span class="number">0</span>,max_g=<span class="number">0</span>,total=<span class="number">0</span>,paper;</span><br><span class="line">    <span class="type">char</span> gan,xi;</span><br><span class="line">    string name,max_n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;name&gt;&gt;score1&gt;&gt;score2&gt;&gt;gan&gt;&gt;xi&gt;&gt;paper;</span><br><span class="line">        <span class="keyword">if</span>(score1&gt;<span class="number">80</span>&amp;&amp;paper&gt;<span class="number">0</span>) sum+=<span class="number">8000</span>;</span><br><span class="line">        <span class="keyword">if</span>(score1&gt;<span class="number">85</span>&amp;&amp;score2&gt;<span class="number">80</span>) sum+=<span class="number">4000</span>;</span><br><span class="line">        <span class="keyword">if</span>(score1&gt;<span class="number">90</span>) sum+=<span class="number">2000</span>;</span><br><span class="line">        <span class="keyword">if</span>(score1&gt;<span class="number">85</span>&amp;&amp;xi==<span class="string">&#x27;Y&#x27;</span>) sum+=<span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">if</span>(score2&gt;<span class="number">80</span>&amp;&amp;gan==<span class="string">&#x27;Y&#x27;</span>) sum+=<span class="number">850</span>;</span><br><span class="line">        total +=sum;</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;max_g)</span><br><span class="line">        &#123;</span><br><span class="line">            max_n =name;</span><br><span class="line">            max_g = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;max_n&lt;&lt;endl&lt;&lt;max_g&lt;&lt;endl&lt;&lt;total;</span><br></pre></td></tr></table></figure><br>除了这题还做了Acwing的孤独的照片，但是没读懂就cv了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2022年12月7日回文数字&quot;&gt;&lt;a href=&quot;#2022年12月7日回文数字&quot; class=&quot;headerlink&quot; title=&quot;2022年12月7日回文数字&quot;&gt;&lt;/a&gt;2022年12月7日&lt;a href=&quot;https://www.luogu.com.cn/</summary>
      
    
    
    
    <category term="算法日志" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="洛谷" scheme="http://example.com/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="刷题" scheme="http://example.com/tags/%E5%88%B7%E9%A2%98/"/>
    
    <category term="苦海" scheme="http://example.com/tags/%E8%8B%A6%E6%B5%B7/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>博客修改记录</title>
    <link href="http://example.com/2022/12/08/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3-hexo%E9%85%8D%E7%BD%AE-%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2022/12/08/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3-hexo%E9%85%8D%E7%BD%AE-%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95/</id>
    <published>2022-12-08T12:52:46.000Z</published>
    <updated>2022-12-28T04:41:40.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客部分插件修改方法"><a href="#博客部分插件修改方法" class="headerlink" title="博客部分插件修改方法"></a>博客部分插件修改方法</h1><p>为了避免下次找不到某些功能怎么设置，记录一下搭建以及魔改博客的某些设置记录和使用方法</p><h2 id="个人卡片社交图标"><a href="#个人卡片社交图标" class="headerlink" title="个人卡片社交图标"></a>个人卡片社交图标</h2><p>在_config.butterfly.yml中设置如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  iconfont icon-github: https://github.com/XuMeng313 || Github</span><br><span class="line">  fas fa-envelope: mailto:1635374917@qq.com || Email</span><br><span class="line">  iconfont icon-qq: http://wpa.qq.com/msgrd?v=3&amp;uin=1635374917&amp;site=qq&amp;menu=yes || QQ</span><br><span class="line">  iconfont icon-weixin: https://s2.loli.net/2022/12/06/cSEDBYs9g4fH2ni.png ||微信</span><br></pre></td></tr></table></figure><p>更改具体配置到F:\MyBlog\themes\butterfly\source\css\icon.css更改具体图标样式大小颜色等</p><h2 id="标题字体样式"><a href="#标题字体样式" class="headerlink" title="标题字体样式"></a>标题字体样式</h2><p>在_config.butterfly.yml如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blog_title_font: </span><br><span class="line">  font_link:</span><br><span class="line">  font-family: &#x27;字体视界-点点墨体&#x27;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>或者是在F:\MyBlog\themes\butterfly\source\css\font.css中修改，具体不清楚是哪个起了效果</p><h2 id="页面加载动画"><a href="#页面加载动画" class="headerlink" title="页面加载动画"></a>页面加载动画</h2><p>在_config.butterfly.yml中有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Loading Animation (加載動畫)</span><br><span class="line">preloader:</span><br><span class="line">  enable: true</span><br><span class="line">  # source</span><br><span class="line">  # 1. fullpage-loading</span><br><span class="line">  # 2. pace (progress bar)</span><br><span class="line">  source: 1</span><br><span class="line">  # pace theme (see https://codebyzach.github.io/pace/)</span><br><span class="line">  pace_css_url: </span><br><span class="line">    url(/css/loading_bar.css)</span><br></pre></td></tr></table></figure><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>修改站点配置文件<code>_config.yml</code>，默认语言是 en 。<br>主题支持三种语言：</p><ul><li>default(en)</li><li>zh-CN (简体中文)</li><li>zh-TW (繁体中文)</li></ul><h2 id="网页背景特效"><a href="#网页背景特效" class="headerlink" title="网页背景特效"></a>网页背景特效</h2><p>在__config.butterfly.yml中修改，分为动态彩带，静态彩带</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">canvas_ribbon:</span><br><span class="line">  enable: false</span><br><span class="line">  size: 150</span><br><span class="line">  alpha: 0.6</span><br><span class="line">  zIndex: -1</span><br><span class="line">  click_to_change: false  #設置是否每次點擊都更換彩带</span><br><span class="line">  mobile: false # false 手機端不顯示 true 手機端顯示</span><br></pre></td></tr></table></figure><p><a href="https://fastly.jsdelivr.net/gh/jerryc127/CDN/img/hexo-theme-butterfly-docs-canvas-ribbon.png">  </a></p><h2 id="个人卡片背景更换"><a href="#个人卡片背景更换" class="headerlink" title="个人卡片背景更换"></a>个人卡片背景更换</h2><p>在引入的source/custom.css文件中加入如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 侧边栏个人信息图片卡片背景 */</span><br><span class="line">#aside-content&gt;.card-widget.card-info &#123;</span><br><span class="line">  background-image: url(https://s2.loli.net/2022/12/06/pQrWnEvd8DgIMmL.png);</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  background-attachment: inherit;</span><br><span class="line">  background-size: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若是动态渐变色则添加如下代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* #aside-content&gt;.card-widget.card-info &#123;</span></span><br><span class="line"><span class="comment">  background-image: url(https://source.fomal.cc/img/樱花.png);</span></span><br><span class="line"><span class="comment">  background-repeat: no-repeat;</span></span><br><span class="line"><span class="comment">  background-attachment: inherit;</span></span><br><span class="line"><span class="comment">  background-size: 100%;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">#aside-content &gt; .card-widget.card-info &#123;</span></span><br><span class="line"><span class="comment">    background: linear-gradient(</span></span><br><span class="line"><span class="comment">      -45deg, </span></span><br><span class="line"><span class="comment">      #ee0979,</span></span><br><span class="line"><span class="comment">      #4158D0,</span></span><br><span class="line"><span class="comment">      #C850C0,</span></span><br><span class="line"><span class="comment">      #FFCC70,</span></span><br><span class="line"><span class="comment">      #007991</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">    box-shadow: 0 0 5px rgb(66, 68, 68);</span></span><br><span class="line"><span class="comment">    position: relative;</span></span><br><span class="line"><span class="comment">    background-size: 400% 400%;</span></span><br><span class="line"><span class="comment">    -webkit-animation: Gradient 10s ease infinite;</span></span><br><span class="line"><span class="comment">    -moz-animation: Gradient 10s ease infinite;</span></span><br><span class="line"><span class="comment">    animation: Gradient 10s ease infinite !important;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  @-webkit-keyframes Gradient &#123;</span></span><br><span class="line"><span class="comment">    0% &#123;</span></span><br><span class="line"><span class="comment">      background-position: 0% 50%;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    50% &#123;</span></span><br><span class="line"><span class="comment">      background-position: 100% 50%;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    100% &#123;</span></span><br><span class="line"><span class="comment">      background-position: 0% 50%;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  @-moz-keyframes Gradient &#123;</span></span><br><span class="line"><span class="comment">    0% &#123;</span></span><br><span class="line"><span class="comment">      background-position: 0% 50%;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    50% &#123;</span></span><br><span class="line"><span class="comment">      background-position: 100% 50%;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    100% &#123;</span></span><br><span class="line"><span class="comment">      background-position: 0% 50%;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  @keyframes Gradient &#123;</span></span><br><span class="line"><span class="comment">    0% &#123;</span></span><br><span class="line"><span class="comment">      background-position: 0% 50%;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    50% &#123;</span></span><br><span class="line"><span class="comment">      background-position: 100% 50%;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    100% &#123;</span></span><br><span class="line"><span class="comment">      background-position: 0% 50%;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  body &#123; /*卡片名字和签名本体*/</span></span><br><span class="line">    <span class="comment">/* position: relative;</span></span><br><span class="line"><span class="comment">    min-height: 100%;</span></span><br><span class="line"><span class="comment">    background: var(--global-bg);</span></span><br><span class="line"><span class="comment">    color: #f1ecec;</span></span><br><span class="line"><span class="comment">    font-size: var(--global-font-size);</span></span><br><span class="line"><span class="comment">    font-family: -apple-system, BlinkMacSystemFont, &#x27;Segoe UI&#x27;, &#x27;Helvetica Neue&#x27;, Lato, Roboto, &#x27;PingFang SC&#x27;, &#x27;Microsoft YaHei&#x27;, sans-serif;</span></span><br><span class="line"><span class="comment">    line-height: 2;</span></span><br><span class="line"><span class="comment">    -webkit-tap-highlight-color: rgba(0,0,0,0);</span></span><br><span class="line"><span class="comment">&#125;  */</span></span><br></pre></td></tr></table></figure><p>网页其他元素更改都可以自己使用F12查看网页元素来修改添加到custom.css文件中即可</p><h2 id="和风天气"><a href="#和风天气" class="headerlink" title="和风天气"></a>和风天气</h2><p>在<a href="https://console.qweather.com/#/apps中设置相关天气样式后生成代码保存到F:\MyBlog\themes\butterfly\source\js\weather.js中">https://console.qweather.com/#/apps中设置相关天气样式后生成代码保存到F:\MyBlog\themes\butterfly\source\js\weather.js中</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">WIDGET = &#123;</span><br><span class="line">    &quot;CONFIG&quot;: &#123;</span><br><span class="line">      &quot;modules&quot;: <span class="string">&quot;01234&quot;</span>,</span><br><span class="line">      <span class="string">&quot;background&quot;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">      <span class="string">&quot;tmpColor&quot;</span>: <span class="string">&quot;F38181&quot;</span>,</span><br><span class="line">      <span class="string">&quot;tmpSize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cityColor&quot;</span>: <span class="string">&quot;ff6a00&quot;</span>,</span><br><span class="line">      <span class="string">&quot;citySize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span><br><span class="line">      <span class="string">&quot;aqiColor&quot;</span>: <span class="string">&quot;95E1D3&quot;</span>,</span><br><span class="line">      <span class="string">&quot;aqiSize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span><br><span class="line">      <span class="string">&quot;weatherIconSize&quot;</span>: <span class="string">&quot;24&quot;</span>,</span><br><span class="line">      <span class="string">&quot;alertIconSize&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">      <span class="string">&quot;padding&quot;</span>: <span class="string">&quot;10px 10px 10px 10px&quot;</span>,</span><br><span class="line">      <span class="string">&quot;shadow&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;language&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">      <span class="string">&quot;borderRadius&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">      <span class="string">&quot;fixed&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">      <span class="string">&quot;vertical&quot;</span>: <span class="string">&quot;top&quot;</span>,</span><br><span class="line">      <span class="string">&quot;horizontal&quot;</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">      <span class="string">&quot;left&quot;</span>: <span class="string">&quot;150&quot;</span>,</span><br><span class="line">      <span class="string">&quot;top&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">      <span class="string">&quot;key&quot;</span>: <span class="string">&quot;477fc87fb5fe48a0b17539feeb521225&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>将其引入到__config.butterfly.yml中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/custom.css&quot; media=&quot;defer&quot; onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/font.css&quot;&gt;</span><br><span class="line">    - &lt;script src=&quot;https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0&quot;&gt;&lt;/script&gt;</span><br><span class="line">    - &lt;script async src=&quot;/js/weather.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/icon.css&quot; media=&quot;defer&quot; onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="本地搜索系统"><a href="#本地搜索系统" class="headerlink" title="本地搜索系统"></a>本地搜索系统</h2><ol><li><p>安装依赖，打开任务终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li></ol><p>​            2.修改配置文件<code>_config.yml</code>，添加如下代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br></pre></td></tr></table></figure><p>​            3.在主题配置文件_config.butterfly.yml中修改以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">-  enable: false</span><br><span class="line">+  enable: true</span><br></pre></td></tr></table></figure><p>​            </p><h2 id="公告栏蔚蓝主题美化"><a href="#公告栏蔚蓝主题美化" class="headerlink" title="公告栏蔚蓝主题美化"></a>公告栏蔚蓝主题美化</h2><p>找到F:\MyBlog\themes\butterfly\layout\includes\widget\card_announcement.pug，复制如下代码,注意删去重复代码，优先保留自己原有的那一部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">if theme.aside.card_announcement.enable</span><br><span class="line">  .card-widget.card-announcement</span><br><span class="line">    .item-headline</span><br><span class="line">      i.fas.fa-bullhorn.card-announcement-animation</span><br><span class="line">      span= _p(&#x27;aside.card_announcement&#x27;)</span><br><span class="line">    .announcement_content!= theme.aside.card_announcement.content</span><br><span class="line">  .xpand(style=&#x27;height:200px;&#x27;)</span><br><span class="line">    canvas.illo(width=&#x27;800&#x27; height=&#x27;800&#x27; style=&#x27;max-width: 200px; max-height: 200px; touch-action: none; width: 640px; height: 640px;&#x27;)</span><br><span class="line">script(src=&#x27;https://npm.elemecdn.com/ethan4116-blog/lib/js/other/two-people/twopeople1.js&#x27;)</span><br><span class="line">script(src=&#x27;https://npm.elemecdn.com/ethan4116-blog/lib/js/other/two-people/zdog.dist.js&#x27;)</span><br><span class="line">script#rendered-js(src=&#x27;https://npm.elemecdn.com/ethan4116-blog/lib/js/other/two-people/twopeople.js&#x27;)</span><br><span class="line">style.</span><br><span class="line"> .card-widget.card-announcement &#123;</span><br><span class="line"> margin: 0;</span><br><span class="line"> align-items: center;</span><br><span class="line"> justify-content: center;</span><br><span class="line"> text-align: center;</span><br><span class="line"> &#125;</span><br><span class="line"> canvas &#123;</span><br><span class="line"> display: block;</span><br><span class="line"> margin: 0 auto;</span><br><span class="line"> cursor: move;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>来自<a href="https://tzy1997.com/">一位大佬的博客</a></p><h2 id="历史上的今天"><a href="#历史上的今天" class="headerlink" title="历史上的今天"></a>历史上的今天</h2><p>安装插件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i hexo-history-calendar --save</span><br></pre></td></tr></table></figure><br>在F:\MyBlog_config.yml上添加如下代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">history_calendar:</span><br><span class="line">  priority: 4 #插件的叠放顺序，数字越大，叠放约靠前。</span><br><span class="line">  enable: true</span><br><span class="line">  enable_page: all  #路由地址，all 代表全局开启。如 / 代表主页</span><br><span class="line">  layout:</span><br><span class="line">    type: class</span><br><span class="line">    name: sticky_layout</span><br><span class="line">    index: 0</span><br><span class="line">  temple_html: &#x27;<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-widget card-history&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-content&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-headline&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-clock fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>那年今日<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;history-baidu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;overflow: hidden&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;history_swiper-container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;history-container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;height: 100%&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;history_container_wrapper&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:20px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></p><h2 id="底部徽标"><a href="#底部徽标" class="headerlink" title="底部徽标"></a>底部徽标</h2><p>1.在<a href="https://shields.io/">shieds io</a>中生成想要的徽标</p><p>2.在F:\MyBlog\themes\butterfly\layout\includes\footer.pug中添加以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//-以下是后面加的</span><br><span class="line">  if theme.footer.custom_text</span><br><span class="line">    .footer_custom_text!=`$&#123;theme.footer.custom_text&#125;`</span><br><span class="line">      if theme.footer.custom_text</span><br><span class="line">      .footer_custom_text!=`$&#123;theme.footer.custom_text&#125;`</span><br><span class="line">   </span><br><span class="line">  p#ghbdages //-p和上面if保持相同缩进</span><br><span class="line">    if theme.ghbdage.enable</span><br><span class="line">      each item in theme.ghbdage.bdageitem</span><br><span class="line">        a.github-badge(target=&#x27;_blank&#x27; href=url_for(item.link)  style=&#x27;margin-inline:5px&#x27;)</span><br><span class="line">        img(src=url_for(item.shields) title=item.message)</span><br></pre></td></tr></table></figure><p>3.在_config.butterfly.yml中添加如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#底部徽标</span><br><span class="line">ghbdage:</span><br><span class="line">  enable: true</span><br><span class="line">  bdageitem:</span><br><span class="line">    - link: https://hexo.io/  # 标签跳转链接</span><br><span class="line">      shields: https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo #shields的API链接，填法参考本篇教程</span><br><span class="line">      message: 博客框架为Hexo_v5.3.0 #鼠标悬停时显示的信息</span><br><span class="line">    - link: https://demo.jerryc.me/</span><br><span class="line">      shields: https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender</span><br><span class="line">      message: 主题版本Butterfly_v3.4.2</span><br><span class="line">    - link: https://metroui.org.ua/index.html</span><br><span class="line">      shields: https://img.shields.io/badge/CDN-jsDelivr-orange?style=flat&amp;logo=jsDelivr</span><br><span class="line">      message: 本站使用JsDelivr为静态资源提供CDN加速</span><br><span class="line">    - link: https://beian.miit.gov.cn/</span><br><span class="line">      shields: https://img.shields.io/badge/Hosted-Coding-0cedbe?style=flat&amp;logo=Codio</span><br><span class="line">      message: 滇ICP备-2022007873号</span><br><span class="line">    - link: https://github.com/</span><br><span class="line">      shields: https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub</span><br><span class="line">      message: 本站项目由Gtihub托管</span><br><span class="line">    - link: http://creativecommons.org/licenses/by-nc-sa/4.0/</span><br><span class="line">      shields: https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris</span><br><span class="line">      message: 本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;博客部分插件修改方法&quot;&gt;&lt;a href=&quot;#博客部分插件修改方法&quot; class=&quot;headerlink&quot; title=&quot;博客部分插件修改方法&quot;&gt;&lt;/a&gt;博客部分插件修改方法&lt;/h1&gt;&lt;p&gt;为了避免下次找不到某些功能怎么设置，记录一下搭建以及魔改博客的某些设置记录和</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="修改记录" scheme="http://example.com/tags/%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
